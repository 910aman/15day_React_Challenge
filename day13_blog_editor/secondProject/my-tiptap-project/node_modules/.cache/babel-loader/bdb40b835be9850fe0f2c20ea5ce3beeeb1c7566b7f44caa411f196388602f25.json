{"ast":null,"code":"import { Plugin, PluginKey, TextSelection, Selection, NodeSelection, EditorState } from '@tiptap/pm/state';\nimport { EditorView } from '@tiptap/pm/view';\nimport { keymap } from '@tiptap/pm/keymap';\nimport { Schema, Fragment, DOMParser, DOMSerializer, Node as Node$1, Slice } from '@tiptap/pm/model';\nimport { liftTarget, ReplaceStep, ReplaceAroundStep, joinPoint, Transform, canSplit, canJoin, findWrapping } from '@tiptap/pm/transform';\nimport { createParagraphNear as createParagraphNear$1, deleteSelection as deleteSelection$1, exitCode as exitCode$1, joinUp as joinUp$1, joinDown as joinDown$1, joinBackward as joinBackward$1, joinForward as joinForward$1, joinTextblockBackward as joinTextblockBackward$1, joinTextblockForward as joinTextblockForward$1, lift as lift$1, liftEmptyBlock as liftEmptyBlock$1, newlineInCode as newlineInCode$1, selectNodeBackward as selectNodeBackward$1, selectNodeForward as selectNodeForward$1, selectParentNode as selectParentNode$1, selectTextblockEnd as selectTextblockEnd$1, selectTextblockStart as selectTextblockStart$1, setBlockType, wrapIn as wrapIn$1 } from '@tiptap/pm/commands';\nimport { liftListItem as liftListItem$1, sinkListItem as sinkListItem$1, wrapInList as wrapInList$1 } from '@tiptap/pm/schema-list';\n\n/**\r\n * Takes a Transaction & Editor State and turns it into a chainable state object\r\n * @param config The transaction and state to create the chainable state from\r\n * @returns A chainable Editor state object\r\n */\nfunction createChainableState(config) {\n  const {\n    state,\n    transaction\n  } = config;\n  let {\n    selection\n  } = transaction;\n  let {\n    doc\n  } = transaction;\n  let {\n    storedMarks\n  } = transaction;\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks;\n    },\n    get selection() {\n      return selection;\n    },\n    get doc() {\n      return doc;\n    },\n    get tr() {\n      selection = transaction.selection;\n      doc = transaction.doc;\n      storedMarks = transaction.storedMarks;\n      return transaction;\n    }\n  };\n}\nclass CommandManager {\n  constructor(props) {\n    this.editor = props.editor;\n    this.rawCommands = this.editor.extensionManager.commands;\n    this.customState = props.state;\n  }\n  get hasCustomState() {\n    return !!this.customState;\n  }\n  get state() {\n    return this.customState || this.editor.state;\n  }\n  get commands() {\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const {\n      tr\n    } = state;\n    const props = this.buildProps(tr);\n    return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n      const method = (...args) => {\n        const callback = command(...args)(props);\n        if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n          view.dispatch(tr);\n        }\n        return callback;\n      };\n      return [name, method];\n    }));\n  }\n  get chain() {\n    return () => this.createChain();\n  }\n  get can() {\n    return () => this.createCan();\n  }\n  createChain(startTr, shouldDispatch = true) {\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const callbacks = [];\n    const hasStartTransaction = !!startTr;\n    const tr = startTr || state.tr;\n    const run = () => {\n      if (!hasStartTransaction && shouldDispatch && !tr.getMeta('preventDispatch') && !this.hasCustomState) {\n        view.dispatch(tr);\n      }\n      return callbacks.every(callback => callback === true);\n    };\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args) => {\n          const props = this.buildProps(tr, shouldDispatch);\n          const callback = command(...args)(props);\n          callbacks.push(callback);\n          return chain;\n        };\n        return [name, chainedCommand];\n      })),\n      run\n    };\n    return chain;\n  }\n  createCan(startTr) {\n    const {\n      rawCommands,\n      state\n    } = this;\n    const dispatch = false;\n    const tr = startTr || state.tr;\n    const props = this.buildProps(tr, dispatch);\n    const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n      return [name, (...args) => command(...args)({\n        ...props,\n        dispatch: undefined\n      })];\n    }));\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch)\n    };\n  }\n  buildProps(tr, shouldDispatch = true) {\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const props = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr\n      }),\n      dispatch: shouldDispatch ? () => undefined : undefined,\n      chain: () => this.createChain(tr, shouldDispatch),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n          return [name, (...args) => command(...args)(props)];\n        }));\n      }\n    };\n    return props;\n  }\n}\nclass EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n  on(event, fn) {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n    this.callbacks[event].push(fn);\n    return this;\n  }\n  emit(event, ...args) {\n    const callbacks = this.callbacks[event];\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args));\n    }\n    return this;\n  }\n  off(event, fn) {\n    const callbacks = this.callbacks[event];\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn);\n      } else {\n        delete this.callbacks[event];\n      }\n    }\n    return this;\n  }\n  removeAllListeners() {\n    this.callbacks = {};\n  }\n}\n\n/**\r\n * Returns a field from an extension\r\n * @param extension The Tiptap extension\r\n * @param field The field, for example `renderHTML` or `priority`\r\n * @param context The context object that should be passed as `this` into the function\r\n * @returns The field value\r\n */\nfunction getExtensionField(extension, field, context) {\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context);\n  }\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n    });\n    return value;\n  }\n  return extension.config[field];\n}\nfunction splitExtensions(extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension');\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node');\n  const markExtensions = extensions.filter(extension => extension.type === 'mark');\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions\n  };\n}\n\n/**\r\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\r\n * @param extensions List of extensions\r\n */\nfunction getAttributesFromExtensions(extensions) {\n  const extensionAttributes = [];\n  const {\n    nodeExtensions,\n    markExtensions\n  } = splitExtensions(extensions);\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];\n  const defaultAttribute = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false\n  };\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n    if (!addGlobalAttributes) {\n      return;\n    }\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes();\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object.entries(globalAttribute.attributes).forEach(([name, attribute]) => {\n          extensionAttributes.push({\n            type,\n            name,\n            attribute: {\n              ...defaultAttribute,\n              ...attribute\n            }\n          });\n        });\n      });\n    });\n  });\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const addAttributes = getExtensionField(extension, 'addAttributes', context);\n    if (!addAttributes) {\n      return;\n    }\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes();\n    Object.entries(attributes).forEach(([name, attribute]) => {\n      const mergedAttr = {\n        ...defaultAttribute,\n        ...attribute\n      };\n      if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === 'function') {\n        mergedAttr.default = mergedAttr.default();\n      }\n      if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\n        delete mergedAttr.default;\n      }\n      extensionAttributes.push({\n        type: extension.name,\n        name,\n        attribute: mergedAttr\n      });\n    });\n  });\n  return extensionAttributes;\n}\nfunction getNodeType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n    }\n    return schema.nodes[nameOrType];\n  }\n  return nameOrType;\n}\nfunction mergeAttributes(...objects) {\n  return objects.filter(item => !!item).reduce((items, item) => {\n    const mergedAttributes = {\n      ...items\n    };\n    Object.entries(item).forEach(([key, value]) => {\n      const exists = mergedAttributes[key];\n      if (!exists) {\n        mergedAttributes[key] = value;\n        return;\n      }\n      if (key === 'class') {\n        const valueClasses = value ? value.split(' ') : [];\n        const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(' ') : [];\n        const insertClasses = valueClasses.filter(valueClass => !existingClasses.includes(valueClass));\n        mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ');\n      } else if (key === 'style') {\n        mergedAttributes[key] = [mergedAttributes[key], value].join('; ');\n      } else {\n        mergedAttributes[key] = value;\n      }\n    });\n    return mergedAttributes;\n  }, {});\n}\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n  return extensionAttributes.filter(item => item.attribute.rendered).map(item => {\n    if (!item.attribute.renderHTML) {\n      return {\n        [item.name]: nodeOrMark.attrs[item.name]\n      };\n    }\n    return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n  }).reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\r\n * Optionally calls `value` as a function.\r\n * Otherwise it is returned directly.\r\n * @param value Function or any value.\r\n * @param context Optional context to bind to function.\r\n * @param props Optional props to pass to function.\r\n */\nfunction callOrReturn(value, context = undefined, ...props) {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props);\n    }\n    return value(...props);\n  }\n  return value;\n}\nfunction isEmptyObject(value = {}) {\n  return Object.keys(value).length === 0 && value.constructor === Object;\n}\nfunction fromString(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value);\n  }\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  return value;\n}\n\n/**\r\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\r\n * Cancels when `getAttrs` returned `false`.\r\n * @param parseRule ProseMirror ParseRule\r\n * @param extensionAttributes List of attributes to inject\r\n */\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n  if (parseRule.style) {\n    return parseRule;\n  }\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n      if (oldAttributes === false) {\n        return false;\n      }\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n        if (value === null || value === undefined) {\n          return items;\n        }\n        return {\n          ...items,\n          [item.name]: value\n        };\n      }, {});\n      return {\n        ...oldAttributes,\n        ...newAttributes\n      };\n    }\n  };\n}\nfunction cleanUpSchemaItem(data) {\n  return Object.fromEntries(\n  // @ts-ignore\n  Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false;\n    }\n    return value !== null && value !== undefined;\n  }));\n}\n/**\r\n * Creates a new Prosemirror schema based on the given extensions.\r\n * @param extensions An array of Tiptap extensions\r\n * @param editor The editor instance\r\n * @returns A Prosemirror schema\r\n */\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n  var _a;\n  const allAttributes = getAttributesFromExtensions(extensions);\n  const {\n    nodeExtensions,\n    markExtensions\n  } = splitExtensions(extensions);\n  const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      editor\n    };\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {})\n      };\n    }, {});\n    const schema = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        var _a;\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    });\n    const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n    }\n    const renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n      });\n    }\n    const renderText = getExtensionField(extension, 'renderText', context);\n    if (renderText) {\n      schema.toText = renderText;\n    }\n    return [extension.name, schema];\n  }));\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      editor\n    };\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {})\n      };\n    }, {});\n    const schema = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        var _a;\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    });\n    const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n    }\n    const renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n      });\n    }\n    return [extension.name, schema];\n  }));\n  return new Schema({\n    topNode,\n    nodes,\n    marks\n  });\n}\n\n/**\r\n * Tries to get a node or mark type by its name.\r\n * @param name The name of the node or mark type\r\n * @param schema The Prosemiror schema to search in\r\n * @returns The node or mark type, or null if it doesn't exist\r\n */\nfunction getSchemaTypeByName(name, schema) {\n  return schema.nodes[name] || schema.marks[name] || null;\n}\nfunction isExtensionRulesEnabled(extension, enabled) {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string' ? enabledExtension : enabledExtension.name;\n      return name === extension.name;\n    });\n  }\n  return enabled;\n}\n\n/**\r\n * Returns the text content of a resolved prosemirror position\r\n * @param $from The resolved position to get the text content from\r\n * @param maxMatch The maximum number of characters to match\r\n * @returns The text content\r\n */\nconst getTextContentFromNodes = ($from, maxMatch = 500) => {\n  let textBefore = '';\n  const sliceEndPos = $from.parentOffset;\n  $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {\n    var _a, _b;\n    const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n      node,\n      pos,\n      parent,\n      index\n    })) || node.textContent || '%leaf%';\n    textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));\n  });\n  return textBefore;\n};\nfunction isRegExp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\nclass InputRule {\n  constructor(config) {\n    this.find = config.find;\n    this.handler = config.handler;\n  }\n}\nconst inputRuleMatcherHandler = (text, find) => {\n  if (isRegExp(find)) {\n    return find.exec(text);\n  }\n  const inputRuleMatch = find(text);\n  if (!inputRuleMatch) {\n    return null;\n  }\n  const result = [inputRuleMatch.text];\n  result.index = inputRuleMatch.index;\n  result.input = text;\n  result.data = inputRuleMatch.data;\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n    }\n    result.push(inputRuleMatch.replaceWith);\n  }\n  return result;\n};\nfunction run$1(config) {\n  var _a;\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin\n  } = config;\n  const {\n    view\n  } = editor;\n  if (view.composing) {\n    return false;\n  }\n  const $from = view.state.doc.resolve(from);\n  if (\n  // check for code node\n  $from.parent.type.spec.code\n  // check for code mark\n  || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {\n    return false;\n  }\n  let matched = false;\n  const textBefore = getTextContentFromNodes($from) + text;\n  rules.forEach(rule => {\n    if (matched) {\n      return;\n    }\n    const match = inputRuleMatcherHandler(textBefore, rule.find);\n    if (!match) {\n      return;\n    }\n    const tr = view.state.tr;\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr\n    });\n    const range = {\n      from: from - (match[0].length - text.length),\n      to\n    };\n    const {\n      commands,\n      chain,\n      can\n    } = new CommandManager({\n      editor,\n      state\n    });\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can\n    });\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return;\n    }\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text\n    });\n    view.dispatch(tr);\n    matched = true;\n  });\n  return matched;\n}\n/**\r\n * Create an input rules plugin. When enabled, it will cause text\r\n * input that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\nfunction inputRulesPlugin(props) {\n  const {\n    editor,\n    rules\n  } = props;\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null;\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(plugin);\n        if (stored) {\n          return stored;\n        }\n        // if InputRule is triggered by insertContent()\n        const simulatedInputMeta = tr.getMeta('applyInputRules');\n        const isSimulatedInput = !!simulatedInputMeta;\n        if (isSimulatedInput) {\n          setTimeout(() => {\n            const {\n              from,\n              text\n            } = simulatedInputMeta;\n            const to = from + text.length;\n            run$1({\n              editor,\n              from,\n              to,\n              text,\n              rules,\n              plugin\n            });\n          });\n        }\n        return tr.selectionSet || tr.docChanged ? null : prev;\n      }\n    },\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run$1({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin\n        });\n      },\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const {\n              $cursor\n            } = view.state.selection;\n            if ($cursor) {\n              run$1({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin\n              });\n            }\n          });\n          return false;\n        }\n      },\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false;\n        }\n        const {\n          $cursor\n        } = view.state.selection;\n        if ($cursor) {\n          return run$1({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin\n          });\n        }\n        return false;\n      }\n    },\n    // @ts-ignore\n    isInputRules: true\n  });\n  return plugin;\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\r\n * Paste rules are used to react to pasted content.\r\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\r\n */\nclass PasteRule {\n  constructor(config) {\n    this.find = config.find;\n    this.handler = config.handler;\n  }\n}\nconst pasteRuleMatcherHandler = (text, find, event) => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)];\n  }\n  const matches = find(text, event);\n  if (!matches) {\n    return [];\n  }\n  return matches.map(pasteRuleMatch => {\n    const result = [pasteRuleMatch.text];\n    result.index = pasteRuleMatch.index;\n    result.input = text;\n    result.data = pasteRuleMatch.data;\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n      }\n      result.push(pasteRuleMatch.replaceWith);\n    }\n    return result;\n  });\n};\nfunction run(config) {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rule,\n    pasteEvent,\n    dropEvent\n  } = config;\n  const {\n    commands,\n    chain,\n    can\n  } = new CommandManager({\n    editor,\n    state\n  });\n  const handlers = [];\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return;\n    }\n    const resolvedFrom = Math.max(from, pos);\n    const resolvedTo = Math.min(to, pos + node.content.size);\n    const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc');\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return;\n      }\n      const start = resolvedFrom + match.index + 1;\n      const end = start + match[0].length;\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end)\n      };\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n        pasteEvent,\n        dropEvent\n      });\n      handlers.push(handler);\n    });\n  });\n  const success = handlers.every(handler => handler !== null);\n  return success;\n}\nconst createClipboardPasteEvent = text => {\n  var _a;\n  const event = new ClipboardEvent('paste', {\n    clipboardData: new DataTransfer()\n  });\n  (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/html', text);\n  return event;\n};\n/**\r\n * Create an paste rules plugin. When enabled, it will cause pasted\r\n * text that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */\nfunction pasteRulesPlugin(props) {\n  const {\n    editor,\n    rules\n  } = props;\n  let dragSourceElement = null;\n  let isPastedFromProseMirror = false;\n  let isDroppedFromProseMirror = false;\n  let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n  let dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n  const processEvent = ({\n    state,\n    from,\n    to,\n    rule,\n    pasteEvt\n  }) => {\n    const tr = state.tr;\n    const chainableState = createChainableState({\n      state,\n      transaction: tr\n    });\n    const handler = run({\n      editor,\n      state: chainableState,\n      from: Math.max(from - 1, 0),\n      to: to.b - 1,\n      rule,\n      pasteEvent: pasteEvt,\n      dropEvent\n    });\n    if (!handler || !tr.steps.length) {\n      return;\n    }\n    dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n    pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n    return tr;\n  };\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = event => {\n          var _a;\n          dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? view.dom.parentElement : null;\n        };\n        window.addEventListener('dragstart', handleDragstart);\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart);\n          }\n        };\n      },\n      props: {\n        handleDOMEvents: {\n          drop: (view, event) => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n            dropEvent = event;\n            return false;\n          },\n          paste: (_view, event) => {\n            var _a;\n            const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n            pasteEvent = event;\n            isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n            return false;\n          }\n        }\n      },\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0];\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\n        // if PasteRule is triggered by insertContent()\n        const simulatedPasteMeta = transaction.getMeta('applyPasteRules');\n        const isSimulatedPaste = !!simulatedPasteMeta;\n        if (!isPaste && !isDrop && !isSimulatedPaste) {\n          return;\n        }\n        // Handle simulated paste\n        if (isSimulatedPaste) {\n          const {\n            from,\n            text\n          } = simulatedPasteMeta;\n          const to = from + text.length;\n          const pasteEvt = createClipboardPasteEvent(text);\n          return processEvent({\n            rule,\n            state,\n            from,\n            to: {\n              b: to\n            },\n            pasteEvt\n          });\n        }\n        // handle actual paste/drop\n        const from = oldState.doc.content.findDiffStart(state.doc.content);\n        const to = oldState.doc.content.findDiffEnd(state.doc.content);\n        // stop if there is no changed range\n        if (!isNumber(from) || !to || from === to.b) {\n          return;\n        }\n        return processEvent({\n          rule,\n          state,\n          from,\n          to,\n          pasteEvt: pasteEvent\n        });\n      }\n    });\n  });\n  return plugins;\n}\nfunction findDuplicates(items) {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index);\n  return [...new Set(filtered)];\n}\nclass ExtensionManager {\n  constructor(extensions, editor) {\n    this.splittableMarks = [];\n    this.editor = editor;\n    this.extensions = ExtensionManager.resolve(extensions);\n    this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n    this.setupExtensions();\n  }\n  /**\r\n   * Returns a flattened and sorted extension list while\r\n   * also checking for duplicated extensions and warns the user.\r\n   * @param extensions An array of Tiptap extensions\r\n   * @returns An flattened and sorted array of Tiptap extensions\r\n   */\n  static resolve(extensions) {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`);\n    }\n    return resolvedExtensions;\n  }\n  /**\r\n   * Create a flattened array of extensions by traversing the `addExtensions` field.\r\n   * @param extensions An array of Tiptap extensions\r\n   * @returns A flattened array of Tiptap extensions\r\n   */\n  static flatten(extensions) {\n    return extensions.map(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage\n      };\n      const addExtensions = getExtensionField(extension, 'addExtensions', context);\n      if (addExtensions) {\n        return [extension, ...this.flatten(addExtensions())];\n      }\n      return extension;\n    })\n    // `Infinity` will break TypeScript so we set a number that is probably high enough\n    .flat(10);\n  }\n  /**\r\n   * Sort extensions by priority.\r\n   * @param extensions An array of Tiptap extensions\r\n   * @returns A sorted array of Tiptap extensions by priority\r\n   */\n  static sort(extensions) {\n    const defaultPriority = 100;\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField(a, 'priority') || defaultPriority;\n      const priorityB = getExtensionField(b, 'priority') || defaultPriority;\n      if (priorityA > priorityB) {\n        return -1;\n      }\n      if (priorityA < priorityB) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  /**\r\n   * Get all commands from the extensions.\r\n   * @returns An object with all commands where the key is the command name and the value is the command function\r\n   */\n  get commands() {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      const addCommands = getExtensionField(extension, 'addCommands', context);\n      if (!addCommands) {\n        return commands;\n      }\n      return {\n        ...commands,\n        ...addCommands()\n      };\n    }, {});\n  }\n  /**\r\n   * Get all registered Prosemirror plugins from the extensions.\r\n   * @returns An array of Prosemirror plugins\r\n   */\n  get plugins() {\n    const {\n      editor\n    } = this;\n    // With ProseMirror, first plugins within an array are executed first.\n    // In Tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse());\n    const inputRules = [];\n    const pasteRules = [];\n    const allPlugins = extensions.map(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      const plugins = [];\n      const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n      let defaultBindings = {};\n      // bind exit handling\n      if (extension.type === 'mark' && extension.config.exitable) {\n        defaultBindings.ArrowRight = () => Mark.handleExit({\n          editor,\n          mark: extension\n        });\n      }\n      if (addKeyboardShortcuts) {\n        const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\n          return [shortcut, () => method({\n            editor\n          })];\n        }));\n        defaultBindings = {\n          ...defaultBindings,\n          ...bindings\n        };\n      }\n      const keyMapPlugin = keymap(defaultBindings);\n      plugins.push(keyMapPlugin);\n      const addInputRules = getExtensionField(extension, 'addInputRules', context);\n      if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n        inputRules.push(...addInputRules());\n      }\n      const addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n      if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n        pasteRules.push(...addPasteRules());\n      }\n      const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n      if (addProseMirrorPlugins) {\n        const proseMirrorPlugins = addProseMirrorPlugins();\n        plugins.push(...proseMirrorPlugins);\n      }\n      return plugins;\n    }).flat();\n    return [inputRulesPlugin({\n      editor,\n      rules: inputRules\n    }), ...pasteRulesPlugin({\n      editor,\n      rules: pasteRules\n    }), ...allPlugins];\n  }\n  /**\r\n   * Get all attributes from the extensions.\r\n   * @returns An array of attributes\r\n   */\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions);\n  }\n  /**\r\n   * Get all node views from the extensions.\r\n   * @returns An object with all node views where the key is the node name and the value is the node view function\r\n   */\n  get nodeViews() {\n    const {\n      editor\n    } = this;\n    const {\n      nodeExtensions\n    } = splitExtensions(this.extensions);\n    return Object.fromEntries(nodeExtensions.filter(extension => !!getExtensionField(extension, 'addNodeView')).map(extension => {\n      const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n        type: getNodeType(extension.name, this.schema)\n      };\n      const addNodeView = getExtensionField(extension, 'addNodeView', context);\n      if (!addNodeView) {\n        return [];\n      }\n      const nodeview = (node, view, getPos, decorations) => {\n        const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n        return addNodeView()({\n          editor,\n          node,\n          getPos,\n          decorations,\n          HTMLAttributes,\n          extension\n        });\n      };\n      return [extension.name, nodeview];\n    }));\n  }\n  /**\r\n   * Go through all extensions, create extension storages & setup marks\r\n   * & bind editor event listener.\r\n   */\n  setupExtensions() {\n    this.extensions.forEach(extension => {\n      var _a;\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage;\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      if (extension.type === 'mark') {\n        const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name);\n        }\n      }\n      const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n      const onCreate = getExtensionField(extension, 'onCreate', context);\n      const onUpdate = getExtensionField(extension, 'onUpdate', context);\n      const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n      const onTransaction = getExtensionField(extension, 'onTransaction', context);\n      const onFocus = getExtensionField(extension, 'onFocus', context);\n      const onBlur = getExtensionField(extension, 'onBlur', context);\n      const onDestroy = getExtensionField(extension, 'onDestroy', context);\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate);\n      }\n      if (onCreate) {\n        this.editor.on('create', onCreate);\n      }\n      if (onUpdate) {\n        this.editor.on('update', onUpdate);\n      }\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate);\n      }\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction);\n      }\n      if (onFocus) {\n        this.editor.on('focus', onFocus);\n      }\n      if (onBlur) {\n        this.editor.on('blur', onBlur);\n      }\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy);\n      }\n    });\n  }\n}\n\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n  if (getType(value) !== 'Object') {\n    return false;\n  }\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\nfunction mergeDeep(target, source) {\n  const output = {\n    ...target\n  };\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\n\n/**\r\n * The Extension class is the base class for all extensions.\r\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\r\n */\nclass Extension {\n  constructor(config = {}) {\n    this.type = 'extension';\n    this.name = 'extension';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = {\n      ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  static create(config = {}) {\n    return new Extension(config);\n  }\n  configure(options = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend();\n    extension.parent = this.parent;\n    extension.options = mergeDeep(this.options, options);\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n  extend(extendedConfig = {}) {\n    const extension = new Extension({\n      ...this.config,\n      ...extendedConfig\n    });\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n}\n\n/**\r\n * Gets the text between two positions in a Prosemirror node\r\n * and serializes it using the given text serializers and block separator (see getText)\r\n * @param startNode The Prosemirror node to start from\r\n * @param range The range of the text to get\r\n * @param options Options for the text serializer & block separator\r\n * @returns The text between the two positions\r\n */\nfunction getTextBetween(startNode, range, options) {\n  const {\n    from,\n    to\n  } = range;\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {}\n  } = options || {};\n  let text = '';\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    var _a;\n    if (node.isBlock && pos > from) {\n      text += blockSeparator;\n    }\n    const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n    if (textSerializer) {\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range\n        });\n      }\n      // do not descend into child nodes when there exists a serializer\n      return false;\n    }\n    if (node.isText) {\n      text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n    }\n  });\n  return text;\n}\n\n/**\r\n * Find text serializers `toText` in a Prosemirror schema\r\n * @param schema The Prosemirror schema to search in\r\n * @returns A record of text serializers by node name\r\n */\nfunction getTextSerializersFromSchema(schema) {\n  return Object.fromEntries(Object.entries(schema.nodes).filter(([, node]) => node.spec.toText).map(([name, node]) => [name, node.spec.toText]));\n}\nconst ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n  addOptions() {\n    return {\n      blockSeparator: undefined\n    };\n  },\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('clipboardTextSerializer'),\n      props: {\n        clipboardTextSerializer: () => {\n          const {\n            editor\n          } = this;\n          const {\n            state,\n            schema\n          } = editor;\n          const {\n            doc,\n            selection\n          } = state;\n          const {\n            ranges\n          } = selection;\n          const from = Math.min(...ranges.map(range => range.$from.pos));\n          const to = Math.max(...ranges.map(range => range.$to.pos));\n          const textSerializers = getTextSerializersFromSchema(schema);\n          const range = {\n            from,\n            to\n          };\n          return getTextBetween(doc, range, {\n            ...(this.options.blockSeparator !== undefined ? {\n              blockSeparator: this.options.blockSeparator\n            } : {}),\n            textSerializers\n          });\n        }\n      }\n    })];\n  }\n});\nconst blur = () => ({\n  editor,\n  view\n}) => {\n  requestAnimationFrame(() => {\n    var _a;\n    if (!editor.isDestroyed) {\n      view.dom.blur();\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n    }\n  });\n  return true;\n};\nconst clearContent = (emitUpdate = false) => ({\n  commands\n}) => {\n  return commands.setContent('', emitUpdate);\n};\nconst clearNodes = () => ({\n  state,\n  tr,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const {\n    ranges\n  } = selection;\n  if (!dispatch) {\n    return true;\n  }\n  ranges.forEach(({\n    $from,\n    $to\n  }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return;\n      }\n      const {\n        doc,\n        mapping\n      } = tr;\n      const $mappedFrom = doc.resolve(mapping.map(pos));\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n      const nodeRange = $mappedFrom.blockRange($mappedTo);\n      if (!nodeRange) {\n        return;\n      }\n      const targetLiftDepth = liftTarget(nodeRange);\n      if (node.type.isTextblock) {\n        const {\n          defaultType\n        } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n        tr.setNodeMarkup(nodeRange.start, defaultType);\n      }\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth);\n      }\n    });\n  });\n  return true;\n};\nconst command = fn => props => {\n  return fn(props);\n};\nconst createParagraphNear = () => ({\n  state,\n  dispatch\n}) => {\n  return createParagraphNear$1(state, dispatch);\n};\nconst cut = (originRange, targetPos) => ({\n  editor,\n  tr\n}) => {\n  const {\n    state\n  } = editor;\n  const contentSlice = state.doc.slice(originRange.from, originRange.to);\n  tr.deleteRange(originRange.from, originRange.to);\n  const newPos = tr.mapping.map(targetPos);\n  tr.insert(newPos, contentSlice.content);\n  tr.setSelection(new TextSelection(tr.doc.resolve(newPos - 1)));\n  return true;\n};\nconst deleteCurrentNode = () => ({\n  tr,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const currentNode = selection.$anchor.node();\n  // if there is content inside the current node, break out of this command\n  if (currentNode.content.size > 0) {\n    return false;\n  }\n  const $pos = tr.selection.$anchor;\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth);\n    if (node.type === currentNode.type) {\n      if (dispatch) {\n        const from = $pos.before(depth);\n        const to = $pos.after(depth);\n        tr.delete(from, to).scrollIntoView();\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst deleteNode = typeOrName => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const $pos = tr.selection.$anchor;\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth);\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth);\n        const to = $pos.after(depth);\n        tr.delete(from, to).scrollIntoView();\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst deleteRange = range => ({\n  tr,\n  dispatch\n}) => {\n  const {\n    from,\n    to\n  } = range;\n  if (dispatch) {\n    tr.delete(from, to);\n  }\n  return true;\n};\nconst deleteSelection = () => ({\n  state,\n  dispatch\n}) => {\n  return deleteSelection$1(state, dispatch);\n};\nconst enter = () => ({\n  commands\n}) => {\n  return commands.keyboardShortcut('Enter');\n};\nconst exitCode = () => ({\n  state,\n  dispatch\n}) => {\n  return exitCode$1(state, dispatch);\n};\n\n/**\r\n * Check if object1 includes object2\r\n * @param object1 Object\r\n * @param object2 Object\r\n */\nfunction objectIncludes(object1, object2, options = {\n  strict: true\n}) {\n  const keys = Object.keys(object2);\n  if (!keys.length) {\n    return true;\n  }\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key];\n    }\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key]);\n    }\n    return object2[key] === object1[key];\n  });\n}\nfunction findMarkInSet(marks, type, attributes = {}) {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes);\n  });\n}\nfunction isMarkInSet(marks, type, attributes = {}) {\n  return !!findMarkInSet(marks, type, attributes);\n}\nfunction getMarkRange($pos, type, attributes = {}) {\n  if (!$pos || !type) {\n    return;\n  }\n  let start = $pos.parent.childAfter($pos.parentOffset);\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset);\n  }\n  if (!start.node) {\n    return;\n  }\n  const mark = findMarkInSet([...start.node.marks], type, attributes);\n  if (!mark) {\n    return;\n  }\n  let startIndex = start.index;\n  let startPos = $pos.start() + start.offset;\n  let endIndex = startIndex + 1;\n  let endPos = startPos + start.node.nodeSize;\n  findMarkInSet([...start.node.marks], type, attributes);\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1;\n    startPos -= $pos.parent.child(startIndex).nodeSize;\n  }\n  while (endIndex < $pos.parent.childCount && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {\n    endPos += $pos.parent.child(endIndex).nodeSize;\n    endIndex += 1;\n  }\n  return {\n    from: startPos,\n    to: endPos\n  };\n}\nfunction getMarkType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n    }\n    return schema.marks[nameOrType];\n  }\n  return nameOrType;\n}\nconst extendMarkRange = (typeOrName, attributes = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    doc,\n    selection\n  } = tr;\n  const {\n    $from,\n    from,\n    to\n  } = selection;\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes);\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to);\n      tr.setSelection(newSelection);\n    }\n  }\n  return true;\n};\nconst first = commands => props => {\n  const items = typeof commands === 'function' ? commands(props) : commands;\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true;\n    }\n  }\n  return false;\n};\nfunction isTextSelection(value) {\n  return value instanceof TextSelection;\n}\nfunction minMax(value = 0, min = 0, max = 0) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction resolveFocusPosition(doc, position = null) {\n  if (!position) {\n    return null;\n  }\n  const selectionAtStart = Selection.atStart(doc);\n  const selectionAtEnd = Selection.atEnd(doc);\n  if (position === 'start' || position === true) {\n    return selectionAtStart;\n  }\n  if (position === 'end') {\n    return selectionAtEnd;\n  }\n  const minPos = selectionAtStart.from;\n  const maxPos = selectionAtEnd.to;\n  if (position === 'all') {\n    return TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n  }\n  return TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\nfunction isiOS() {\n  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;\n}\nconst focus = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options\n  };\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      view.dom.focus();\n    }\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus();\n        if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n          editor.commands.scrollIntoView();\n        }\n      }\n    });\n  };\n  if (view.hasFocus() && position === null || position === false) {\n    return true;\n  }\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus();\n    return true;\n  }\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n  const isSameSelection = editor.state.selection.eq(selection);\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection);\n    }\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks);\n    }\n    delayedFocus();\n  }\n  return true;\n};\nconst forEach = (items, fn) => props => {\n  return items.every((item, index) => fn(item, {\n    ...props,\n    index\n  }));\n};\nconst insertContent = (value, options) => ({\n  tr,\n  commands\n}) => {\n  return commands.insertContentAt({\n    from: tr.selection.from,\n    to: tr.selection.to\n  }, value, options);\n};\nconst removeWhitespaces = node => {\n  const children = node.childNodes;\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i];\n    if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n      node.removeChild(child);\n    } else if (child.nodeType === 1) {\n      removeWhitespaces(child);\n    }\n  }\n  return node;\n};\nfunction elementFromString(value) {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`;\n  const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n  return removeWhitespaces(html);\n}\n\n/**\r\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\r\n * @param content The JSON or HTML content to create the node from\r\n * @param schema The Prosemirror schema to use for the node\r\n * @param options Options for the parser\r\n * @returns The created Prosemirror node or fragment\r\n */\nfunction createNodeFromContent(content, schema, options) {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options\n  };\n  const isJSONContent = typeof content === 'object' && content !== null;\n  const isTextContent = typeof content === 'string';\n  if (isJSONContent) {\n    try {\n      const isArrayContent = Array.isArray(content) && content.length > 0;\n      // if the JSON Content is an array of nodes, create a fragment for each node\n      if (isArrayContent) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));\n      }\n      return schema.nodeFromJSON(content);\n    } catch (error) {\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n      return createNodeFromContent('', schema, options);\n    }\n  }\n  if (isTextContent) {\n    const parser = DOMParser.fromSchema(schema);\n    return options.slice ? parser.parseSlice(elementFromString(content), options.parseOptions).content : parser.parse(elementFromString(content), options.parseOptions);\n  }\n  return createNodeFromContent('', schema, options);\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  const last = tr.steps.length - 1;\n  if (last < startLen) {\n    return;\n  }\n  const step = tr.steps[last];\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return;\n  }\n  const map = tr.mapping.maps[last];\n  let end = 0;\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\nconst isFragment = nodeOrFragment => {\n  return nodeOrFragment.toString().startsWith('<');\n};\nconst insertContentAt = (position, value, options) => ({\n  tr,\n  dispatch,\n  editor\n}) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      applyInputRules: false,\n      applyPasteRules: false,\n      ...options\n    };\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions\n      }\n    });\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true;\n    }\n    let {\n      from,\n      to\n    } = typeof position === 'number' ? {\n      from: position,\n      to: position\n    } : {\n      from: position.from,\n      to: position.to\n    };\n    let isOnlyTextContent = true;\n    let isOnlyBlockContent = true;\n    const nodes = isFragment(content) ? content : [content];\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check();\n      isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n      isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n    });\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const {\n        parent\n      } = tr.doc.resolve(from);\n      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n      if (isEmptyTextBlock) {\n        from -= 1;\n        to += 1;\n      }\n    }\n    let newContent;\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      // if value is string, we can use it directly\n      // otherwise if it is an array, we have to join it\n      if (Array.isArray(value)) {\n        newContent = value.map(v => v.text || '').join('');\n      } else if (typeof value === 'object' && !!value && !!value.text) {\n        newContent = value.text;\n      } else {\n        newContent = value;\n      }\n      tr.insertText(newContent, from, to);\n    } else {\n      newContent = content;\n      tr.replaceWith(from, to, newContent);\n    }\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n    }\n    if (options.applyInputRules) {\n      tr.setMeta('applyInputRules', {\n        from,\n        text: newContent\n      });\n    }\n    if (options.applyPasteRules) {\n      tr.setMeta('applyPasteRules', {\n        from,\n        text: newContent\n      });\n    }\n  }\n  return true;\n};\nconst joinUp = () => ({\n  state,\n  dispatch\n}) => {\n  return joinUp$1(state, dispatch);\n};\nconst joinDown = () => ({\n  state,\n  dispatch\n}) => {\n  return joinDown$1(state, dispatch);\n};\nconst joinBackward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinBackward$1(state, dispatch);\n};\nconst joinForward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinForward$1(state, dispatch);\n};\nconst joinItemBackward = () => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, -1);\n    if (point === null || point === undefined) {\n      return false;\n    }\n    tr.join(point, 2);\n    if (dispatch) {\n      dispatch(tr);\n    }\n    return true;\n  } catch {\n    return false;\n  }\n};\nconst joinItemForward = () => ({\n  state,\n  dispatch,\n  tr\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, +1);\n    if (point === null || point === undefined) {\n      return false;\n    }\n    tr.join(point, 2);\n    if (dispatch) {\n      dispatch(tr);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nconst joinTextblockBackward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinTextblockBackward$1(state, dispatch);\n};\nconst joinTextblockForward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinTextblockForward$1(state, dispatch);\n};\nfunction isMacOS() {\n  return typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n}\nfunction normalizeKeyName(name) {\n  const parts = name.split(/-(?!$)/);\n  let result = parts[parts.length - 1];\n  if (result === 'Space') {\n    result = ' ';\n  }\n  let alt;\n  let ctrl;\n  let shift;\n  let meta;\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i];\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true;\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true;\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true;\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true;\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true;\n      } else {\n        ctrl = true;\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`);\n    }\n  }\n  if (alt) {\n    result = `Alt-${result}`;\n  }\n  if (ctrl) {\n    result = `Ctrl-${result}`;\n  }\n  if (meta) {\n    result = `Meta-${result}`;\n  }\n  if (shift) {\n    result = `Shift-${result}`;\n  }\n  return result;\n}\nconst keyboardShortcut = name => ({\n  editor,\n  view,\n  tr,\n  dispatch\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/);\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space' ? ' ' : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true\n  });\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event));\n  });\n  capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {\n    const newStep = step.map(tr.mapping);\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep);\n    }\n  });\n  return true;\n};\nfunction isNodeActive(state, typeOrName, attributes = {}) {\n  const {\n    from,\n    to,\n    empty\n  } = state.selection;\n  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n  const nodeRanges = [];\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return;\n    }\n    const relativeFrom = Math.max(from, pos);\n    const relativeTo = Math.min(to, pos + node.nodeSize);\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo\n    });\n  });\n  const selectionRange = to - from;\n  const matchedNodeRanges = nodeRanges.filter(nodeRange => {\n    if (!type) {\n      return true;\n    }\n    return type.name === nodeRange.node.type.name;\n  }).filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, {\n    strict: false\n  }));\n  if (empty) {\n    return !!matchedNodeRanges.length;\n  }\n  const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);\n  return range >= selectionRange;\n}\nconst lift = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const isActive = isNodeActive(state, type, attributes);\n  if (!isActive) {\n    return false;\n  }\n  return lift$1(state, dispatch);\n};\nconst liftEmptyBlock = () => ({\n  state,\n  dispatch\n}) => {\n  return liftEmptyBlock$1(state, dispatch);\n};\nconst liftListItem = typeOrName => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return liftListItem$1(type)(state, dispatch);\n};\nconst newlineInCode = () => ({\n  state,\n  dispatch\n}) => {\n  return newlineInCode$1(state, dispatch);\n};\n\n/**\r\n * Get the type of a schema item by its name.\r\n * @param name The name of the schema item\r\n * @param schema The Prosemiror schema to search in\r\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\r\n */\nfunction getSchemaTypeNameByName(name, schema) {\n  if (schema.nodes[name]) {\n    return 'node';\n  }\n  if (schema.marks[name]) {\n    return 'mark';\n  }\n  return null;\n}\n\n/**\r\n * Remove a property or an array of properties from an object\r\n * @param obj Object\r\n * @param key Key to remove\r\n */\nfunction deleteProps(obj, propOrProps) {\n  const props = typeof propOrProps === 'string' ? [propOrProps] : propOrProps;\n  return Object.keys(obj).reduce((newObj, prop) => {\n    if (!props.includes(prop)) {\n      newObj[prop] = obj[prop];\n    }\n    return newObj;\n  }, {});\n}\nconst resetAttributes = (typeOrName, attributes) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  let nodeType = null;\n  let markType = null;\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (!schemaType) {\n    return false;\n  }\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName, state.schema);\n  }\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName, state.schema);\n  }\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n        }\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n            }\n          });\n        }\n      });\n    });\n  }\n  return true;\n};\nconst scrollIntoView = () => ({\n  tr,\n  dispatch\n}) => {\n  if (dispatch) {\n    tr.scrollIntoView();\n  }\n  return true;\n};\nconst selectAll = () => ({\n  tr,\n  commands\n}) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size\n  });\n};\nconst selectNodeBackward = () => ({\n  state,\n  dispatch\n}) => {\n  return selectNodeBackward$1(state, dispatch);\n};\nconst selectNodeForward = () => ({\n  state,\n  dispatch\n}) => {\n  return selectNodeForward$1(state, dispatch);\n};\nconst selectParentNode = () => ({\n  state,\n  dispatch\n}) => {\n  return selectParentNode$1(state, dispatch);\n};\n\n// @ts-ignore\nconst selectTextblockEnd = () => ({\n  state,\n  dispatch\n}) => {\n  return selectTextblockEnd$1(state, dispatch);\n};\n\n// @ts-ignore\nconst selectTextblockStart = () => ({\n  state,\n  dispatch\n}) => {\n  return selectTextblockStart$1(state, dispatch);\n};\n\n/**\r\n * Create a new Prosemirror document node from content.\r\n * @param content The JSON or HTML content to create the document from\r\n * @param schema The Prosemirror schema to use for the document\r\n * @param parseOptions Options for the parser\r\n * @returns The created Prosemirror document node\r\n */\nfunction createDocument(content, schema, parseOptions = {}) {\n  return createNodeFromContent(content, schema, {\n    slice: false,\n    parseOptions\n  });\n}\nconst setContent = (content, emitUpdate = false, parseOptions = {}) => ({\n  tr,\n  editor,\n  dispatch\n}) => {\n  const {\n    doc\n  } = tr;\n  const document = createDocument(content, editor.schema, parseOptions);\n  if (dispatch) {\n    tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);\n  }\n  return true;\n};\nfunction getMarkAttributes(state, typeOrName) {\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    from,\n    to,\n    empty\n  } = state.selection;\n  const marks = [];\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks);\n    }\n    marks.push(...state.selection.$head.marks());\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks);\n    });\n  }\n  const mark = marks.find(markItem => markItem.type.name === type.name);\n  if (!mark) {\n    return {};\n  }\n  return {\n    ...mark.attrs\n  };\n}\n\n/**\r\n * Returns a new `Transform` based on all steps of the passed transactions.\r\n * @param oldDoc The Prosemirror node to start from\r\n * @param transactions The transactions to combine\r\n * @returns A new `Transform` with all steps of the passed transactions\r\n */\nfunction combineTransactionSteps(oldDoc, transactions) {\n  const transform = new Transform(oldDoc);\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step);\n    });\n  });\n  return transform;\n}\n\n/**\r\n * Gets the default block type at a given match\r\n * @param match The content match to get the default block type from\r\n * @returns The default block type or null\r\n */\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const {\n      type\n    } = match.edge(i);\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type;\n    }\n  }\n  return null;\n}\n\n/**\r\n * Find children inside a Prosemirror node that match a predicate.\r\n * @param node The Prosemirror node to search in\r\n * @param predicate The predicate to match\r\n * @returns An array of nodes with their positions\r\n */\nfunction findChildren(node, predicate) {\n  const nodesWithPos = [];\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\r\n * Same as `findChildren` but searches only within a `range`.\r\n * @param node The Prosemirror node to search in\r\n * @param range The range to search in\r\n * @param predicate The predicate to match\r\n * @returns An array of nodes with their positions\r\n */\nfunction findChildrenInRange(node, range, predicate) {\n  const nodesWithPos = [];\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\r\n * Finds the closest parent node to a resolved position that matches a predicate.\r\n * @param $pos The resolved position to search from\r\n * @param predicate The predicate to match\r\n * @returns The closest parent node to the resolved position that matches the predicate\r\n * @example ```js\r\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\r\n * ```\r\n */\nfunction findParentNodeClosestToPos($pos, predicate) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i);\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node\n      };\n    }\n  }\n}\n\n/**\r\n * Finds the closest parent node to the current selection that matches a predicate.\r\n * @param predicate The predicate to match\r\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\r\n * @example ```js\r\n * findParentNode(node => node.type.name === 'paragraph')\r\n * ```\r\n */\nfunction findParentNode(predicate) {\n  return selection => findParentNodeClosestToPos(selection.$from, predicate);\n}\nfunction getHTMLFromFragment(fragment, schema) {\n  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n  const temporaryDocument = document.implementation.createHTMLDocument();\n  const container = temporaryDocument.createElement('div');\n  container.appendChild(documentFragment);\n  return container.innerHTML;\n}\nfunction getSchema(extensions, editor) {\n  const resolvedExtensions = ExtensionManager.resolve(extensions);\n  return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\n\n/**\r\n * Generate HTML from a JSONContent\r\n * @param doc The JSONContent to generate HTML from\r\n * @param extensions The extensions to use for the schema\r\n * @returns The generated HTML\r\n */\nfunction generateHTML(doc, extensions) {\n  const schema = getSchema(extensions);\n  const contentNode = Node$1.fromJSON(schema, doc);\n  return getHTMLFromFragment(contentNode.content, schema);\n}\n\n/**\r\n * Generate JSONContent from HTML\r\n * @param html The HTML to generate JSONContent from\r\n * @param extensions The extensions to use for the schema\r\n * @returns The generated JSONContent\r\n */\nfunction generateJSON(html, extensions) {\n  const schema = getSchema(extensions);\n  const dom = elementFromString(html);\n  return DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\n\n/**\r\n * Gets the text of a Prosemirror node\r\n * @param node The Prosemirror node\r\n * @param options Options for the text serializer & block separator\r\n * @returns The text of the node\r\n * @example ```js\r\n * const text = getText(node, { blockSeparator: '\\n' })\r\n * ```\r\n */\nfunction getText(node, options) {\n  const range = {\n    from: 0,\n    to: node.content.size\n  };\n  return getTextBetween(node, range, options);\n}\n\n/**\r\n * Generate raw text from a JSONContent\r\n * @param doc The JSONContent to generate text from\r\n * @param extensions The extensions to use for the schema\r\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\r\n * @returns The generated text\r\n */\nfunction generateText(doc, extensions, options) {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {}\n  } = options || {};\n  const schema = getSchema(extensions);\n  const contentNode = Node$1.fromJSON(schema, doc);\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...getTextSerializersFromSchema(schema),\n      ...textSerializers\n    }\n  });\n}\nfunction getNodeAttributes(state, typeOrName) {\n  const type = getNodeType(typeOrName, state.schema);\n  const {\n    from,\n    to\n  } = state.selection;\n  const nodes = [];\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node);\n  });\n  const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\n  if (!node) {\n    return {};\n  }\n  return {\n    ...node.attrs\n  };\n}\n\n/**\r\n * Get node or mark attributes by type or name on the current editor state\r\n * @param state The current editor state\r\n * @param typeOrName The node or mark type or name\r\n * @returns The attributes of the node or mark or an empty object\r\n */\nfunction getAttributes(state, typeOrName) {\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName);\n  }\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName);\n  }\n  return {};\n}\n\n/**\r\n * Removes duplicated values within an array.\r\n * Supports numbers, strings and objects.\r\n */\nfunction removeDuplicates(array, by = JSON.stringify) {\n  const seen = {};\n  return array.filter(item => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n  });\n}\n\n/**\r\n * Removes duplicated ranges and ranges that are\r\n * fully captured by other ranges.\r\n */\nfunction simplifyChangedRanges(changes) {\n  const uniqueChanges = removeDuplicates(changes);\n  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index) => {\n    const rest = uniqueChanges.filter((_, i) => i !== index);\n    return !rest.some(otherChange => {\n      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n    });\n  });\n}\n/**\r\n * Returns a list of changed ranges\r\n * based on the first and last state of all steps.\r\n */\nfunction getChangedRanges(transform) {\n  const {\n    mapping,\n    steps\n  } = transform;\n  const changes = [];\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges = [];\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const {\n        from,\n        to\n      } = steps[index];\n      if (from === undefined || to === undefined) {\n        return;\n      }\n      ranges.push({\n        from,\n        to\n      });\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({\n          from,\n          to\n        });\n      });\n    }\n    ranges.forEach(({\n      from,\n      to\n    }) => {\n      const newStart = mapping.slice(index).map(from, -1);\n      const newEnd = mapping.slice(index).map(to);\n      const oldStart = mapping.invert().map(newStart, -1);\n      const oldEnd = mapping.invert().map(newEnd);\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd\n        }\n      });\n    });\n  });\n  return simplifyChangedRanges(changes);\n}\nfunction getDebugJSON(node, startOffset = 0) {\n  const isTopNode = node.type === node.type.schema.topNodeType;\n  const increment = isTopNode ? 0 : 1;\n  const from = startOffset;\n  const to = from + node.nodeSize;\n  const marks = node.marks.map(mark => {\n    const output = {\n      type: mark.type.name\n    };\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = {\n        ...mark.attrs\n      };\n    }\n    return output;\n  });\n  const attrs = {\n    ...node.attrs\n  };\n  const output = {\n    type: node.type.name,\n    from,\n    to\n  };\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs;\n  }\n  if (marks.length) {\n    output.marks = marks;\n  }\n  if (node.content.childCount) {\n    output.content = [];\n    node.forEach((child, offset) => {\n      var _a;\n      (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n    });\n  }\n  if (node.text) {\n    output.text = node.text;\n  }\n  return output;\n}\nfunction getMarksBetween(from, to, doc) {\n  const marks = [];\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc.resolve(from).marks().forEach(mark => {\n      const $pos = doc.resolve(from - 1);\n      const range = getMarkRange($pos, mark.type);\n      if (!range) {\n        return;\n      }\n      marks.push({\n        mark,\n        ...range\n      });\n    });\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\n        return;\n      }\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark\n      })));\n    });\n  }\n  return marks;\n}\n\n/**\r\n * Finds the first node of a given type or name in the current selection.\r\n * @param state The editor state.\r\n * @param typeOrName The node type or name.\r\n * @param pos The position to start searching from.\r\n * @param maxDepth The maximum depth to search.\r\n * @returns The node and the depth as an array.\r\n */\nconst getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20) => {\n  const $pos = state.doc.resolve(pos);\n  let currentDepth = maxDepth;\n  let node = null;\n  while (currentDepth > 0 && node === null) {\n    const currentNode = $pos.node(currentDepth);\n    if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n      node = currentNode;\n    } else {\n      currentDepth -= 1;\n    }\n  }\n  return [node, currentDepth];\n};\n\n/**\r\n * Return attributes of an extension that should be splitted by keepOnSplit flag\r\n * @param extensionAttributes Array of extension attributes\r\n * @param typeName The type of the extension\r\n * @param attributes The attributes of the extension\r\n * @returns The splitted attributes\r\n */\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n  return Object.fromEntries(Object.entries(attributes).filter(([name]) => {\n    const extensionAttribute = extensionAttributes.find(item => {\n      return item.type === typeName && item.name === name;\n    });\n    if (!extensionAttribute) {\n      return false;\n    }\n    return extensionAttribute.attribute.keepOnSplit;\n  }));\n}\nfunction isMarkActive(state, typeOrName, attributes = {}) {\n  const {\n    empty,\n    ranges\n  } = state.selection;\n  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks()).filter(mark => {\n      if (!type) {\n        return true;\n      }\n      return type.name === mark.type.name;\n    }).find(mark => objectIncludes(mark.attrs, attributes, {\n      strict: false\n    }));\n  }\n  let selectionRange = 0;\n  const markRanges = [];\n  ranges.forEach(({\n    $from,\n    $to\n  }) => {\n    const from = $from.pos;\n    const to = $to.pos;\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return;\n      }\n      const relativeFrom = Math.max(from, pos);\n      const relativeTo = Math.min(to, pos + node.nodeSize);\n      const range = relativeTo - relativeFrom;\n      selectionRange += range;\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo\n      })));\n    });\n  });\n  if (selectionRange === 0) {\n    return false;\n  }\n  // calculate range of matched mark\n  const matchedRange = markRanges.filter(markRange => {\n    if (!type) {\n      return true;\n    }\n    return type.name === markRange.mark.type.name;\n  }).filter(markRange => objectIncludes(markRange.mark.attrs, attributes, {\n    strict: false\n  })).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges.filter(markRange => {\n    if (!type) {\n      return true;\n    }\n    return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n  }).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n  return range >= selectionRange;\n}\nfunction isActive(state, name, attributes = {}) {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n  }\n  const schemaType = getSchemaTypeNameByName(name, state.schema);\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes);\n  }\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes);\n  }\n  return false;\n}\nconst isAtEndOfNode = (state, nodeType) => {\n  const {\n    $from,\n    $to,\n    $anchor\n  } = state.selection;\n  if (nodeType) {\n    const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection);\n    if (!parentNode) {\n      return false;\n    }\n    const $parentPos = state.doc.resolve(parentNode.pos + 1);\n    if ($anchor.pos + 1 === $parentPos.end()) {\n      return true;\n    }\n    return false;\n  }\n  if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n    return false;\n  }\n  return true;\n};\nconst isAtStartOfNode = state => {\n  const {\n    $from,\n    $to\n  } = state.selection;\n  if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n    return false;\n  }\n  return true;\n};\nfunction isList(name, extensions) {\n  const {\n    nodeExtensions\n  } = splitExtensions(extensions);\n  const extension = nodeExtensions.find(item => item.name === name);\n  if (!extension) {\n    return false;\n  }\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage\n  };\n  const group = callOrReturn(getExtensionField(extension, 'group', context));\n  if (typeof group !== 'string') {\n    return false;\n  }\n  return group.split(' ').includes('list');\n}\nfunction isNodeEmpty(node) {\n  var _a;\n  const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();\n  const content = node.toJSON();\n  return JSON.stringify(defaultContent) === JSON.stringify(content);\n}\nfunction isNodeSelection(value) {\n  return value instanceof NodeSelection;\n}\nfunction posToDOMRect(view, from, to) {\n  const minPos = 0;\n  const maxPos = view.state.doc.content.size;\n  const resolvedFrom = minMax(from, minPos, maxPos);\n  const resolvedEnd = minMax(to, minPos, maxPos);\n  const start = view.coordsAtPos(resolvedFrom);\n  const end = view.coordsAtPos(resolvedEnd, -1);\n  const top = Math.min(start.top, end.top);\n  const bottom = Math.max(start.bottom, end.bottom);\n  const left = Math.min(start.left, end.left);\n  const right = Math.max(start.right, end.right);\n  const width = right - left;\n  const height = bottom - top;\n  const x = left;\n  const y = top;\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y\n  };\n  return {\n    ...data,\n    toJSON: () => data\n  };\n}\nfunction canSetMark(state, tr, newMarkType) {\n  var _a;\n  const {\n    selection\n  } = tr;\n  let cursor = null;\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor;\n  }\n  if (cursor) {\n    const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n    // There can be no current marks that exclude the new mark\n    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(mark => mark.type.excludes(newMarkType));\n  }\n  const {\n    ranges\n  } = selection;\n  return ranges.some(({\n    $from,\n    $to\n  }) => {\n    let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;\n    state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false;\n      }\n      if (node.isInline) {\n        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n        const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n      }\n      return !someNodeSupportsMark;\n    });\n    return someNodeSupportsMark;\n  });\n}\nconst setMark = (typeOrName, attributes = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const {\n    empty,\n    ranges\n  } = selection;\n  const type = getMarkType(typeOrName, state.schema);\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type);\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes\n      }));\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos;\n        const to = range.$to.pos;\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from);\n          const trimmedTo = Math.min(pos + node.nodeSize, to);\n          const someHasMark = node.marks.find(mark => mark.type === type);\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes\n                }));\n              }\n            });\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n          }\n        });\n      });\n    }\n  }\n  return canSetMark(state, tr, type);\n};\nconst setMeta = (key, value) => ({\n  tr\n}) => {\n  tr.setMeta(key, value);\n  return true;\n};\nconst setNode = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch,\n  chain\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n    return false;\n  }\n  return chain()\n  // try to convert node to default node if needed\n  .command(({\n    commands\n  }) => {\n    const canSetBlock = setBlockType(type, attributes)(state);\n    if (canSetBlock) {\n      return true;\n    }\n    return commands.clearNodes();\n  }).command(({\n    state: updatedState\n  }) => {\n    return setBlockType(type, attributes)(updatedState, dispatch);\n  }).run();\n};\nconst setNodeSelection = position => ({\n  tr,\n  dispatch\n}) => {\n  if (dispatch) {\n    const {\n      doc\n    } = tr;\n    const from = minMax(position, 0, doc.content.size);\n    const selection = NodeSelection.create(doc, from);\n    tr.setSelection(selection);\n  }\n  return true;\n};\nconst setTextSelection = position => ({\n  tr,\n  dispatch\n}) => {\n  if (dispatch) {\n    const {\n      doc\n    } = tr;\n    const {\n      from,\n      to\n    } = typeof position === 'number' ? {\n      from: position,\n      to: position\n    } : position;\n    const minPos = TextSelection.atStart(doc).from;\n    const maxPos = TextSelection.atEnd(doc).to;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);\n    tr.setSelection(selection);\n  }\n  return true;\n};\nconst sinkListItem = typeOrName => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return sinkListItem$1(type)(state, dispatch);\n};\nfunction ensureMarks(state, splittableMarks) {\n  const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n    state.tr.ensureMarks(filteredMarks);\n  }\n}\nconst splitBlock = ({\n  keepMarks = true\n} = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor\n}) => {\n  const {\n    selection,\n    doc\n  } = tr;\n  const {\n    $from,\n    $to\n  } = selection;\n  const extensionAttributes = editor.extensionManager.attributes;\n  const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false;\n    }\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks);\n      }\n      tr.split($from.pos).scrollIntoView();\n    }\n    return true;\n  }\n  if (!$from.parent.isBlock) {\n    return false;\n  }\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size;\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection();\n    }\n    const deflt = $from.depth === 0 ? undefined : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n    let types = atEnd && deflt ? [{\n      type: deflt,\n      attrs: newAttributes\n    }] : undefined;\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{\n      type: deflt\n    }] : undefined)) {\n      can = true;\n      types = deflt ? [{\n        type: deflt,\n        attrs: newAttributes\n      }] : undefined;\n    }\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types);\n      if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n        const first = tr.mapping.map($from.before());\n        const $first = tr.doc.resolve(first);\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n        }\n      }\n    }\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks);\n    }\n    tr.scrollIntoView();\n  }\n  return true;\n};\nconst splitListItem = typeOrName => ({\n  tr,\n  state,\n  dispatch,\n  editor\n}) => {\n  var _a;\n  const type = getNodeType(typeOrName, state.schema);\n  const {\n    $from,\n    $to\n  } = state.selection;\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node = state.selection.node;\n  if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n    return false;\n  }\n  const grandParent = $from.node(-1);\n  if (grandParent.type !== type) {\n    return false;\n  }\n  const extensionAttributes = editor.extensionManager.attributes;\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n      return false;\n    }\n    if (dispatch) {\n      let wrap = Fragment.empty;\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap));\n      }\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n      const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined));\n      const start = $from.before($from.depth - (depthBefore - 1));\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));\n      let sel = -1;\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false;\n        }\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1;\n        }\n      });\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));\n      }\n      tr.scrollIntoView();\n    }\n    return true;\n  }\n  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n  const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);\n  const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n  tr.delete($from.pos, $to.pos);\n  const types = nextType ? [{\n    type,\n    attrs: newTypeAttributes\n  }, {\n    type: nextType,\n    attrs: newNextTypeAttributes\n  }] : [{\n    type,\n    attrs: newTypeAttributes\n  }];\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false;\n  }\n  if (dispatch) {\n    const {\n      selection,\n      storedMarks\n    } = state;\n    const {\n      splittableMarks\n    } = editor.extensionManager;\n    const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n    tr.split($from.pos, 2, types).scrollIntoView();\n    if (!marks || !dispatch) {\n      return true;\n    }\n    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n    tr.ensureMarks(filteredMarks);\n  }\n  return true;\n};\nconst joinListBackwards = (tr, listType) => {\n  const list = findParentNode(node => node.type === listType)(tr.selection);\n  if (!list) {\n    return true;\n  }\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n  if (before === undefined) {\n    return true;\n  }\n  const nodeBefore = tr.doc.nodeAt(before);\n  const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr.doc, list.pos);\n  if (!canJoinBackwards) {\n    return true;\n  }\n  tr.join(list.pos);\n  return true;\n};\nconst joinListForwards = (tr, listType) => {\n  const list = findParentNode(node => node.type === listType)(tr.selection);\n  if (!list) {\n    return true;\n  }\n  const after = tr.doc.resolve(list.start).after(list.depth);\n  if (after === undefined) {\n    return true;\n  }\n  const nodeAfter = tr.doc.nodeAt(after);\n  const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr.doc, after);\n  if (!canJoinForwards) {\n    return true;\n  }\n  tr.join(after);\n  return true;\n};\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({\n  editor,\n  tr,\n  state,\n  dispatch,\n  chain,\n  commands,\n  can\n}) => {\n  const {\n    extensions,\n    splittableMarks\n  } = editor.extensionManager;\n  const listType = getNodeType(listTypeOrName, state.schema);\n  const itemType = getNodeType(itemTypeOrName, state.schema);\n  const {\n    selection,\n    storedMarks\n  } = state;\n  const {\n    $from,\n    $to\n  } = selection;\n  const range = $from.blockRange($to);\n  const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n  if (!range) {\n    return false;\n  }\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType);\n    }\n    // change list type\n    if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n      return chain().command(() => {\n        tr.setNodeMarkup(parentList.pos, listType);\n        return true;\n      }).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n    }\n  }\n  if (!keepMarks || !marks || !dispatch) {\n    return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType, attributes);\n      if (canWrapInList) {\n        return true;\n      }\n      return commands.clearNodes();\n    }).wrapInList(listType, attributes).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n  }\n  return chain()\n  // try to convert node to default node if needed\n  .command(() => {\n    const canWrapInList = can().wrapInList(listType, attributes);\n    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n    tr.ensureMarks(filteredMarks);\n    if (canWrapInList) {\n      return true;\n    }\n    return commands.clearNodes();\n  }).wrapInList(listType, attributes).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n};\nconst toggleMark = (typeOrName, attributes = {}, options = {}) => ({\n  state,\n  commands\n}) => {\n  const {\n    extendEmptyMarkRange = false\n  } = options;\n  const type = getMarkType(typeOrName, state.schema);\n  const isActive = isMarkActive(state, type, attributes);\n  if (isActive) {\n    return commands.unsetMark(type, {\n      extendEmptyMarkRange\n    });\n  }\n  return commands.setMark(type, attributes);\n};\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({\n  state,\n  commands\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const toggleType = getNodeType(toggleTypeOrName, state.schema);\n  const isActive = isNodeActive(state, type, attributes);\n  if (isActive) {\n    return commands.setNode(toggleType);\n  }\n  return commands.setNode(type, attributes);\n};\nconst toggleWrap = (typeOrName, attributes = {}) => ({\n  state,\n  commands\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const isActive = isNodeActive(state, type, attributes);\n  if (isActive) {\n    return commands.lift(type);\n  }\n  return commands.wrapIn(type, attributes);\n};\nconst undoInputRule = () => ({\n  state,\n  dispatch\n}) => {\n  const plugins = state.plugins;\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i];\n    let undoable;\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr;\n        const toUndo = undoable.transform;\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n        }\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks();\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n        } else {\n          tr.delete(undoable.from, undoable.to);\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst unsetAllMarks = () => ({\n  tr,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const {\n    empty,\n    ranges\n  } = selection;\n  if (empty) {\n    return true;\n  }\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos);\n    });\n  }\n  return true;\n};\nconst unsetMark = (typeOrName, options = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  var _a;\n  const {\n    extendEmptyMarkRange = false\n  } = options;\n  const {\n    selection\n  } = tr;\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    $from,\n    empty,\n    ranges\n  } = selection;\n  if (!dispatch) {\n    return true;\n  }\n  if (empty && extendEmptyMarkRange) {\n    let {\n      from,\n      to\n    } = selection;\n    const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n    const range = getMarkRange($from, type, attrs);\n    if (range) {\n      from = range.from;\n      to = range.to;\n    }\n    tr.removeMark(from, to, type);\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type);\n    });\n  }\n  tr.removeStoredMark(type);\n  return true;\n};\nconst updateAttributes = (typeOrName, attributes = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  let nodeType = null;\n  let markType = null;\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (!schemaType) {\n    return false;\n  }\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName, state.schema);\n  }\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName, state.schema);\n  }\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos;\n      const to = range.$to.pos;\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes\n          });\n        }\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from);\n              const trimmedTo = Math.min(pos + node.nodeSize, to);\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes\n              }));\n            }\n          });\n        }\n      });\n    });\n  }\n  return true;\n};\nconst wrapIn = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return wrapIn$1(type, attributes)(state, dispatch);\n};\nconst wrapInList = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return wrapInList$1(type, attributes)(state, dispatch);\n};\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  cut: cut,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinUp: joinUp,\n  joinDown: joinDown,\n  joinBackward: joinBackward,\n  joinForward: joinForward,\n  joinItemBackward: joinItemBackward,\n  joinItemForward: joinItemForward,\n  joinTextblockBackward: joinTextblockBackward,\n  joinTextblockForward: joinTextblockForward,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\nconst Commands = Extension.create({\n  name: 'commands',\n  addCommands() {\n    return {\n      ...commands\n    };\n  }\n});\nconst Editable = Extension.create({\n  name: 'editable',\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('editable'),\n      props: {\n        editable: () => this.editor.options.editable\n      }\n    })];\n  }\n});\nconst FocusEvents = Extension.create({\n  name: 'focusEvents',\n  addProseMirrorPlugins() {\n    const {\n      editor\n    } = this;\n    return [new Plugin({\n      key: new PluginKey('focusEvents'),\n      props: {\n        handleDOMEvents: {\n          focus: (view, event) => {\n            editor.isFocused = true;\n            const transaction = editor.state.tr.setMeta('focus', {\n              event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          },\n          blur: (view, event) => {\n            editor.isFocused = false;\n            const transaction = editor.state.tr.setMeta('blur', {\n              event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          }\n        }\n      }\n    })];\n  }\n});\nconst Keymap = Extension.create({\n  name: 'keymap',\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({\n      commands\n    }) => [() => commands.undoInputRule(),\n    // maybe convert first text block node to default node\n    () => commands.command(({\n      tr\n    }) => {\n      const {\n        selection,\n        doc\n      } = tr;\n      const {\n        empty,\n        $anchor\n      } = selection;\n      const {\n        pos,\n        parent\n      } = $anchor;\n      const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor;\n      const parentIsIsolating = $parentPos.parent.type.spec.isolating;\n      const parentPos = $anchor.pos - $anchor.parentOffset;\n      const isAtStart = parentIsIsolating && $parentPos.parent.childCount === 1 ? parentPos === $anchor.pos : Selection.atStart(doc).from === pos;\n      if (!empty || !parent.type.isTextblock || parent.textContent.length || !isAtStart || isAtStart && $anchor.parent.type.name === 'paragraph' // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n      ) {\n        return false;\n      }\n      return commands.clearNodes();\n    }), () => commands.deleteSelection(), () => commands.joinBackward(), () => commands.selectNodeBackward()]);\n    const handleDelete = () => this.editor.commands.first(({\n      commands\n    }) => [() => commands.deleteSelection(), () => commands.deleteCurrentNode(), () => commands.joinForward(), () => commands.selectNodeForward()]);\n    const handleEnter = () => this.editor.commands.first(({\n      commands\n    }) => [() => commands.newlineInCode(), () => commands.createParagraphNear(), () => commands.liftEmptyBlock(), () => commands.splitBlock()]);\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll()\n    };\n    const pcKeymap = {\n      ...baseKeymap\n    };\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd()\n    };\n    if (isiOS() || isMacOS()) {\n      return macKeymap;\n    }\n    return pcKeymap;\n  },\n  addProseMirrorPlugins() {\n    return [\n    // With this plugin we check if the whole document was selected and deleted.\n    // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n    // to a paragraph if necessary.\n    // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n    // with many other commands.\n    new Plugin({\n      key: new PluginKey('clearDocument'),\n      appendTransaction: (transactions, oldState, newState) => {\n        const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);\n        if (!docChanges) {\n          return;\n        }\n        const {\n          empty,\n          from,\n          to\n        } = oldState.selection;\n        const allFrom = Selection.atStart(oldState.doc).from;\n        const allEnd = Selection.atEnd(oldState.doc).to;\n        const allWasSelected = from === allFrom && to === allEnd;\n        if (empty || !allWasSelected) {\n          return;\n        }\n        const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;\n        if (!isEmpty) {\n          return;\n        }\n        const tr = newState.tr;\n        const state = createChainableState({\n          state: newState,\n          transaction: tr\n        });\n        const {\n          commands\n        } = new CommandManager({\n          editor: this.editor,\n          state\n        });\n        commands.clearNodes();\n        if (!tr.steps.length) {\n          return;\n        }\n        return tr;\n      }\n    })];\n  }\n});\nconst Tabindex = Extension.create({\n  name: 'tabindex',\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('tabindex'),\n      props: {\n        attributes: this.editor.isEditable ? {\n          tabindex: '0'\n        } : {}\n      }\n    })];\n  }\n});\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Tabindex: Tabindex\n});\nclass NodePos {\n  constructor(pos, editor, isBlock = false, node = null) {\n    this.currentNode = null;\n    this.actualDepth = null;\n    this.isBlock = isBlock;\n    this.resolvedPos = pos;\n    this.editor = editor;\n    this.currentNode = node;\n  }\n  get name() {\n    return this.node.type.name;\n  }\n  get node() {\n    return this.currentNode || this.resolvedPos.node();\n  }\n  get element() {\n    return this.editor.view.domAtPos(this.pos).node;\n  }\n  get depth() {\n    var _a;\n    return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\n  }\n  get pos() {\n    return this.resolvedPos.pos;\n  }\n  get content() {\n    return this.node.content;\n  }\n  set content(content) {\n    let from = this.from;\n    let to = this.to;\n    if (this.isBlock) {\n      if (this.content.size === 0) {\n        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);\n        return;\n      }\n      from = this.from + 1;\n      to = this.to - 1;\n    }\n    this.editor.commands.insertContentAt({\n      from,\n      to\n    }, content);\n  }\n  get attributes() {\n    return this.node.attrs;\n  }\n  get textContent() {\n    return this.node.textContent;\n  }\n  get size() {\n    return this.node.nodeSize;\n  }\n  get from() {\n    if (this.isBlock) {\n      return this.pos;\n    }\n    return this.resolvedPos.start(this.resolvedPos.depth);\n  }\n  get range() {\n    return {\n      from: this.from,\n      to: this.to\n    };\n  }\n  get to() {\n    if (this.isBlock) {\n      return this.pos + this.size;\n    }\n    return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\n  }\n  get parent() {\n    if (this.depth === 0) {\n      return null;\n    }\n    const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\n    const $pos = this.resolvedPos.doc.resolve(parentPos);\n    return new NodePos($pos, this.editor);\n  }\n  get before() {\n    let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.from - 3);\n    }\n    return new NodePos($pos, this.editor);\n  }\n  get after() {\n    let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.to + 3);\n    }\n    return new NodePos($pos, this.editor);\n  }\n  get children() {\n    const children = [];\n    this.node.content.forEach((node, offset) => {\n      const isBlock = node.isBlock && !node.isTextblock;\n      const targetPos = this.pos + offset + 1;\n      const $pos = this.resolvedPos.doc.resolve(targetPos);\n      if (!isBlock && $pos.depth <= this.depth) {\n        return;\n      }\n      const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null);\n      if (isBlock) {\n        childNodePos.actualDepth = this.depth + 1;\n      }\n      children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null));\n    });\n    return children;\n  }\n  get firstChild() {\n    return this.children[0] || null;\n  }\n  get lastChild() {\n    const children = this.children;\n    return children[children.length - 1] || null;\n  }\n  closest(selector, attributes = {}) {\n    let node = null;\n    let currentNode = this.parent;\n    while (currentNode && !node) {\n      if (currentNode.node.type.name === selector) {\n        if (Object.keys(attributes).length > 0) {\n          const nodeAttributes = currentNode.node.attrs;\n          const attrKeys = Object.keys(attributes);\n          for (let index = 0; index < attrKeys.length; index += 1) {\n            const key = attrKeys[index];\n            if (nodeAttributes[key] !== attributes[key]) {\n              break;\n            }\n          }\n        } else {\n          node = currentNode;\n        }\n      }\n      currentNode = currentNode.parent;\n    }\n    return node;\n  }\n  querySelector(selector, attributes = {}) {\n    return this.querySelectorAll(selector, attributes, true)[0] || null;\n  }\n  querySelectorAll(selector, attributes = {}, firstItemOnly = false) {\n    let nodes = [];\n    if (!this.children || this.children.length === 0) {\n      return nodes;\n    }\n    const attrKeys = Object.keys(attributes);\n    /**\r\n     * Finds all children recursively that match the selector and attributes\r\n     * If firstItemOnly is true, it will return the first item found\r\n     */\n    this.children.forEach(childPos => {\n      // If we already found a node and we only want the first item, we dont need to keep going\n      if (firstItemOnly && nodes.length > 0) {\n        return;\n      }\n      if (childPos.node.type.name === selector) {\n        const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key]);\n        if (doesAllAttributesMatch) {\n          nodes.push(childPos);\n        }\n      }\n      // If we already found a node and we only want the first item, we can stop here and skip the recursion\n      if (firstItemOnly && nodes.length > 0) {\n        return;\n      }\n      nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly));\n    });\n    return nodes;\n  }\n  setAttribute(attributes) {\n    const oldSelection = this.editor.state.selection;\n    this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from).run();\n  }\n}\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\nfunction createStyleTag(style, nonce, suffix) {\n  const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`);\n  if (tiptapStyleTag !== null) {\n    return tiptapStyleTag;\n  }\n  const styleNode = document.createElement('style');\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce);\n  }\n  styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '');\n  styleNode.innerHTML = style;\n  document.getElementsByTagName('head')[0].appendChild(styleNode);\n  return styleNode;\n}\nclass Editor extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.isFocused = false;\n    this.extensionStorage = {};\n    this.options = {\n      element: document.createElement('div'),\n      content: '',\n      injectCSS: true,\n      injectNonce: undefined,\n      extensions: [],\n      autofocus: false,\n      editable: true,\n      editorProps: {},\n      parseOptions: {},\n      coreExtensionOptions: {},\n      enableInputRules: true,\n      enablePasteRules: true,\n      enableCoreExtensions: true,\n      onBeforeCreate: () => null,\n      onCreate: () => null,\n      onUpdate: () => null,\n      onSelectionUpdate: () => null,\n      onTransaction: () => null,\n      onFocus: () => null,\n      onBlur: () => null,\n      onDestroy: () => null\n    };\n    this.isCapturingTransaction = false;\n    this.capturedTransaction = null;\n    this.setOptions(options);\n    this.createExtensionManager();\n    this.createCommandManager();\n    this.createSchema();\n    this.on('beforeCreate', this.options.onBeforeCreate);\n    this.emit('beforeCreate', {\n      editor: this\n    });\n    this.createView();\n    this.injectCSS();\n    this.on('create', this.options.onCreate);\n    this.on('update', this.options.onUpdate);\n    this.on('selectionUpdate', this.options.onSelectionUpdate);\n    this.on('transaction', this.options.onTransaction);\n    this.on('focus', this.options.onFocus);\n    this.on('blur', this.options.onBlur);\n    this.on('destroy', this.options.onDestroy);\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.commands.focus(this.options.autofocus);\n      this.emit('create', {\n        editor: this\n      });\n    }, 0);\n  }\n  /**\r\n   * Returns the editor storage.\r\n   */\n  get storage() {\n    return this.extensionStorage;\n  }\n  /**\r\n   * An object of all registered commands.\r\n   */\n  get commands() {\n    return this.commandManager.commands;\n  }\n  /**\r\n   * Create a command chain to call multiple commands at once.\r\n   */\n  chain() {\n    return this.commandManager.chain();\n  }\n  /**\r\n   * Check if a command or a command chain can be executed. Without executing it.\r\n   */\n  can() {\n    return this.commandManager.can();\n  }\n  /**\r\n   * Inject CSS styles.\r\n   */\n  injectCSS() {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce);\n    }\n  }\n  /**\r\n   * Update editor options.\r\n   *\r\n   * @param options A list of options\r\n   */\n  setOptions(options = {}) {\n    this.options = {\n      ...this.options,\n      ...options\n    };\n    if (!this.view || !this.state || this.isDestroyed) {\n      return;\n    }\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps);\n    }\n    this.view.updateState(this.state);\n  }\n  /**\r\n   * Update editable state of the editor.\r\n   */\n  setEditable(editable, emitUpdate = true) {\n    this.setOptions({\n      editable\n    });\n    if (emitUpdate) {\n      this.emit('update', {\n        editor: this,\n        transaction: this.state.tr\n      });\n    }\n  }\n  /**\r\n   * Returns whether the editor is editable.\r\n   */\n  get isEditable() {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable && this.view && this.view.editable;\n  }\n  /**\r\n   * Returns the editor state.\r\n   */\n  get state() {\n    return this.view.state;\n  }\n  /**\r\n   * Register a ProseMirror plugin.\r\n   *\r\n   * @param plugin A ProseMirror plugin\r\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\r\n   */\n  registerPlugin(plugin, handlePlugins) {\n    const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, [...this.state.plugins]) : [...this.state.plugins, plugin];\n    const state = this.state.reconfigure({\n      plugins\n    });\n    this.view.updateState(state);\n  }\n  /**\r\n   * Unregister a ProseMirror plugin.\r\n   *\r\n   * @param nameOrPluginKey The plugins name\r\n   */\n  unregisterPlugin(nameOrPluginKey) {\n    if (this.isDestroyed) {\n      return;\n    }\n    // @ts-ignore\n    const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name))\n    });\n    this.view.updateState(state);\n  }\n  /**\r\n   * Creates an extension manager.\r\n   */\n  createExtensionManager() {\n    var _a, _b;\n    const coreExtensions = this.options.enableCoreExtensions ? [Editable, ClipboardTextSerializer.configure({\n      blockSeparator: (_b = (_a = this.options.coreExtensionOptions) === null || _a === void 0 ? void 0 : _a.clipboardTextSerializer) === null || _b === void 0 ? void 0 : _b.blockSeparator\n    }), Commands, FocusEvents, Keymap, Tabindex] : [];\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n    });\n    this.extensionManager = new ExtensionManager(allExtensions, this);\n  }\n  /**\r\n   * Creates an command manager.\r\n   */\n  createCommandManager() {\n    this.commandManager = new CommandManager({\n      editor: this\n    });\n  }\n  /**\r\n   * Creates a ProseMirror schema.\r\n   */\n  createSchema() {\n    this.schema = this.extensionManager.schema;\n  }\n  /**\r\n   * Creates a ProseMirror view.\r\n   */\n  createView() {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);\n    const selection = resolveFocusPosition(doc, this.options.autofocus);\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined\n      })\n    });\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins\n    });\n    this.view.updateState(newState);\n    this.createNodeViews();\n    this.prependClass();\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom;\n    dom.editor = this;\n  }\n  /**\r\n   * Creates all node views.\r\n   */\n  createNodeViews() {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews\n    });\n  }\n  /**\r\n   * Prepend class name to element.\r\n   */\n  prependClass() {\n    this.view.dom.className = `tiptap ${this.view.dom.className}`;\n  }\n  captureTransaction(fn) {\n    this.isCapturingTransaction = true;\n    fn();\n    this.isCapturingTransaction = false;\n    const tr = this.capturedTransaction;\n    this.capturedTransaction = null;\n    return tr;\n  }\n  /**\r\n   * The callback over which to send transactions (state updates) produced by the view.\r\n   *\r\n   * @param transaction An editor state transaction\r\n   */\n  dispatchTransaction(transaction) {\n    // if the editor / the view of the editor was destroyed\n    // the transaction should not be dispatched as there is no view anymore.\n    if (this.view.isDestroyed) {\n      return;\n    }\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction;\n        return;\n      }\n      transaction.steps.forEach(step => {\n        var _a;\n        return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n      });\n      return;\n    }\n    const state = this.state.apply(transaction);\n    const selectionHasChanged = !this.state.selection.eq(state.selection);\n    this.view.updateState(state);\n    this.emit('transaction', {\n      editor: this,\n      transaction\n    });\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction\n      });\n    }\n    const focus = transaction.getMeta('focus');\n    const blur = transaction.getMeta('blur');\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction\n      });\n    }\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction\n      });\n    }\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return;\n    }\n    this.emit('update', {\n      editor: this,\n      transaction\n    });\n  }\n  /**\r\n   * Get attributes of the currently selected node or mark.\r\n   */\n  getAttributes(nameOrType) {\n    return getAttributes(this.state, nameOrType);\n  }\n  isActive(nameOrAttributes, attributesOrUndefined) {\n    const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n    const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n    return isActive(this.state, name, attributes);\n  }\n  /**\r\n   * Get the document as JSON.\r\n   */\n  getJSON() {\n    return this.state.doc.toJSON();\n  }\n  /**\r\n   * Get the document as HTML.\r\n   */\n  getHTML() {\n    return getHTMLFromFragment(this.state.doc.content, this.schema);\n  }\n  /**\r\n   * Get the document as text.\r\n   */\n  getText(options) {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {}\n    } = options || {};\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...getTextSerializersFromSchema(this.schema),\n        ...textSerializers\n      }\n    });\n  }\n  /**\r\n   * Check if there is no content.\r\n   */\n  get isEmpty() {\n    return isNodeEmpty(this.state.doc);\n  }\n  /**\r\n   * Get the number of characters for the current document.\r\n   *\r\n   * @deprecated\r\n   */\n  getCharacterCount() {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n    return this.state.doc.content.size - 2;\n  }\n  /**\r\n   * Destroy the editor.\r\n   */\n  destroy() {\n    this.emit('destroy');\n    if (this.view) {\n      this.view.destroy();\n    }\n    this.removeAllListeners();\n  }\n  /**\r\n   * Check if the editor is already destroyed.\r\n   */\n  get isDestroyed() {\n    var _a;\n    // @ts-ignore\n    return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n  }\n  $node(selector, attributes) {\n    var _a;\n    return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\n  }\n  $nodes(selector, attributes) {\n    var _a;\n    return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\n  }\n  $pos(pos) {\n    const $pos = this.state.doc.resolve(pos);\n    return new NodePos($pos, this);\n  }\n  get $doc() {\n    return this.$pos(0);\n  }\n}\n\n/**\r\n * Build an input rule that adds a mark when the\r\n * matched text is typed into it.\r\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\r\n */\nfunction markInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      const {\n        tr\n      } = state;\n      const captureGroup = match[match.length - 1];\n      const fullMatch = match[0];\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/);\n        const textStart = range.from + fullMatch.indexOf(captureGroup);\n        const textEnd = textStart + captureGroup.length;\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(item => {\n          // @ts-ignore\n          const excluded = item.mark.type.excluded;\n          return excluded.find(type => type === config.type && type !== item.mark.type);\n        }).filter(item => item.to > textStart);\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n        const markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n/**\r\n * Build an input rule that adds a node when the\r\n * matched text is typed into it.\r\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\r\n */\nfunction nodeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      const {\n        tr\n      } = state;\n      const start = range.from;\n      let end = range.to;\n      const newNode = config.type.create(attributes);\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        let matchStart = start + offset;\n        if (matchStart > end) {\n          matchStart = end;\n        } else {\n          end = matchStart + match[1].length;\n        }\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1];\n        tr.insertText(lastChar, start + match[0].length - 1);\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, newNode);\n      } else if (match[0]) {\n        tr.insert(start - 1, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\n      }\n      tr.scrollIntoView();\n    }\n  });\n}\n\n/**\r\n * Build an input rule that changes the type of a textblock when the\r\n * matched text is typed into it. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\r\n */\nfunction textblockTypeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      const $start = state.doc.resolve(range.from);\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null;\n      }\n      state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n    }\n  });\n}\n\n/**\r\n * Build an input rule that replaces text when the\r\n * matched text is typed into it.\r\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\r\n */\nfunction textInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      let insert = config.replace;\n      let start = range.from;\n      const end = range.to;\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        const cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\n\n/**\r\n * Build an input rule for automatically wrapping a textblock when a\r\n * given string is typed. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n *\r\n * `type` is the type of node to wrap in.\r\n *\r\n * By default, if there’s a node with the same type above the newly\r\n * wrapped node, the rule will try to join those\r\n * two nodes. You can pass a join predicate, which takes a regular\r\n * expression match and the node before the wrapped node, and can\r\n * return a boolean to indicate whether a join should happen.\r\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\r\n */\nfunction wrappingInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match,\n      chain\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      const tr = state.tr.delete(range.from, range.to);\n      const $start = tr.doc.resolve(range.from);\n      const blockRange = $start.blockRange();\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);\n      if (!wrapping) {\n        return null;\n      }\n      tr.wrap(blockRange, wrapping);\n      if (config.keepMarks && config.editor) {\n        const {\n          selection,\n          storedMarks\n        } = state;\n        const {\n          splittableMarks\n        } = config.editor.extensionManager;\n        const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n        if (marks) {\n          const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n          tr.ensureMarks(filteredMarks);\n        }\n      }\n      if (config.keepAttributes) {\n        /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n        const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';\n        chain().updateAttributes(nodeType, attributes).run();\n      }\n      const before = tr.doc.resolve(range.from - 1).nodeBefore;\n      if (before && before.type === config.type && canJoin(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n        tr.join(range.from - 1);\n      }\n    }\n  });\n}\n\n/**\r\n * The Mark class is used to create custom mark extensions.\r\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\r\n */\nclass Mark {\n  constructor(config = {}) {\n    this.type = 'mark';\n    this.name = 'mark';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = {\n      ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  static create(config = {}) {\n    return new Mark(config);\n  }\n  configure(options = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend();\n    extension.options = mergeDeep(this.options, options);\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n  extend(extendedConfig = {}) {\n    const extension = new Mark({\n      ...this.config,\n      ...extendedConfig\n    });\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n  static handleExit({\n    editor,\n    mark\n  }) {\n    const {\n      tr\n    } = editor.state;\n    const currentPos = editor.state.selection.$from;\n    const isAtEnd = currentPos.pos === currentPos.end();\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks();\n      const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n      if (!isInMark) {\n        return false;\n      }\n      const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n      if (removeMark) {\n        tr.removeStoredMark(removeMark);\n      }\n      tr.insertText(' ', currentPos.pos);\n      editor.view.dispatch(tr);\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\r\n * The Node class is used to create custom node extensions.\r\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\r\n */\nclass Node {\n  constructor(config = {}) {\n    this.type = 'node';\n    this.name = 'node';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = {\n      ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  static create(config = {}) {\n    return new Node(config);\n  }\n  configure(options = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend();\n    extension.options = mergeDeep(this.options, options);\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n  extend(extendedConfig = {}) {\n    const extension = new Node({\n      ...this.config,\n      ...extendedConfig\n    });\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n    if (extendedConfig.defaultOptions) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n}\nfunction isAndroid() {\n  return navigator.platform === 'Android' || /android/i.test(navigator.userAgent);\n}\n\n/**\r\n * Node views are used to customize the rendered DOM structure of a node.\r\n * @see https://tiptap.dev/guide/node-views\r\n */\nclass NodeView {\n  constructor(component, props, options) {\n    this.isDragging = false;\n    this.component = component;\n    this.editor = props.editor;\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options\n    };\n    this.extension = props.extension;\n    this.node = props.node;\n    this.decorations = props.decorations;\n    this.getPos = props.getPos;\n    this.mount();\n  }\n  mount() {\n    // eslint-disable-next-line\n    return;\n  }\n  get dom() {\n    return this.editor.view.dom;\n  }\n  get contentDOM() {\n    return null;\n  }\n  onDragStart(event) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const {\n      view\n    } = this.editor;\n    const target = event.target;\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]') : target.closest('[data-drag-handle]');\n    if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect();\n      const handleBox = dragHandle.getBoundingClientRect();\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n      const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n      x = handleBox.x - domBox.x + offsetX;\n      y = handleBox.y - domBox.y + offsetY;\n    }\n    (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos());\n    const transaction = view.state.tr.setSelection(selection);\n    view.dispatch(transaction);\n  }\n  stopEvent(event) {\n    var _a;\n    if (!this.dom) {\n      return false;\n    }\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({\n        event\n      });\n    }\n    const target = event.target;\n    const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false;\n    }\n    const isDragEvent = event.type.startsWith('drag');\n    const isDropEvent = event.type === 'drop';\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent && !isDragEvent) {\n      return true;\n    }\n    const {\n      isEditable\n    } = this.editor;\n    const {\n      isDragging\n    } = this;\n    const isDraggable = !!this.node.type.spec.draggable;\n    const isSelectable = NodeSelection.isSelectable(this.node);\n    const isCopyEvent = event.type === 'copy';\n    const isPasteEvent = event.type === 'paste';\n    const isCutEvent = event.type === 'cut';\n    const isClickEvent = event.type === 'mousedown';\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault();\n    }\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault();\n      return false;\n    }\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]');\n      const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n      if (isValidDragHandle) {\n        this.isDragging = true;\n        document.addEventListener('dragend', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n        document.addEventListener('drop', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n      }\n    }\n    // these events are handled by prosemirror\n    if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n      return false;\n    }\n    return true;\n  }\n  ignoreMutation(mutation) {\n    if (!this.dom || !this.contentDOM) {\n      return true;\n    }\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({\n        mutation\n      });\n    }\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true;\n    }\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false;\n    }\n    // try to prevent a bug on iOS and Android that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    // see: https://github.com/ueberdosis/tiptap/issues/2534\n    if (this.dom.contains(mutation.target) && mutation.type === 'childList' && (isiOS() || isAndroid()) && this.editor.isFocused) {\n      const changedNodes = [...Array.from(mutation.addedNodes), ...Array.from(mutation.removedNodes)];\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false;\n      }\n    }\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true;\n    }\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false;\n    }\n    return true;\n  }\n  updateAttributes(attributes) {\n    this.editor.commands.command(({\n      tr\n    }) => {\n      const pos = this.getPos();\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes\n      });\n      return true;\n    });\n  }\n  deleteNode() {\n    const from = this.getPos();\n    const to = from + this.node.nodeSize;\n    this.editor.commands.deleteRange({\n      from,\n      to\n    });\n  }\n}\n\n/**\r\n * Build an paste rule that adds a mark when the\r\n * matched text is pasted into it.\r\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\r\n */\nfunction markPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match,\n      pasteEvent\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      const {\n        tr\n      } = state;\n      const captureGroup = match[match.length - 1];\n      const fullMatch = match[0];\n      let markEnd = range.to;\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/);\n        const textStart = range.from + fullMatch.indexOf(captureGroup);\n        const textEnd = textStart + captureGroup.length;\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(item => {\n          // @ts-ignore\n          const excluded = item.mark.type.excluded;\n          return excluded.find(type => type === config.type && type !== item.mark.type);\n        }).filter(item => item.to > textStart);\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\r\n * Build an paste rule that adds a node when the\r\n * matched text is pasted into it.\r\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\r\n */\nfunction nodePasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler({\n      match,\n      chain,\n      range,\n      pasteEvent\n    }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      if (match.input) {\n        chain().deleteRange(range).insertContentAt(range.from, {\n          type: config.type.name,\n          attrs: attributes\n        });\n      }\n    }\n  });\n}\n\n/**\r\n * Build an paste rule that replaces text when the\r\n * matched text is pasted into it.\r\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\r\n */\nfunction textPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      let insert = config.replace;\n      let start = range.from;\n      const end = range.to;\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        const cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\nclass Tracker {\n  constructor(transaction) {\n    this.transaction = transaction;\n    this.currentStep = this.transaction.steps.length;\n  }\n  map(position) {\n    let deleted = false;\n    const mappedPosition = this.transaction.steps.slice(this.currentStep).reduce((newPosition, step) => {\n      const mapResult = step.getMap().mapResult(newPosition);\n      if (mapResult.deleted) {\n        deleted = true;\n      }\n      return mapResult.pos;\n    }, position);\n    return {\n      position: mappedPosition,\n      deleted\n    };\n  }\n}\nexport { CommandManager, Editor, Extension, InputRule, Mark, Node, NodePos, NodeView, PasteRule, Tracker, callOrReturn, combineTransactionSteps, createChainableState, createDocument, createNodeFromContent, createStyleTag, defaultBlockAt, deleteProps, elementFromString, escapeForRegEx, index as extensions, findChildren, findChildrenInRange, findDuplicates, findParentNode, findParentNodeClosestToPos, fromString, generateHTML, generateJSON, generateText, getAttributes, getAttributesFromExtensions, getChangedRanges, getDebugJSON, getExtensionField, getHTMLFromFragment, getMarkAttributes, getMarkRange, getMarkType, getMarksBetween, getNodeAtPosition, getNodeAttributes, getNodeType, getRenderedAttributes, getSchema, getSchemaByResolvedExtensions, getSchemaTypeByName, getSchemaTypeNameByName, getSplittedAttributes, getText, getTextBetween, getTextContentFromNodes, getTextSerializersFromSchema, injectExtensionAttributesToParseRule, inputRulesPlugin, isActive, isAtEndOfNode, isAtStartOfNode, isEmptyObject, isExtensionRulesEnabled, isFunction, isList, isMacOS, isMarkActive, isNodeActive, isNodeEmpty, isNodeSelection, isNumber, isPlainObject, isRegExp, isString, isTextSelection, isiOS, markInputRule, markPasteRule, mergeAttributes, mergeDeep, minMax, nodeInputRule, nodePasteRule, objectIncludes, pasteRulesPlugin, posToDOMRect, removeDuplicates, resolveFocusPosition, selectionToInsertionEnd, splitExtensions, textInputRule, textPasteRule, textblockTypeInputRule, wrappingInputRule };","map":{"version":3,"names":["createChainableState","config","state","transaction","selection","doc","storedMarks","apply","bind","applyTransaction","plugins","schema","reconfigure","toJSON","tr","CommandManager","constructor","props","editor","rawCommands","extensionManager","commands","customState","hasCustomState","view","buildProps","Object","fromEntries","entries","map","name","command","method","args","callback","getMeta","dispatch","chain","createChain","can","createCan","startTr","shouldDispatch","callbacks","hasStartTransaction","run","every","chainedCommand","push","formattedCommands","undefined","EventEmitter","on","event","fn","emit","forEach","off","filter","removeAllListeners","getExtensionField","extension","field","context","parent","value","splitExtensions","extensions","baseExtensions","type","nodeExtensions","markExtensions","getAttributesFromExtensions","extensionAttributes","nodeAndMarkExtensions","defaultAttribute","default","rendered","renderHTML","parseHTML","keepOnSplit","isRequired","options","storage","addGlobalAttributes","globalAttributes","globalAttribute","types","attributes","attribute","addAttributes","mergedAttr","getNodeType","nameOrType","nodes","Error","mergeAttributes","objects","item","reduce","items","mergedAttributes","key","exists","valueClasses","split","existingClasses","insertClasses","valueClass","includes","join","getRenderedAttributes","nodeOrMark","attrs","isFunction","callOrReturn","isEmptyObject","keys","length","fromString","match","Number","injectExtensionAttributesToParseRule","parseRule","style","getAttrs","node","oldAttributes","newAttributes","getAttribute","cleanUpSchemaItem","data","getSchemaByResolvedExtensions","allAttributes","topNode","_a","find","extraNodeFields","fields","e","extendNodeSchema","content","marks","group","inline","atom","selectable","draggable","code","defining","isolating","extensionAttribute","parseDOM","toDOM","HTMLAttributes","renderText","toText","extraMarkFields","extendMarkSchema","inclusive","excludes","spanning","mark","Schema","getSchemaTypeByName","isExtensionRulesEnabled","enabled","Array","isArray","some","enabledExtension","getTextContentFromNodes","$from","maxMatch","textBefore","sliceEndPos","parentOffset","nodesBetween","Math","max","pos","index","chunk","_b","spec","call","textContent","slice","isRegExp","prototype","toString","InputRule","handler","inputRuleMatcherHandler","text","exec","inputRuleMatch","result","input","replaceWith","console","warn","run$1","from","to","rules","plugin","composing","resolve","nodeBefore","nodeAfter","matched","rule","range","steps","setMeta","transform","inputRulesPlugin","Plugin","init","prev","stored","simulatedInputMeta","isSimulatedInput","setTimeout","selectionSet","docChanged","handleTextInput","handleDOMEvents","compositionend","$cursor","handleKeyDown","isInputRules","isNumber","PasteRule","pasteRuleMatcherHandler","matchAll","matches","pasteRuleMatch","pasteEvent","dropEvent","handlers","isTextblock","resolvedFrom","resolvedTo","min","size","textToMatch","textBetween","start","end","mapping","success","createClipboardPasteEvent","ClipboardEvent","clipboardData","DataTransfer","setData","pasteRulesPlugin","dragSourceElement","isPastedFromProseMirror","isDroppedFromProseMirror","DragEvent","processEvent","pasteEvt","chainableState","b","handleDragstart","dom","parentElement","contains","target","window","addEventListener","destroy","removeEventListener","drop","paste","_view","html","getData","appendTransaction","transactions","oldState","isPaste","isDrop","simulatedPasteMeta","isSimulatedPaste","findDiffStart","findDiffEnd","findDuplicates","filtered","el","indexOf","Set","ExtensionManager","splittableMarks","setupExtensions","resolvedExtensions","sort","flatten","duplicatedNames","addExtensions","flat","defaultPriority","a","priorityA","priorityB","addCommands","reverse","inputRules","pasteRules","allPlugins","addKeyboardShortcuts","defaultBindings","exitable","ArrowRight","Mark","handleExit","bindings","shortcut","keyMapPlugin","keymap","addInputRules","enableInputRules","addPasteRules","enablePasteRules","addProseMirrorPlugins","proseMirrorPlugins","nodeViews","addNodeView","nodeview","getPos","decorations","extensionStorage","onBeforeCreate","onCreate","onUpdate","onSelectionUpdate","onTransaction","onFocus","onBlur","onDestroy","getType","isPlainObject","getPrototypeOf","mergeDeep","source","output","assign","Extension","child","defaultOptions","addOptions","create","configure","extend","extendedConfig","getTextBetween","startNode","blockSeparator","textSerializers","isBlock","textSerializer","isText","getTextSerializersFromSchema","ClipboardTextSerializer","PluginKey","clipboardTextSerializer","ranges","$to","blur","requestAnimationFrame","isDestroyed","getSelection","removeAllRanges","clearContent","emitUpdate","setContent","clearNodes","$mappedFrom","$mappedTo","nodeSize","nodeRange","blockRange","targetLiftDepth","liftTarget","defaultType","contentMatchAt","setNodeMarkup","lift","createParagraphNear","createParagraphNear$1","cut","originRange","targetPos","contentSlice","deleteRange","newPos","insert","setSelection","TextSelection","deleteCurrentNode","currentNode","$anchor","$pos","depth","before","after","delete","scrollIntoView","deleteNode","typeOrName","deleteSelection","deleteSelection$1","enter","keyboardShortcut","exitCode","exitCode$1","objectIncludes","object1","object2","strict","test","findMarkInSet","isMarkInSet","getMarkRange","childAfter","offset","childBefore","startIndex","startPos","endIndex","endPos","isInSet","childCount","getMarkType","extendMarkRange","newSelection","first","i","isTextSelection","minMax","resolveFocusPosition","position","selectionAtStart","Selection","atStart","selectionAtEnd","atEnd","minPos","maxPos","isiOS","navigator","platform","userAgent","document","focus","delayedFocus","hasFocus","isSameSelection","eq","setStoredMarks","insertContent","insertContentAt","removeWhitespaces","children","childNodes","nodeType","nodeValue","removeChild","elementFromString","wrappedValue","DOMParser","parseFromString","body","createNodeFromContent","parseOptions","isJSONContent","isTextContent","isArrayContent","Fragment","fromArray","nodeFromJSON","error","parser","fromSchema","parseSlice","parse","selectionToInsertionEnd","startLen","bias","last","step","ReplaceStep","ReplaceAroundStep","maps","_from","_to","_newFrom","newTo","near","isFragment","nodeOrFragment","startsWith","updateSelection","applyInputRules","applyPasteRules","preserveWhitespace","isOnlyTextContent","isOnlyBlockContent","check","isEmptyTextBlock","newContent","v","insertText","joinUp","joinUp$1","joinDown","joinDown$1","joinBackward","joinBackward$1","joinForward","joinForward$1","joinItemBackward","point","joinPoint","joinItemForward","joinTextblockBackward","joinTextblockBackward$1","joinTextblockForward","joinTextblockForward$1","isMacOS","normalizeKeyName","parts","alt","ctrl","shift","meta","mod","KeyboardEvent","altKey","ctrlKey","metaKey","shiftKey","bubbles","cancelable","capturedTransaction","captureTransaction","someProp","f","newStep","maybeStep","isNodeActive","empty","nodeRanges","relativeFrom","relativeTo","selectionRange","matchedNodeRanges","sum","isActive","lift$1","liftEmptyBlock","liftEmptyBlock$1","liftListItem","liftListItem$1","newlineInCode","newlineInCode$1","getSchemaTypeNameByName","deleteProps","obj","propOrProps","newObj","prop","resetAttributes","markType","schemaType","addMark","selectAll","setTextSelection","selectNodeBackward","selectNodeBackward$1","selectNodeForward","selectNodeForward$1","selectParentNode","selectParentNode$1","selectTextblockEnd","selectTextblockEnd$1","selectTextblockStart","selectTextblockStart$1","createDocument","getMarkAttributes","$head","markItem","combineTransactionSteps","oldDoc","Transform","defaultBlockAt","edgeCount","edge","hasRequiredAttrs","findChildren","predicate","nodesWithPos","descendants","findChildrenInRange","findParentNodeClosestToPos","findParentNode","getHTMLFromFragment","fragment","documentFragment","DOMSerializer","serializeFragment","temporaryDocument","implementation","createHTMLDocument","container","createElement","appendChild","innerHTML","getSchema","generateHTML","contentNode","Node$1","fromJSON","generateJSON","getText","generateText","getNodeAttributes","nodeItem","getAttributes","removeDuplicates","array","by","JSON","stringify","seen","hasOwnProperty","simplifyChangedRanges","changes","uniqueChanges","change","rest","_","otherChange","oldRange","newRange","getChangedRanges","stepMap","newStart","newEnd","oldStart","invert","oldEnd","getDebugJSON","startOffset","isTopNode","topNodeType","increment","getMarksBetween","getNodeAtPosition","maxDepth","currentDepth","getSplittedAttributes","typeName","isMarkActive","markRanges","matchedRange","markRange","excludedRange","isAtEndOfNode","parentNode","$parentPos","isAtStartOfNode","isList","isNodeEmpty","defaultContent","createAndFill","isNodeSelection","NodeSelection","posToDOMRect","resolvedEnd","coordsAtPos","top","bottom","left","right","width","height","x","y","canSetMark","newMarkType","cursor","currentMarks","someNodeSupportsMark","inlineContent","allowsMarkType","_pos","isInline","parentAllowsMarkType","currentMarksAllowMarkType","otherMark","setMark","addStoredMark","trimmedFrom","trimmedTo","someHasMark","setNode","canSetBlock","setBlockType","updatedState","setNodeSelection","sinkListItem","sinkListItem$1","ensureMarks","filteredMarks","splitBlock","keepMarks","canSplit","deflt","indexAfter","$first","canReplaceWith","splitListItem","sameParent","grandParent","wrap","depthBefore","d","copy","depthAfter","newNextTypeAttributes","nextType","contentMatch","append","replace","Slice","sel","n","newTypeAttributes","joinListBackwards","listType","list","nodeAt","canJoinBackwards","canJoin","joinListForwards","canJoinForwards","toggleList","listTypeOrName","itemTypeOrName","itemType","parentList","validContent","canWrapInList","wrapInList","toggleMark","extendEmptyMarkRange","unsetMark","toggleNode","toggleTypeOrName","toggleType","toggleWrap","wrapIn","undoInputRule","undoable","getState","toUndo","j","docs","unsetAllMarks","removeMark","removeStoredMark","updateAttributes","wrapIn$1","wrapInList$1","Commands","Editable","editable","FocusEvents","isFocused","Keymap","handleBackspace","parentIsIsolating","parentPos","isAtStart","handleDelete","handleEnter","baseKeymap","Enter","Mod-Enter","Backspace","Delete","Mod-a","pcKeymap","macKeymap","Ctrl-a","Ctrl-e","newState","docChanges","allFrom","allEnd","allWasSelected","isEmpty","Tabindex","isEditable","tabindex","NodePos","actualDepth","resolvedPos","element","domAtPos","childNodePos","firstChild","lastChild","closest","selector","nodeAttributes","attrKeys","querySelector","querySelectorAll","firstItemOnly","childPos","doesAllAttributesMatch","concat","setAttribute","oldSelection","createStyleTag","nonce","suffix","tiptapStyleTag","styleNode","getElementsByTagName","Editor","injectCSS","injectNonce","autofocus","editorProps","coreExtensionOptions","enableCoreExtensions","isCapturingTransaction","setOptions","createExtensionManager","createCommandManager","createSchema","createView","commandManager","css","setProps","updateState","setEditable","registerPlugin","handlePlugins","unregisterPlugin","nameOrPluginKey","coreExtensions","allExtensions","EditorView","dispatchTransaction","EditorState","createNodeViews","prependClass","className","selectionHasChanged","nameOrAttributes","attributesOrUndefined","getJSON","getHTML","getCharacterCount","docView","$node","$doc","$nodes","markInputRule","captureGroup","fullMatch","startSpaces","search","textStart","textEnd","excludedMarks","excluded","markEnd","nodeInputRule","newNode","lastIndexOf","matchStart","lastChar","textblockTypeInputRule","$start","textInputRule","cutOff","wrappingInputRule","wrapping","findWrapping","keepAttributes","joinPredicate","currentPos","isAtEnd","isInMark","m","Node","isAndroid","NodeView","component","isDragging","stopEvent","ignoreMutation","mount","contentDOM","onDragStart","dragHandle","domBox","getBoundingClientRect","handleBox","offsetX","_c","_d","nativeEvent","offsetY","_e","_f","_g","dataTransfer","setDragImage","isInElement","isDragEvent","isDropEvent","isInput","tagName","isContentEditable","isDraggable","isSelectable","isCopyEvent","isPasteEvent","isCutEvent","isClickEvent","preventDefault","isValidDragHandle","once","mutation","isLeaf","isAtom","changedNodes","addedNodes","removedNodes","markPasteRule","escapeForRegEx","string","isString","nodePasteRule","textPasteRule","Tracker","currentStep","deleted","mappedPosition","newPosition","mapResult","getMap"],"sources":["D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\createChainableState.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\CommandManager.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\EventEmitter.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getExtensionField.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\splitExtensions.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getAttributesFromExtensions.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getNodeType.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\mergeAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getRenderedAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isFunction.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\callOrReturn.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isEmptyObject.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\fromString.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\injectExtensionAttributesToParseRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getSchemaByResolvedExtensions.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getSchemaTypeByName.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isExtensionRulesEnabled.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getTextContentFromNodes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isRegExp.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\InputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isNumber.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\PasteRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\findDuplicates.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\ExtensionManager.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isPlainObject.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\mergeDeep.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\Extension.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getTextBetween.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getTextSerializersFromSchema.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\extensions\\clipboardTextSerializer.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\blur.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\clearContent.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\clearNodes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\command.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\createParagraphNear.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\cut.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\deleteCurrentNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\deleteNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\deleteRange.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\deleteSelection.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\enter.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\exitCode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\objectIncludes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getMarkRange.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getMarkType.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\extendMarkRange.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\first.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isTextSelection.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\minMax.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\resolveFocusPosition.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isiOS.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\focus.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\forEach.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\insertContent.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\elementFromString.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\createNodeFromContent.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\selectionToInsertionEnd.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\insertContentAt.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\join.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\joinItemBackward.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\joinItemForward.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\joinTextblockBackward.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\joinTextblockForward.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isMacOS.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\keyboardShortcut.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isNodeActive.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\lift.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\liftEmptyBlock.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\liftListItem.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\newlineInCode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getSchemaTypeNameByName.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\deleteProps.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\resetAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\scrollIntoView.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\selectAll.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\selectNodeBackward.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\selectNodeForward.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\selectParentNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\selectTextblockEnd.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\selectTextblockStart.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\createDocument.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\setContent.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getMarkAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\combineTransactionSteps.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\defaultBlockAt.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\findChildren.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\findChildrenInRange.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\findParentNodeClosestToPos.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\findParentNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getHTMLFromFragment.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getSchema.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\generateHTML.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\generateJSON.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getText.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\generateText.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getNodeAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\removeDuplicates.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getChangedRanges.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getDebugJSON.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getMarksBetween.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getNodeAtPosition.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\getSplittedAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isMarkActive.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isActive.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isAtEndOfNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isAtStartOfNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isList.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isNodeEmpty.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\isNodeSelection.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\helpers\\posToDOMRect.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\setMark.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\setMeta.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\setNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\setNodeSelection.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\setTextSelection.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\sinkListItem.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\splitBlock.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\splitListItem.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\toggleList.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\toggleMark.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\toggleNode.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\toggleWrap.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\undoInputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\unsetAllMarks.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\unsetMark.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\updateAttributes.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\wrapIn.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\commands\\wrapInList.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\extensions\\commands.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\extensions\\editable.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\extensions\\focusEvents.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\extensions\\keymap.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\extensions\\tabindex.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\NodePos.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\style.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\createStyleTag.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\Editor.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\inputRules\\markInputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\inputRules\\nodeInputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\inputRules\\textblockTypeInputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\inputRules\\textInputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\inputRules\\wrappingInputRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\Mark.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\Node.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isAndroid.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\NodeView.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\pasteRules\\markPasteRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\escapeForRegEx.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\utilities\\isString.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\pasteRules\\nodePasteRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\pasteRules\\textPasteRule.ts","D:\\AmanWorkshop\\react_Projects\\15_Days_Challenge_In_React\\15Day_ChallengeinReact\\day13_blog_editor\\secondProject\\my-tiptap-project\\node_modules\\@tiptap\\core\\src\\Tracker.ts"],"sourcesContent":["import { EditorState, Transaction } from '@tiptap/pm/state'\n\n/**\n * Takes a Transaction & Editor State and turns it into a chainable state object\n * @param config The transaction and state to create the chainable state from\n * @returns A chainable Editor state object\n */\nexport function createChainableState(config: {\n  transaction: Transaction\n  state: EditorState\n}): EditorState {\n  const { state, transaction } = config\n  let { selection } = transaction\n  let { doc } = transaction\n  let { storedMarks } = transaction\n\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks\n    },\n    get selection() {\n      return selection\n    },\n    get doc() {\n      return doc\n    },\n    get tr() {\n      selection = transaction.selection\n      doc = transaction.doc\n      storedMarks = transaction.storedMarks\n\n      return transaction\n    },\n  }\n}\n","import { EditorState, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { createChainableState } from './helpers/createChainableState.js'\nimport {\n  AnyCommands, CanCommands, ChainedCommands, CommandProps, SingleCommands,\n} from './types.js'\n\nexport class CommandManager {\n  editor: Editor\n\n  rawCommands: AnyCommands\n\n  customState?: EditorState\n\n  constructor(props: { editor: Editor; state?: EditorState }) {\n    this.editor = props.editor\n    this.rawCommands = this.editor.extensionManager.commands\n    this.customState = props.state\n  }\n\n  get hasCustomState(): boolean {\n    return !!this.customState\n  }\n\n  get state(): EditorState {\n    return this.customState || this.editor.state\n  }\n\n  get commands(): SingleCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const { tr } = state\n    const props = this.buildProps(tr)\n\n    return Object.fromEntries(\n      Object.entries(rawCommands).map(([name, command]) => {\n        const method = (...args: any[]) => {\n          const callback = command(...args)(props)\n\n          if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n            view.dispatch(tr)\n          }\n\n          return callback\n        }\n\n        return [name, method]\n      }),\n    ) as unknown as SingleCommands\n  }\n\n  get chain(): () => ChainedCommands {\n    return () => this.createChain()\n  }\n\n  get can(): () => CanCommands {\n    return () => this.createCan()\n  }\n\n  public createChain(startTr?: Transaction, shouldDispatch = true): ChainedCommands {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n    const callbacks: boolean[] = []\n    const hasStartTransaction = !!startTr\n    const tr = startTr || state.tr\n\n    const run = () => {\n      if (\n        !hasStartTransaction\n        && shouldDispatch\n        && !tr.getMeta('preventDispatch')\n        && !this.hasCustomState\n      ) {\n        view.dispatch(tr)\n      }\n\n      return callbacks.every(callback => callback === true)\n    }\n\n    const chain = {\n      ...Object.fromEntries(\n        Object.entries(rawCommands).map(([name, command]) => {\n          const chainedCommand = (...args: never[]) => {\n            const props = this.buildProps(tr, shouldDispatch)\n            const callback = command(...args)(props)\n\n            callbacks.push(callback)\n\n            return chain\n          }\n\n          return [name, chainedCommand]\n        }),\n      ),\n      run,\n    } as unknown as ChainedCommands\n\n    return chain\n  }\n\n  public createCan(startTr?: Transaction): CanCommands {\n    const { rawCommands, state } = this\n    const dispatch = false\n    const tr = startTr || state.tr\n    const props = this.buildProps(tr, dispatch)\n    const formattedCommands = Object.fromEntries(\n      Object.entries(rawCommands).map(([name, command]) => {\n        return [name, (...args: never[]) => command(...args)({ ...props, dispatch: undefined })]\n      }),\n    ) as unknown as SingleCommands\n\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch),\n    } as CanCommands\n  }\n\n  public buildProps(tr: Transaction, shouldDispatch = true): CommandProps {\n    const { rawCommands, editor, state } = this\n    const { view } = editor\n\n    const props: CommandProps = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr,\n      }),\n      dispatch: shouldDispatch ? () => undefined : undefined,\n      chain: () => this.createChain(tr, shouldDispatch),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(\n          Object.entries(rawCommands).map(([name, command]) => {\n            return [name, (...args: never[]) => command(...args)(props)]\n          }),\n        ) as unknown as SingleCommands\n      },\n    }\n\n    return props\n  }\n}\n","type StringKeyOf<T> = Extract<keyof T, string>\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]]\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any\n\nexport class EventEmitter<T extends Record<string, any>> {\n\n  private callbacks: { [key: string]: Function[] } = {}\n\n  public on<EventName extends StringKeyOf<T>>(event: EventName, fn: CallbackFunction<T, EventName>): this {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = []\n    }\n\n    this.callbacks[event].push(fn)\n\n    return this\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(event: EventName, ...args: CallbackType<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args))\n    }\n\n    return this\n  }\n\n  public off<EventName extends StringKeyOf<T>>(event: EventName, fn?: CallbackFunction<T, EventName>): this {\n    const callbacks = this.callbacks[event]\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn)\n      } else {\n        delete this.callbacks[event]\n      }\n    }\n\n    return this\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {}\n  }\n}\n","import { AnyExtension, MaybeThisParameterType, RemoveThis } from '../types.js'\n\n/**\n * Returns a field from an extension\n * @param extension The Tiptap extension\n * @param field The field, for example `renderHTML` or `priority`\n * @param context The context object that should be passed as `this` into the function\n * @returns The field value\n */\nexport function getExtensionField<T = any>(\n  extension: AnyExtension,\n  field: string,\n  context?: Omit<MaybeThisParameterType<T>, 'parent'>,\n): RemoveThis<T> {\n\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context)\n  }\n\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent\n        ? getExtensionField(extension.parent, field, context)\n        : null,\n    })\n\n    return value\n  }\n\n  return extension.config[field]\n}\n","import { Extension } from '../Extension.js'\nimport { Mark } from '../Mark.js'\nimport { Node } from '../Node.js'\nimport { Extensions } from '../types.js'\n\nexport function splitExtensions(extensions: Extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension') as Extension[]\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node') as Node[]\n  const markExtensions = extensions.filter(extension => extension.type === 'mark') as Mark[]\n\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions,\n  }\n}\n","import { MarkConfig, NodeConfig } from '../index.js'\nimport {\n  AnyConfig,\n  Attribute,\n  Attributes,\n  ExtensionAttribute,\n  Extensions,\n  GlobalAttributes,\n} from '../types.js'\nimport { getExtensionField } from './getExtensionField.js'\nimport { splitExtensions } from './splitExtensions.js'\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nexport function getAttributesFromExtensions(extensions: Extensions): ExtensionAttribute[] {\n  const extensionAttributes: ExtensionAttribute[] = []\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions]\n  const defaultAttribute: Required<Attribute> = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false,\n  }\n\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addGlobalAttributes = getExtensionField<AnyConfig['addGlobalAttributes']>(\n      extension,\n      'addGlobalAttributes',\n      context,\n    )\n\n    if (!addGlobalAttributes) {\n      return\n    }\n\n    // TODO: remove `as GlobalAttributes`\n    const globalAttributes = addGlobalAttributes() as GlobalAttributes\n\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object\n          .entries(globalAttribute.attributes)\n          .forEach(([name, attribute]) => {\n            extensionAttributes.push({\n              type,\n              name,\n              attribute: {\n                ...defaultAttribute,\n                ...attribute,\n              },\n            })\n          })\n      })\n    })\n  })\n\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    const addAttributes = getExtensionField<NodeConfig['addAttributes'] | MarkConfig['addAttributes']>(\n      extension,\n      'addAttributes',\n      context,\n    )\n\n    if (!addAttributes) {\n      return\n    }\n\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes() as Attributes\n\n    Object\n      .entries(attributes)\n      .forEach(([name, attribute]) => {\n        const mergedAttr = {\n          ...defaultAttribute,\n          ...attribute,\n        }\n\n        if (typeof mergedAttr?.default === 'function') {\n          mergedAttr.default = mergedAttr.default()\n        }\n\n        if (mergedAttr?.isRequired && mergedAttr?.default === undefined) {\n          delete mergedAttr.default\n        }\n\n        extensionAttributes.push({\n          type: extension.name,\n          name,\n          attribute: mergedAttr,\n        })\n      })\n  })\n\n  return extensionAttributes\n}\n","import { NodeType, Schema } from '@tiptap/pm/model'\n\nexport function getNodeType(nameOrType: string | NodeType, schema: Schema): NodeType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(\n        `There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`,\n      )\n    }\n\n    return schema.nodes[nameOrType]\n  }\n\n  return nameOrType\n}\n","export function mergeAttributes(...objects: Record<string, any>[]): Record<string, any> {\n  return objects\n    .filter(item => !!item)\n    .reduce((items, item) => {\n      const mergedAttributes = { ...items }\n\n      Object.entries(item).forEach(([key, value]) => {\n        const exists = mergedAttributes[key]\n\n        if (!exists) {\n          mergedAttributes[key] = value\n\n          return\n        }\n\n        if (key === 'class') {\n          const valueClasses: string[] = value ? value.split(' ') : []\n          const existingClasses: string[] = mergedAttributes[key] ? mergedAttributes[key].split(' ') : []\n\n          const insertClasses = valueClasses.filter(\n            valueClass => !existingClasses.includes(valueClass),\n          )\n\n          mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ')\n        } else if (key === 'style') {\n          mergedAttributes[key] = [mergedAttributes[key], value].join('; ')\n        } else {\n          mergedAttributes[key] = value\n        }\n      })\n\n      return mergedAttributes\n    }, {})\n}\n","import { Mark, Node } from '@tiptap/pm/model'\n\nimport { ExtensionAttribute } from '../types.js'\nimport { mergeAttributes } from '../utilities/mergeAttributes.js'\n\nexport function getRenderedAttributes(\n  nodeOrMark: Node | Mark,\n  extensionAttributes: ExtensionAttribute[],\n): Record<string, any> {\n  return extensionAttributes\n    .filter(item => item.attribute.rendered)\n    .map(item => {\n      if (!item.attribute.renderHTML) {\n        return {\n          [item.name]: nodeOrMark.attrs[item.name],\n        }\n      }\n\n      return item.attribute.renderHTML(nodeOrMark.attrs) || {}\n    })\n    .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {})\n}\n","export function isFunction(value: any): value is Function {\n  return typeof value === 'function'\n}\n","import { MaybeReturnType } from '../types.js'\nimport { isFunction } from './isFunction.js'\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nexport function callOrReturn<T>(value: T, context: any = undefined, ...props: any[]): MaybeReturnType<T> {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props)\n    }\n\n    return value(...props)\n  }\n\n  return value as MaybeReturnType<T>\n}\n","export function isEmptyObject(value = {}): boolean {\n  return Object.keys(value).length === 0 && value.constructor === Object\n}\n","export function fromString(value: any): any {\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value)\n  }\n\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n","import { ParseRule } from '@tiptap/pm/model'\n\nimport { ExtensionAttribute } from '../types.js'\nimport { fromString } from '../utilities/fromString.js'\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nexport function injectExtensionAttributesToParseRule(\n  parseRule: ParseRule,\n  extensionAttributes: ExtensionAttribute[],\n): ParseRule {\n  if (parseRule.style) {\n    return parseRule\n  }\n\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs\n\n      if (oldAttributes === false) {\n        return false\n      }\n\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML\n          ? item.attribute.parseHTML(node as HTMLElement)\n          : fromString((node as HTMLElement).getAttribute(item.name))\n\n        if (value === null || value === undefined) {\n          return items\n        }\n\n        return {\n          ...items,\n          [item.name]: value,\n        }\n      }, {})\n\n      return { ...oldAttributes, ...newAttributes }\n    },\n  }\n}\n","import { MarkSpec, NodeSpec, Schema } from '@tiptap/pm/model'\n\nimport { Editor, MarkConfig, NodeConfig } from '../index.js'\nimport { AnyConfig, Extensions } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\nimport { isEmptyObject } from '../utilities/isEmptyObject.js'\nimport { getAttributesFromExtensions } from './getAttributesFromExtensions.js'\nimport { getExtensionField } from './getExtensionField.js'\nimport { getRenderedAttributes } from './getRenderedAttributes.js'\nimport { injectExtensionAttributesToParseRule } from './injectExtensionAttributesToParseRule.js'\nimport { splitExtensions } from './splitExtensions.js'\n\nfunction cleanUpSchemaItem<T>(data: T) {\n  return Object.fromEntries(\n    // @ts-ignore\n    Object.entries(data).filter(([key, value]) => {\n      if (key === 'attrs' && isEmptyObject(value as {} | undefined)) {\n        return false\n      }\n\n      return value !== null && value !== undefined\n    }),\n  ) as T\n}\n\n/**\n * Creates a new Prosemirror schema based on the given extensions.\n * @param extensions An array of Tiptap extensions\n * @param editor The editor instance\n * @returns A Prosemirror schema\n */\nexport function getSchemaByResolvedExtensions(extensions: Extensions, editor?: Editor): Schema {\n  const allAttributes = getAttributesFromExtensions(extensions)\n  const { nodeExtensions, markExtensions } = splitExtensions(extensions)\n  const topNode = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))?.name\n\n  const nodes = Object.fromEntries(\n    nodeExtensions.map(extension => {\n      const extensionAttributes = allAttributes.filter(\n        attribute => attribute.type === extension.name,\n      )\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n      }\n\n      const extraNodeFields = extensions.reduce((fields, e) => {\n        const extendNodeSchema = getExtensionField<AnyConfig['extendNodeSchema']>(\n          e,\n          'extendNodeSchema',\n          context,\n        )\n\n        return {\n          ...fields,\n          ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n        }\n      }, {})\n\n      const schema: NodeSpec = cleanUpSchemaItem({\n        ...extraNodeFields,\n        content: callOrReturn(\n          getExtensionField<NodeConfig['content']>(extension, 'content', context),\n        ),\n        marks: callOrReturn(getExtensionField<NodeConfig['marks']>(extension, 'marks', context)),\n        group: callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context)),\n        inline: callOrReturn(getExtensionField<NodeConfig['inline']>(extension, 'inline', context)),\n        atom: callOrReturn(getExtensionField<NodeConfig['atom']>(extension, 'atom', context)),\n        selectable: callOrReturn(\n          getExtensionField<NodeConfig['selectable']>(extension, 'selectable', context),\n        ),\n        draggable: callOrReturn(\n          getExtensionField<NodeConfig['draggable']>(extension, 'draggable', context),\n        ),\n        code: callOrReturn(getExtensionField<NodeConfig['code']>(extension, 'code', context)),\n        defining: callOrReturn(\n          getExtensionField<NodeConfig['defining']>(extension, 'defining', context),\n        ),\n        isolating: callOrReturn(\n          getExtensionField<NodeConfig['isolating']>(extension, 'isolating', context),\n        ),\n        attrs: Object.fromEntries(\n          extensionAttributes.map(extensionAttribute => {\n            return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n          }),\n        ),\n      })\n\n      const parseHTML = callOrReturn(\n        getExtensionField<NodeConfig['parseHTML']>(extension, 'parseHTML', context),\n      )\n\n      if (parseHTML) {\n        schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n      }\n\n      const renderHTML = getExtensionField<NodeConfig['renderHTML']>(\n        extension,\n        'renderHTML',\n        context,\n      )\n\n      if (renderHTML) {\n        schema.toDOM = node => renderHTML({\n          node,\n          HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n        })\n      }\n\n      const renderText = getExtensionField<NodeConfig['renderText']>(\n        extension,\n        'renderText',\n        context,\n      )\n\n      if (renderText) {\n        schema.toText = renderText\n      }\n\n      return [extension.name, schema]\n    }),\n  )\n\n  const marks = Object.fromEntries(\n    markExtensions.map(extension => {\n      const extensionAttributes = allAttributes.filter(\n        attribute => attribute.type === extension.name,\n      )\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n      }\n\n      const extraMarkFields = extensions.reduce((fields, e) => {\n        const extendMarkSchema = getExtensionField<AnyConfig['extendMarkSchema']>(\n          e,\n          'extendMarkSchema',\n          context,\n        )\n\n        return {\n          ...fields,\n          ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n        }\n      }, {})\n\n      const schema: MarkSpec = cleanUpSchemaItem({\n        ...extraMarkFields,\n        inclusive: callOrReturn(\n          getExtensionField<MarkConfig['inclusive']>(extension, 'inclusive', context),\n        ),\n        excludes: callOrReturn(\n          getExtensionField<MarkConfig['excludes']>(extension, 'excludes', context),\n        ),\n        group: callOrReturn(getExtensionField<MarkConfig['group']>(extension, 'group', context)),\n        spanning: callOrReturn(\n          getExtensionField<MarkConfig['spanning']>(extension, 'spanning', context),\n        ),\n        code: callOrReturn(getExtensionField<MarkConfig['code']>(extension, 'code', context)),\n        attrs: Object.fromEntries(\n          extensionAttributes.map(extensionAttribute => {\n            return [extensionAttribute.name, { default: extensionAttribute?.attribute?.default }]\n          }),\n        ),\n      })\n\n      const parseHTML = callOrReturn(\n        getExtensionField<MarkConfig['parseHTML']>(extension, 'parseHTML', context),\n      )\n\n      if (parseHTML) {\n        schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes))\n      }\n\n      const renderHTML = getExtensionField<MarkConfig['renderHTML']>(\n        extension,\n        'renderHTML',\n        context,\n      )\n\n      if (renderHTML) {\n        schema.toDOM = mark => renderHTML({\n          mark,\n          HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n        })\n      }\n\n      return [extension.name, schema]\n    }),\n  )\n\n  return new Schema({\n    topNode,\n    nodes,\n    marks,\n  })\n}\n","import { MarkType, NodeType, Schema } from '@tiptap/pm/model'\n\n/**\n * Tries to get a node or mark type by its name.\n * @param name The name of the node or mark type\n * @param schema The Prosemiror schema to search in\n * @returns The node or mark type, or null if it doesn't exist\n */\nexport function getSchemaTypeByName(name: string, schema: Schema): NodeType | MarkType | null {\n  return schema.nodes[name] || schema.marks[name] || null\n}\n","import { AnyExtension, EnableRules } from '../types.js'\n\nexport function isExtensionRulesEnabled(extension: AnyExtension, enabled: EnableRules): boolean {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string'\n        ? enabledExtension\n        : enabledExtension.name\n\n      return name === extension.name\n    })\n  }\n\n  return enabled\n}\n","import { ResolvedPos } from '@tiptap/pm/model'\n\n/**\n * Returns the text content of a resolved prosemirror position\n * @param $from The resolved position to get the text content from\n * @param maxMatch The maximum number of characters to match\n * @returns The text content\n */\nexport const getTextContentFromNodes = ($from: ResolvedPos, maxMatch = 500) => {\n  let textBefore = ''\n\n  const sliceEndPos = $from.parentOffset\n\n  $from.parent.nodesBetween(\n    Math.max(0, sliceEndPos - maxMatch),\n    sliceEndPos,\n    (node, pos, parent, index) => {\n      const chunk = node.type.spec.toText?.({\n        node,\n        pos,\n        parent,\n        index,\n      })\n        || node.textContent\n        || '%leaf%'\n\n      textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos))\n    },\n  )\n\n  return textBefore\n}\n","export function isRegExp(value: any): value is RegExp {\n  return Object.prototype.toString.call(value) === '[object RegExp]'\n}\n","import { EditorState, Plugin, TextSelection } from '@tiptap/pm/state'\n\nimport { CommandManager } from './CommandManager.js'\nimport { Editor } from './Editor.js'\nimport { createChainableState } from './helpers/createChainableState.js'\nimport { getTextContentFromNodes } from './helpers/getTextContentFromNodes.js'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types.js'\nimport { isRegExp } from './utilities/isRegExp.js'\n\nexport type InputRuleMatch = {\n  index: number\n  text: string\n  replaceWith?: string\n  match?: RegExpMatchArray\n  data?: Record<string, any>\n}\n\nexport type InputRuleFinder = RegExp | ((text: string) => InputRuleMatch | null)\n\nexport class InputRule {\n  find: InputRuleFinder\n\n  handler: (props: {\n    state: EditorState\n    range: Range\n    match: ExtendedRegExpMatchArray\n    commands: SingleCommands\n    chain: () => ChainedCommands\n    can: () => CanCommands\n  }) => void | null\n\n  constructor(config: {\n    find: InputRuleFinder\n    handler: (props: {\n      state: EditorState\n      range: Range\n      match: ExtendedRegExpMatchArray\n      commands: SingleCommands\n      chain: () => ChainedCommands\n      can: () => CanCommands\n    }) => void | null\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst inputRuleMatcherHandler = (\n  text: string,\n  find: InputRuleFinder,\n): ExtendedRegExpMatchArray | null => {\n  if (isRegExp(find)) {\n    return find.exec(text)\n  }\n\n  const inputRuleMatch = find(text)\n\n  if (!inputRuleMatch) {\n    return null\n  }\n\n  const result: ExtendedRegExpMatchArray = [inputRuleMatch.text]\n\n  result.index = inputRuleMatch.index\n  result.input = text\n  result.data = inputRuleMatch.data\n\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn(\n        '[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".',\n      )\n    }\n\n    result.push(inputRuleMatch.replaceWith)\n  }\n\n  return result\n}\n\nfunction run(config: {\n  editor: Editor\n  from: number\n  to: number\n  text: string\n  rules: InputRule[]\n  plugin: Plugin\n}): boolean {\n  const {\n    editor, from, to, text, rules, plugin,\n  } = config\n  const { view } = editor\n\n  if (view.composing) {\n    return false\n  }\n\n  const $from = view.state.doc.resolve(from)\n\n  if (\n    // check for code node\n    $from.parent.type.spec.code\n    // check for code mark\n    || !!($from.nodeBefore || $from.nodeAfter)?.marks.find(mark => mark.type.spec.code)\n  ) {\n    return false\n  }\n\n  let matched = false\n\n  const textBefore = getTextContentFromNodes($from) + text\n\n  rules.forEach(rule => {\n    if (matched) {\n      return\n    }\n\n    const match = inputRuleMatcherHandler(textBefore, rule.find)\n\n    if (!match) {\n      return\n    }\n\n    const tr = view.state.tr\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr,\n    })\n    const range = {\n      from: from - (match[0].length - text.length),\n      to,\n    }\n\n    const { commands, chain, can } = new CommandManager({\n      editor,\n      state,\n    })\n\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can,\n    })\n\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return\n    }\n\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text,\n    })\n\n    view.dispatch(tr)\n    matched = true\n  })\n\n  return matched\n}\n\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function inputRulesPlugin(props: { editor: Editor; rules: InputRule[] }): Plugin {\n  const { editor, rules } = props\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(plugin)\n\n        if (stored) {\n          return stored\n        }\n\n        // if InputRule is triggered by insertContent()\n        const simulatedInputMeta = tr.getMeta('applyInputRules')\n        const isSimulatedInput = !!simulatedInputMeta\n\n        if (isSimulatedInput) {\n          setTimeout(() => {\n            const { from, text } = simulatedInputMeta\n            const to = from + text.length\n\n            run({\n              editor,\n              from,\n              to,\n              text,\n              rules,\n              plugin,\n            })\n          })\n        }\n\n        return tr.selectionSet || tr.docChanged ? null : prev\n      },\n    },\n\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin,\n        })\n      },\n\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const { $cursor } = view.state.selection as TextSelection\n\n            if ($cursor) {\n              run({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin,\n              })\n            }\n          })\n\n          return false\n        },\n      },\n\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false\n        }\n\n        const { $cursor } = view.state.selection as TextSelection\n\n        if ($cursor) {\n          return run({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin,\n          })\n        }\n\n        return false\n      },\n    },\n\n    // @ts-ignore\n    isInputRules: true,\n  }) as Plugin\n\n  return plugin\n}\n","export function isNumber(value: any): value is number {\n  return typeof value === 'number'\n}\n","import { EditorState, Plugin } from '@tiptap/pm/state'\n\nimport { CommandManager } from './CommandManager.js'\nimport { Editor } from './Editor.js'\nimport { createChainableState } from './helpers/createChainableState.js'\nimport {\n  CanCommands,\n  ChainedCommands,\n  ExtendedRegExpMatchArray,\n  Range,\n  SingleCommands,\n} from './types.js'\nimport { isNumber } from './utilities/isNumber.js'\nimport { isRegExp } from './utilities/isRegExp.js'\n\nexport type PasteRuleMatch = {\n  index: number\n  text: string\n  replaceWith?: string\n  match?: RegExpMatchArray\n  data?: Record<string, any>\n}\n\nexport type PasteRuleFinder = RegExp | ((text: string, event?: ClipboardEvent | null) => PasteRuleMatch[] | null | undefined)\n\n/**\n * Paste rules are used to react to pasted content.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nexport class PasteRule {\n  find: PasteRuleFinder\n\n  handler: (props: {\n    state: EditorState\n    range: Range\n    match: ExtendedRegExpMatchArray\n    commands: SingleCommands\n    chain: () => ChainedCommands\n    can: () => CanCommands\n    pasteEvent: ClipboardEvent | null\n    dropEvent: DragEvent | null\n  }) => void | null\n\n  constructor(config: {\n    find: PasteRuleFinder\n    handler: (props: {\n      can: () => CanCommands\n      chain: () => ChainedCommands\n      commands: SingleCommands\n      dropEvent: DragEvent | null\n      match: ExtendedRegExpMatchArray\n      pasteEvent: ClipboardEvent | null\n      range: Range\n      state: EditorState\n    }) => void | null\n  }) {\n    this.find = config.find\n    this.handler = config.handler\n  }\n}\n\nconst pasteRuleMatcherHandler = (\n  text: string,\n  find: PasteRuleFinder,\n  event?: ClipboardEvent | null,\n): ExtendedRegExpMatchArray[] => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)]\n  }\n\n  const matches = find(text, event)\n\n  if (!matches) {\n    return []\n  }\n\n  return matches.map(pasteRuleMatch => {\n    const result: ExtendedRegExpMatchArray = [pasteRuleMatch.text]\n\n    result.index = pasteRuleMatch.index\n    result.input = text\n    result.data = pasteRuleMatch.data\n\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn(\n          '[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".',\n        )\n      }\n\n      result.push(pasteRuleMatch.replaceWith)\n    }\n\n    return result\n  })\n}\n\nfunction run(config: {\n  editor: Editor\n  state: EditorState\n  from: number\n  to: number\n  rule: PasteRule\n  pasteEvent: ClipboardEvent | null\n  dropEvent: DragEvent | null\n}): boolean {\n  const {\n    editor, state, from, to, rule, pasteEvent, dropEvent,\n  } = config\n\n  const { commands, chain, can } = new CommandManager({\n    editor,\n    state,\n  })\n\n  const handlers: (void | null)[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return\n    }\n\n    const resolvedFrom = Math.max(from, pos)\n    const resolvedTo = Math.min(to, pos + node.content.size)\n    const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc')\n\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent)\n\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return\n      }\n\n      const start = resolvedFrom + match.index + 1\n      const end = start + match[0].length\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end),\n      }\n\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n        pasteEvent,\n        dropEvent,\n      })\n\n      handlers.push(handler)\n    })\n  })\n\n  const success = handlers.every(handler => handler !== null)\n\n  return success\n}\n\nconst createClipboardPasteEvent = (text: string) => {\n  const event = new ClipboardEvent('paste', {\n    clipboardData: new DataTransfer(),\n  })\n\n  event.clipboardData?.setData('text/html', text)\n\n  return event\n}\n\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nexport function pasteRulesPlugin(props: { editor: Editor; rules: PasteRule[] }): Plugin[] {\n  const { editor, rules } = props\n  let dragSourceElement: Element | null = null\n  let isPastedFromProseMirror = false\n  let isDroppedFromProseMirror = false\n  let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null\n  let dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null\n\n  const processEvent = ({\n    state,\n    from,\n    to,\n    rule,\n    pasteEvt,\n  }: {\n    state: EditorState\n    from: number\n    to: { b: number }\n    rule: PasteRule\n    pasteEvt: ClipboardEvent | null\n  }) => {\n    const tr = state.tr\n    const chainableState = createChainableState({\n      state,\n      transaction: tr,\n    })\n\n    const handler = run({\n      editor,\n      state: chainableState,\n      from: Math.max(from - 1, 0),\n      to: to.b - 1,\n      rule,\n      pasteEvent: pasteEvt,\n      dropEvent,\n    })\n\n    if (!handler || !tr.steps.length) {\n      return\n    }\n\n    dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null\n    pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null\n\n    return tr\n  }\n\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = (event: DragEvent) => {\n          dragSourceElement = view.dom.parentElement?.contains(event.target as Element)\n            ? view.dom.parentElement\n            : null\n        }\n\n        window.addEventListener('dragstart', handleDragstart)\n\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart)\n          },\n        }\n      },\n\n      props: {\n        handleDOMEvents: {\n          drop: (view, event: Event) => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement\n            dropEvent = event as DragEvent\n\n            return false\n          },\n\n          paste: (_view, event: Event) => {\n            const html = (event as ClipboardEvent).clipboardData?.getData('text/html')\n\n            pasteEvent = event as ClipboardEvent\n\n            isPastedFromProseMirror = !!html?.includes('data-pm-slice')\n\n            return false\n          },\n        },\n      },\n\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0]\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror\n\n        // if PasteRule is triggered by insertContent()\n        const simulatedPasteMeta = transaction.getMeta('applyPasteRules')\n        const isSimulatedPaste = !!simulatedPasteMeta\n\n        if (!isPaste && !isDrop && !isSimulatedPaste) {\n          return\n        }\n\n        // Handle simulated paste\n        if (isSimulatedPaste) {\n          const { from, text } = simulatedPasteMeta\n          const to = from + text.length\n          const pasteEvt = createClipboardPasteEvent(text)\n\n          return processEvent({\n            rule,\n            state,\n            from,\n            to: { b: to },\n            pasteEvt,\n          })\n        }\n\n        // handle actual paste/drop\n        const from = oldState.doc.content.findDiffStart(state.doc.content)\n        const to = oldState.doc.content.findDiffEnd(state.doc.content)\n\n        // stop if there is no changed range\n        if (!isNumber(from) || !to || from === to.b) {\n          return\n        }\n\n        return processEvent({\n          rule,\n          state,\n          from,\n          to,\n          pasteEvt: pasteEvent,\n        })\n      },\n    })\n  })\n\n  return plugins\n}\n","export function findDuplicates(items: any[]): any[] {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index)\n\n  return [...new Set(filtered)]\n}\n","import { keymap } from '@tiptap/pm/keymap'\nimport { Node as ProsemirrorNode, Schema } from '@tiptap/pm/model'\nimport { Plugin } from '@tiptap/pm/state'\nimport { Decoration, EditorView } from '@tiptap/pm/view'\n\nimport { Editor } from './Editor.js'\nimport { getAttributesFromExtensions } from './helpers/getAttributesFromExtensions.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { getNodeType } from './helpers/getNodeType.js'\nimport { getRenderedAttributes } from './helpers/getRenderedAttributes.js'\nimport { getSchemaByResolvedExtensions } from './helpers/getSchemaByResolvedExtensions.js'\nimport { getSchemaTypeByName } from './helpers/getSchemaTypeByName.js'\nimport { isExtensionRulesEnabled } from './helpers/isExtensionRulesEnabled.js'\nimport { splitExtensions } from './helpers/splitExtensions.js'\nimport { Mark, NodeConfig } from './index.js'\nimport { InputRule, inputRulesPlugin } from './InputRule.js'\nimport { PasteRule, pasteRulesPlugin } from './PasteRule.js'\nimport { AnyConfig, Extensions, RawCommands } from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { findDuplicates } from './utilities/findDuplicates.js'\n\nexport class ExtensionManager {\n  editor: Editor\n\n  schema: Schema\n\n  extensions: Extensions\n\n  splittableMarks: string[] = []\n\n  constructor(extensions: Extensions, editor: Editor) {\n    this.editor = editor\n    this.extensions = ExtensionManager.resolve(extensions)\n    this.schema = getSchemaByResolvedExtensions(this.extensions, editor)\n    this.setupExtensions()\n  }\n\n  /**\n   * Returns a flattened and sorted extension list while\n   * also checking for duplicated extensions and warns the user.\n   * @param extensions An array of Tiptap extensions\n   * @returns An flattened and sorted array of Tiptap extensions\n   */\n  static resolve(extensions: Extensions): Extensions {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions))\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name))\n\n    if (duplicatedNames.length) {\n      console.warn(\n        `[tiptap warn]: Duplicate extension names found: [${duplicatedNames\n          .map(item => `'${item}'`)\n          .join(', ')}]. This can lead to issues.`,\n      )\n    }\n\n    return resolvedExtensions\n  }\n\n  /**\n   * Create a flattened array of extensions by traversing the `addExtensions` field.\n   * @param extensions An array of Tiptap extensions\n   * @returns A flattened array of Tiptap extensions\n   */\n  static flatten(extensions: Extensions): Extensions {\n    return (\n      extensions\n        .map(extension => {\n          const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n          }\n\n          const addExtensions = getExtensionField<AnyConfig['addExtensions']>(\n            extension,\n            'addExtensions',\n            context,\n          )\n\n          if (addExtensions) {\n            return [extension, ...this.flatten(addExtensions())]\n          }\n\n          return extension\n        })\n        // `Infinity` will break TypeScript so we set a number that is probably high enough\n        .flat(10)\n    )\n  }\n\n  /**\n   * Sort extensions by priority.\n   * @param extensions An array of Tiptap extensions\n   * @returns A sorted array of Tiptap extensions by priority\n   */\n  static sort(extensions: Extensions): Extensions {\n    const defaultPriority = 100\n\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField<AnyConfig['priority']>(a, 'priority') || defaultPriority\n      const priorityB = getExtensionField<AnyConfig['priority']>(b, 'priority') || defaultPriority\n\n      if (priorityA > priorityB) {\n        return -1\n      }\n\n      if (priorityA < priorityB) {\n        return 1\n      }\n\n      return 0\n    })\n  }\n\n  /**\n   * Get all commands from the extensions.\n   * @returns An object with all commands where the key is the command name and the value is the command function\n   */\n  get commands(): RawCommands {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      const addCommands = getExtensionField<AnyConfig['addCommands']>(\n        extension,\n        'addCommands',\n        context,\n      )\n\n      if (!addCommands) {\n        return commands\n      }\n\n      return {\n        ...commands,\n        ...addCommands(),\n      }\n    }, {} as RawCommands)\n  }\n\n  /**\n   * Get all registered Prosemirror plugins from the extensions.\n   * @returns An array of Prosemirror plugins\n   */\n  get plugins(): Plugin[] {\n    const { editor } = this\n\n    // With ProseMirror, first plugins within an array are executed first.\n    // In Tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse())\n\n    const inputRules: InputRule[] = []\n    const pasteRules: PasteRule[] = []\n\n    const allPlugins = extensions\n      .map(extension => {\n        const context = {\n          name: extension.name,\n          options: extension.options,\n          storage: extension.storage,\n          editor,\n          type: getSchemaTypeByName(extension.name, this.schema),\n        }\n\n        const plugins: Plugin[] = []\n\n        const addKeyboardShortcuts = getExtensionField<AnyConfig['addKeyboardShortcuts']>(\n          extension,\n          'addKeyboardShortcuts',\n          context,\n        )\n\n        let defaultBindings: Record<string, () => boolean> = {}\n\n        // bind exit handling\n        if (extension.type === 'mark' && extension.config.exitable) {\n          defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension as Mark })\n        }\n\n        if (addKeyboardShortcuts) {\n          const bindings = Object.fromEntries(\n            Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\n              return [shortcut, () => method({ editor })]\n            }),\n          )\n\n          defaultBindings = { ...defaultBindings, ...bindings }\n        }\n\n        const keyMapPlugin = keymap(defaultBindings)\n\n        plugins.push(keyMapPlugin)\n\n        const addInputRules = getExtensionField<AnyConfig['addInputRules']>(\n          extension,\n          'addInputRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n          inputRules.push(...addInputRules())\n        }\n\n        const addPasteRules = getExtensionField<AnyConfig['addPasteRules']>(\n          extension,\n          'addPasteRules',\n          context,\n        )\n\n        if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n          pasteRules.push(...addPasteRules())\n        }\n\n        const addProseMirrorPlugins = getExtensionField<AnyConfig['addProseMirrorPlugins']>(\n          extension,\n          'addProseMirrorPlugins',\n          context,\n        )\n\n        if (addProseMirrorPlugins) {\n          const proseMirrorPlugins = addProseMirrorPlugins()\n\n          plugins.push(...proseMirrorPlugins)\n        }\n\n        return plugins\n      })\n      .flat()\n\n    return [\n      inputRulesPlugin({\n        editor,\n        rules: inputRules,\n      }),\n      ...pasteRulesPlugin({\n        editor,\n        rules: pasteRules,\n      }),\n      ...allPlugins,\n    ]\n  }\n\n  /**\n   * Get all attributes from the extensions.\n   * @returns An array of attributes\n   */\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions)\n  }\n\n  /**\n   * Get all node views from the extensions.\n   * @returns An object with all node views where the key is the node name and the value is the node view function\n   */\n  get nodeViews() {\n    const { editor } = this\n    const { nodeExtensions } = splitExtensions(this.extensions)\n\n    return Object.fromEntries(\n      nodeExtensions\n        .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n        .map(extension => {\n          const extensionAttributes = this.attributes.filter(\n            attribute => attribute.type === extension.name,\n          )\n          const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor,\n            type: getNodeType(extension.name, this.schema),\n          }\n          const addNodeView = getExtensionField<NodeConfig['addNodeView']>(\n            extension,\n            'addNodeView',\n            context,\n          )\n\n          if (!addNodeView) {\n            return []\n          }\n\n          const nodeview = (\n            node: ProsemirrorNode,\n            view: EditorView,\n            getPos: (() => number) | boolean,\n            decorations: Decoration[],\n          ) => {\n            const HTMLAttributes = getRenderedAttributes(node, extensionAttributes)\n\n            return addNodeView()({\n              editor,\n              node,\n              getPos,\n              decorations,\n              HTMLAttributes,\n              extension,\n            })\n          }\n\n          return [extension.name, nodeview]\n        }),\n    )\n  }\n\n  /**\n   * Go through all extensions, create extension storages & setup marks\n   * & bind editor event listener.\n   */\n  private setupExtensions() {\n    this.extensions.forEach(extension => {\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage\n\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema),\n      }\n\n      if (extension.type === 'mark') {\n        const keepOnSplit = callOrReturn(getExtensionField(extension, 'keepOnSplit', context)) ?? true\n\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name)\n        }\n      }\n\n      const onBeforeCreate = getExtensionField<AnyConfig['onBeforeCreate']>(\n        extension,\n        'onBeforeCreate',\n        context,\n      )\n      const onCreate = getExtensionField<AnyConfig['onCreate']>(extension, 'onCreate', context)\n      const onUpdate = getExtensionField<AnyConfig['onUpdate']>(extension, 'onUpdate', context)\n      const onSelectionUpdate = getExtensionField<AnyConfig['onSelectionUpdate']>(\n        extension,\n        'onSelectionUpdate',\n        context,\n      )\n      const onTransaction = getExtensionField<AnyConfig['onTransaction']>(\n        extension,\n        'onTransaction',\n        context,\n      )\n      const onFocus = getExtensionField<AnyConfig['onFocus']>(extension, 'onFocus', context)\n      const onBlur = getExtensionField<AnyConfig['onBlur']>(extension, 'onBlur', context)\n      const onDestroy = getExtensionField<AnyConfig['onDestroy']>(extension, 'onDestroy', context)\n\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate)\n      }\n\n      if (onCreate) {\n        this.editor.on('create', onCreate)\n      }\n\n      if (onUpdate) {\n        this.editor.on('update', onUpdate)\n      }\n\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate)\n      }\n\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction)\n      }\n\n      if (onFocus) {\n        this.editor.on('focus', onFocus)\n      }\n\n      if (onBlur) {\n        this.editor.on('blur', onBlur)\n      }\n\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy)\n      }\n    })\n  }\n}\n","// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\n\nfunction getType(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nexport function isPlainObject(value: any): value is Record<string, any> {\n  if (getType(value) !== 'Object') {\n    return false\n  }\n\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype\n}\n","import { isPlainObject } from './isPlainObject.js'\n\nexport function mergeDeep(target: Record<string, any>, source: Record<string, any>): Record<string, any> {\n  const output = { ...target }\n\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    })\n  }\n\n  return output\n}\n","import { Plugin, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { ExtensionConfig } from './index.js'\nimport { InputRule } from './InputRule.js'\nimport { Mark } from './Mark.js'\nimport { Node } from './Node.js'\nimport { PasteRule } from './PasteRule.js'\nimport {\n  AnyConfig,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { mergeDeep } from './utilities/mergeDeep.js'\n\ndeclare module '@tiptap/core' {\n  interface ExtensionConfig<Options = any, Storage = any> {\n    [key: string]: any\n\n    /**\n     * The extension name - this must be unique.\n     * It will be used to identify the extension.\n     *\n     * @example 'myExtension'\n     */\n    name: string\n\n    /**\n     * The priority of your extension. The higher, the later it will be called\n     * and will take precedence over other extensions with a lower priority.\n     * @default 1000\n     * @example 1001\n     */\n    priority?: number\n\n    /**\n     * The default options for this extension.\n     * @example\n     * defaultOptions: {\n     *   myOption: 'foo',\n     *   myOtherOption: 10,\n     * }\n     */\n    defaultOptions?: Options\n\n    /**\n     * This method will add options to this extension\n     * @see https://tiptap.dev/guide/custom-extensions#settings\n     * @example\n     * addOptions() {\n     *  return {\n     *    myOption: 'foo',\n     *    myOtherOption: 10,\n     * }\n     */\n    addOptions?: (this: {\n      name: string\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addOptions'], undefined>\n    }) => Options\n\n    /**\n     * The default storage this extension can save data to.\n     * @see https://tiptap.dev/guide/custom-extensions#storage\n     * @example\n     * defaultStorage: {\n     *   prefetchedUsers: [],\n     *   loading: false,\n     * }\n     */\n    addStorage?: (this: {\n      name: string\n      options: Options\n      parent: Exclude<ParentConfig<ExtensionConfig<Options, Storage>>['addStorage'], undefined>\n    }) => Storage\n\n    /**\n     * This function adds globalAttributes to specific nodes.\n     * @see https://tiptap.dev/guide/custom-extensions#global-attributes\n     * @example\n     * addGlobalAttributes() {\n     *   return [\n     *     {\n             // Extend the following extensions\n     *       types: [\n     *         'heading',\n     *         'paragraph',\n     *       ],\n     *       // … with those attributes\n     *       attributes: {\n     *         textAlign: {\n     *           default: 'left',\n     *           renderHTML: attributes => ({\n     *             style: `text-align: ${attributes.textAlign}`,\n     *           }),\n     *           parseHTML: element => element.style.textAlign || 'left',\n     *         },\n     *       },\n     *     },\n     *   ]\n     * }\n     */\n    addGlobalAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addGlobalAttributes']\n    }) => GlobalAttributes | {}\n\n    /**\n     * This function adds commands to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addCommands() {\n     *   return {\n     *     myCommand: () => ({ chain }) => chain().setMark('type', 'foo').run(),\n     *   }\n     * }\n     */\n    addCommands?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addCommands']\n    }) => Partial<RawCommands>\n\n    /**\n     * This function registers keyboard shortcuts.\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addKeyboardShortcuts() {\n     *   return {\n     *     'Mod-l': () => this.editor.commands.toggleBulletList(),\n     *   }\n     * },\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addKeyboardShortcuts']\n    }) => {\n      [key: string]: KeyboardShortcutCommand\n    }\n\n    /**\n     * This function adds input rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#input-rules\n     * @example\n     * addInputRules() {\n     *   return [\n     *     markInputRule({\n     *       find: inputRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addInputRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addInputRules']\n    }) => InputRule[]\n\n    /**\n     * This function adds paste rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#paste-rules\n     * @example\n     * addPasteRules() {\n     *   return [\n     *     markPasteRule({\n     *       find: pasteRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addPasteRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addPasteRules']\n    }) => PasteRule[]\n\n    /**\n     * This function adds Prosemirror plugins to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#prosemirror-plugins\n     * @example\n     * addProseMirrorPlugins() {\n     *   return [\n     *     customPlugin(),\n     *   ]\n     * }\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addProseMirrorPlugins']\n    }) => Plugin[]\n\n    /**\n     * This function adds additional extensions to the editor. This is useful for\n     * building extension kits.\n     * @example\n     * addExtensions() {\n     *   return [\n     *     BulletList,\n     *     OrderedList,\n     *     ListItem\n     *   ]\n     * }\n     */\n    addExtensions?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<ExtensionConfig<Options, Storage>>['addExtensions']\n    }) => Extensions\n\n    /**\n     * This function extends the schema of the node.\n     * @example\n     * extendNodeSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendNodeSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendNodeSchema']\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * This function extends the schema of the mark.\n     * @example\n     * extendMarkSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendMarkSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['extendMarkSchema']\n          },\n          extension: Mark,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBeforeCreate']\n        }) => void)\n      | null\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onCreate']\n        }) => void)\n      | null\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onSelectionUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['onTransaction']\n          },\n          props: {\n            transaction: Transaction\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['onFocus']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            parent: ParentConfig<ExtensionConfig<Options, Storage>>['onBlur']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          parent: ParentConfig<ExtensionConfig<Options, Storage>>['onDestroy']\n        }) => void)\n      | null\n  }\n}\n\n/**\n * The Extension class is the base class for all extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nexport class Extension<Options = any, Storage = any> {\n  type = 'extension'\n\n  name = 'extension'\n\n  parent: Extension | null = null\n\n  child: Extension | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: ExtensionConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<ExtensionConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`,\n      )\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(\n        getExtensionField<AnyConfig['addOptions']>(this, 'addOptions', {\n          name: this.name,\n        }),\n      )\n    }\n\n    this.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(this, 'addStorage', {\n        name: this.name,\n        options: this.options,\n      }),\n    ) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<ExtensionConfig<O, S>> = {}) {\n    return new Extension<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.parent = this.parent\n    extension.options = mergeDeep(this.options as Record<string, any>, options) as Options\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(\n    extendedConfig: Partial<ExtensionConfig<ExtendedOptions, ExtendedStorage>> = {},\n  ) {\n    const extension = new Extension<ExtendedOptions, ExtendedStorage>({ ...this.config, ...extendedConfig })\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`,\n      )\n    }\n\n    extension.options = callOrReturn(\n      getExtensionField<AnyConfig['addOptions']>(extension, 'addOptions', {\n        name: extension.name,\n      }),\n    )\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { Range, TextSerializer } from '../types.js'\n\n/**\n * Gets the text between two positions in a Prosemirror node\n * and serializes it using the given text serializers and block separator (see getText)\n * @param startNode The Prosemirror node to start from\n * @param range The range of the text to get\n * @param options Options for the text serializer & block separator\n * @returns The text between the two positions\n */\nexport function getTextBetween(\n  startNode: ProseMirrorNode,\n  range: Range,\n  options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  },\n): string {\n  const { from, to } = range\n  const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {}\n  let text = ''\n\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    if (node.isBlock && pos > from) {\n      text += blockSeparator\n    }\n\n    const textSerializer = textSerializers?.[node.type.name]\n\n    if (textSerializer) {\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range,\n        })\n      }\n      // do not descend into child nodes when there exists a serializer\n      return false\n    }\n\n    if (node.isText) {\n      text += node?.text?.slice(Math.max(from, pos) - pos, to - pos) // eslint-disable-line\n    }\n  })\n\n  return text\n}\n","import { Schema } from '@tiptap/pm/model'\n\nimport { TextSerializer } from '../types.js'\n\n/**\n * Find text serializers `toText` in a Prosemirror schema\n * @param schema The Prosemirror schema to search in\n * @returns A record of text serializers by node name\n */\nexport function getTextSerializersFromSchema(schema: Schema): Record<string, TextSerializer> {\n  return Object.fromEntries(\n    Object.entries(schema.nodes)\n      .filter(([, node]) => node.spec.toText)\n      .map(([name, node]) => [name, node.spec.toText]),\n  )\n}\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\nimport { getTextBetween } from '../helpers/getTextBetween.js'\nimport { getTextSerializersFromSchema } from '../helpers/getTextSerializersFromSchema.js'\n\nexport type ClipboardTextSerializerOptions = {\n  blockSeparator?: string,\n}\n\nexport const ClipboardTextSerializer = Extension.create<ClipboardTextSerializerOptions>({\n  name: 'clipboardTextSerializer',\n\n  addOptions() {\n    return {\n      blockSeparator: undefined,\n    }\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('clipboardTextSerializer'),\n        props: {\n          clipboardTextSerializer: () => {\n            const { editor } = this\n            const { state, schema } = editor\n            const { doc, selection } = state\n            const { ranges } = selection\n            const from = Math.min(...ranges.map(range => range.$from.pos))\n            const to = Math.max(...ranges.map(range => range.$to.pos))\n            const textSerializers = getTextSerializersFromSchema(schema)\n            const range = { from, to }\n\n            return getTextBetween(doc, range, {\n              ...(this.options.blockSeparator !== undefined\n                ? { blockSeparator: this.options.blockSeparator }\n                : {}),\n              textSerializers,\n            })\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blur: {\n      /**\n       * Removes focus from the editor.\n       * @example editor.commands.blur()\n       */\n      blur: () => ReturnType,\n    }\n  }\n}\n\nexport const blur: RawCommands['blur'] = () => ({ editor, view }) => {\n  requestAnimationFrame(() => {\n    if (!editor.isDestroyed) {\n      (view.dom as HTMLElement).blur()\n\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      window?.getSelection()?.removeAllRanges()\n    }\n  })\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearContent: {\n      /**\n       * Clear the whole document.\n       * @param emitUpdate Whether to emit an update event.\n       * @example editor.commands.clearContent()\n       */\n      clearContent: (emitUpdate?: boolean) => ReturnType,\n    }\n  }\n}\n\nexport const clearContent: RawCommands['clearContent'] = (emitUpdate = false) => ({ commands }) => {\n  return commands.setContent('', emitUpdate)\n}\n","import { liftTarget } from '@tiptap/pm/transform'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    clearNodes: {\n      /**\n       * Normalize nodes to a simple paragraph.\n       * @example editor.commands.clearNodes()\n       */\n      clearNodes: () => ReturnType,\n    }\n  }\n}\n\nexport const clearNodes: RawCommands['clearNodes'] = () => ({ state, tr, dispatch }) => {\n  const { selection } = tr\n  const { ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  ranges.forEach(({ $from, $to }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return\n      }\n\n      const { doc, mapping } = tr\n      const $mappedFrom = doc.resolve(mapping.map(pos))\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize))\n      const nodeRange = $mappedFrom.blockRange($mappedTo)\n\n      if (!nodeRange) {\n        return\n      }\n\n      const targetLiftDepth = liftTarget(nodeRange)\n\n      if (node.type.isTextblock) {\n        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index())\n\n        tr.setNodeMarkup(nodeRange.start, defaultType)\n      }\n\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth)\n      }\n    })\n  })\n\n  return true\n}\n","import { Command, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    command: {\n      /**\n       * Define a command inline.\n       * @param fn The command function.\n       * @example\n       * editor.commands.command(({ tr, state }) => {\n       *   ...\n       *   return true\n       * })\n       */\n      command: (fn: (props: Parameters<Command>[0]) => boolean) => ReturnType,\n    }\n  }\n}\n\nexport const command: RawCommands['command'] = fn => props => {\n  return fn(props)\n}\n","import { createParagraphNear as originalCreateParagraphNear } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    createParagraphNear: {\n      /**\n       * Create a paragraph nearby.\n       * @example editor.commands.createParagraphNear()\n       */\n      createParagraphNear: () => ReturnType\n    }\n  }\n}\n\nexport const createParagraphNear: RawCommands['createParagraphNear'] = () => ({ state, dispatch }) => {\n  return originalCreateParagraphNear(state, dispatch)\n}\n","import { TextSelection } from '@tiptap/pm/state'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    cut: {\n      /**\n       * Cuts content from a range and inserts it at a given position.\n       * @param range The range to cut.\n       * @param range.from The start position of the range.\n       * @param range.to The end position of the range.\n       * @param targetPos The position to insert the content at.\n       * @example editor.commands.cut({ from: 1, to: 3 }, 5)\n       */\n      cut: ({ from, to }: { from: number, to: number }, targetPos: number) => ReturnType,\n    }\n  }\n}\n\nexport const cut: RawCommands['cut'] = (originRange, targetPos) => ({ editor, tr }) => {\n  const { state } = editor\n\n  const contentSlice = state.doc.slice(originRange.from, originRange.to)\n\n  tr.deleteRange(originRange.from, originRange.to)\n  const newPos = tr.mapping.map(targetPos)\n\n  tr.insert(newPos, contentSlice.content)\n\n  tr.setSelection(new TextSelection(tr.doc.resolve(newPos - 1)))\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteCurrentNode: {\n      /**\n       * Delete the node that currently has the selection anchor.\n       * @example editor.commands.deleteCurrentNode()\n       */\n      deleteCurrentNode: () => ReturnType,\n    }\n  }\n}\n\nexport const deleteCurrentNode: RawCommands['deleteCurrentNode'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const currentNode = selection.$anchor.node()\n\n  // if there is content inside the current node, break out of this command\n  if (currentNode.content.size > 0) {\n    return false\n  }\n\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === currentNode.type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteNode: {\n      /**\n       * Delete a node with a given type or name.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.deleteNode('paragraph')\n       */\n      deleteNode: (typeOrName: string | NodeType) => ReturnType,\n    }\n  }\n}\n\nexport const deleteNode: RawCommands['deleteNode'] = typeOrName => ({ tr, state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const $pos = tr.selection.$anchor\n\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth)\n\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth)\n        const to = $pos.after(depth)\n\n        tr.delete(from, to).scrollIntoView()\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { Range, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteRange: {\n      /**\n       * Delete a given range.\n       * @param range The range to delete.\n       * @example editor.commands.deleteRange({ from: 1, to: 3 })\n       */\n      deleteRange: (range: Range) => ReturnType,\n    }\n  }\n}\n\nexport const deleteRange: RawCommands['deleteRange'] = range => ({ tr, dispatch }) => {\n  const { from, to } = range\n\n  if (dispatch) {\n    tr.delete(from, to)\n  }\n\n  return true\n}\n","import { deleteSelection as originalDeleteSelection } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    deleteSelection: {\n      /**\n       * Delete the selection, if there is one.\n       * @example editor.commands.deleteSelection()\n       */\n      deleteSelection: () => ReturnType\n    }\n  }\n}\n\nexport const deleteSelection: RawCommands['deleteSelection'] = () => ({ state, dispatch }) => {\n  return originalDeleteSelection(state, dispatch)\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    enter: {\n      /**\n       * Trigger enter.\n       * @example editor.commands.enter()\n       */\n      enter: () => ReturnType,\n    }\n  }\n}\n\nexport const enter: RawCommands['enter'] = () => ({ commands }) => {\n  return commands.keyboardShortcut('Enter')\n}\n","import { exitCode as originalExitCode } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    exitCode: {\n      /**\n       * Exit from a code block.\n       * @example editor.commands.exitCode()\n       */\n      exitCode: () => ReturnType\n    }\n  }\n}\n\nexport const exitCode: RawCommands['exitCode'] = () => ({ state, dispatch }) => {\n  return originalExitCode(state, dispatch)\n}\n","import { isRegExp } from './isRegExp.js'\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nexport function objectIncludes(\n  object1: Record<string, any>,\n  object2: Record<string, any>,\n  options: { strict: boolean } = { strict: true },\n): boolean {\n  const keys = Object.keys(object2)\n\n  if (!keys.length) {\n    return true\n  }\n\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key]\n    }\n\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key])\n    }\n\n    return object2[key] === object1[key]\n  })\n}\n","import { Mark as ProseMirrorMark, MarkType, ResolvedPos } from '@tiptap/pm/model'\n\nimport { Range } from '../types.js'\nimport { objectIncludes } from '../utilities/objectIncludes.js'\n\nfunction findMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): ProseMirrorMark | undefined {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes)\n  })\n}\n\nfunction isMarkInSet(\n  marks: ProseMirrorMark[],\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): boolean {\n  return !!findMarkInSet(marks, type, attributes)\n}\n\nexport function getMarkRange(\n  $pos: ResolvedPos,\n  type: MarkType,\n  attributes: Record<string, any> = {},\n): Range | void {\n  if (!$pos || !type) {\n    return\n  }\n\n  let start = $pos.parent.childAfter($pos.parentOffset)\n\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset)\n  }\n\n  if (!start.node) {\n    return\n  }\n\n  const mark = findMarkInSet([...start.node.marks], type, attributes)\n\n  if (!mark) {\n    return\n  }\n\n  let startIndex = start.index\n  let startPos = $pos.start() + start.offset\n  let endIndex = startIndex + 1\n  let endPos = startPos + start.node.nodeSize\n\n  findMarkInSet([...start.node.marks], type, attributes)\n\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1\n    startPos -= $pos.parent.child(startIndex).nodeSize\n  }\n\n  while (\n    endIndex < $pos.parent.childCount\n    && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)\n  ) {\n    endPos += $pos.parent.child(endIndex).nodeSize\n    endIndex += 1\n  }\n\n  return {\n    from: startPos,\n    to: endPos,\n  }\n}\n","import { MarkType, Schema } from '@tiptap/pm/model'\n\nexport function getMarkType(nameOrType: string | MarkType, schema: Schema): MarkType {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(\n        `There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`,\n      )\n    }\n\n    return schema.marks[nameOrType]\n  }\n\n  return nameOrType\n}\n","import { MarkType } from '@tiptap/pm/model'\nimport { TextSelection } from '@tiptap/pm/state'\n\nimport { getMarkRange } from '../helpers/getMarkRange.js'\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    extendMarkRange: {\n      /**\n       * Extends the text selection to the current mark by type or name.\n       * @param typeOrName The type or name of the mark.\n       * @param attributes The attributes of the mark.\n       * @example editor.commands.extendMarkRange('bold')\n       * @example editor.commands.extendMarkRange('mention', { userId: \"1\" })\n       */\n      extendMarkRange: (\n        /**\n         * The type or name of the mark.\n         */\n        typeOrName: string | MarkType,\n\n        /**\n         * The attributes of the mark.\n         */\n        attributes?: Record<string, any>,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const extendMarkRange: RawCommands['extendMarkRange'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const type = getMarkType(typeOrName, state.schema)\n  const { doc, selection } = tr\n  const { $from, from, to } = selection\n\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes)\n\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to)\n\n      tr.setSelection(newSelection)\n    }\n  }\n\n  return true\n}\n","import { Command, CommandProps, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    first: {\n      /**\n       * Runs one command after the other and stops at the first which returns true.\n       * @param commands The commands to run.\n       * @example editor.commands.first([command1, command2])\n       */\n      first: (commands: Command[] | ((props: CommandProps) => Command[])) => ReturnType,\n    }\n  }\n}\n\nexport const first: RawCommands['first'] = commands => props => {\n  const items = typeof commands === 'function'\n    ? commands(props)\n    : commands\n\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import { TextSelection } from '@tiptap/pm/state'\n\nexport function isTextSelection(value: unknown): value is TextSelection {\n  return value instanceof TextSelection\n}\n","export function minMax(value = 0, min = 0, max = 0): number {\n  return Math.min(Math.max(value, min), max)\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { Selection, TextSelection } from '@tiptap/pm/state'\n\nimport { FocusPosition } from '../types.js'\nimport { minMax } from '../utilities/minMax.js'\n\nexport function resolveFocusPosition(\n  doc: ProseMirrorNode,\n  position: FocusPosition = null,\n): Selection | null {\n  if (!position) {\n    return null\n  }\n\n  const selectionAtStart = Selection.atStart(doc)\n  const selectionAtEnd = Selection.atEnd(doc)\n\n  if (position === 'start' || position === true) {\n    return selectionAtStart\n  }\n\n  if (position === 'end') {\n    return selectionAtEnd\n  }\n\n  const minPos = selectionAtStart.from\n  const maxPos = selectionAtEnd.to\n\n  if (position === 'all') {\n    return TextSelection.create(\n      doc,\n      minMax(0, minPos, maxPos),\n      minMax(doc.content.size, minPos, maxPos),\n    )\n  }\n\n  return TextSelection.create(\n    doc,\n    minMax(position, minPos, maxPos),\n    minMax(position, minPos, maxPos),\n  )\n}\n","export function isiOS(): boolean {\n  return [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod',\n  ].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || (navigator.userAgent.includes('Mac') && 'ontouchend' in document)\n}\n","import { isTextSelection } from '../helpers/isTextSelection.js'\nimport { resolveFocusPosition } from '../helpers/resolveFocusPosition.js'\nimport { FocusPosition, RawCommands } from '../types.js'\nimport { isiOS } from '../utilities/isiOS.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    focus: {\n      /**\n       * Focus the editor at the given position.\n       * @param position The position to focus at.\n       * @param options.scrollIntoView Scroll the focused position into view after focusing\n       * @example editor.commands.focus()\n       * @example editor.commands.focus(32, { scrollIntoView: false })\n       */\n      focus: (\n        /**\n         * The position to focus at.\n         */\n        position?: FocusPosition,\n\n        /**\n         * Optional options\n         * @default { scrollIntoView: true }\n         */\n        options?: {\n          scrollIntoView?: boolean,\n        },\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const focus: RawCommands['focus'] = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options,\n  }\n\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      (view.dom as HTMLElement).focus()\n    }\n\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus()\n\n        if (options?.scrollIntoView) {\n          editor.commands.scrollIntoView()\n        }\n      }\n    })\n  }\n\n  if ((view.hasFocus() && position === null) || position === false) {\n    return true\n  }\n\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus()\n    return true\n  }\n\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection\n  const isSameSelection = editor.state.selection.eq(selection)\n\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection)\n    }\n\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks)\n    }\n\n    delayedFocus()\n  }\n\n  return true\n}\n","import { CommandProps, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    forEach: {\n      /**\n       * Loop through an array of items.\n       */\n      forEach: <T>(\n        items: T[],\n        fn: (\n          item: T,\n          props: CommandProps & {\n            index: number,\n          },\n        ) => boolean,\n      ) => ReturnType,\n    }\n  }\n}\n\nexport const forEach: RawCommands['forEach'] = (items, fn) => props => {\n  return items.every((item, index) => fn(item, { ...props, index }))\n}\n","import { ParseOptions } from '@tiptap/pm/model'\n\nimport { Content, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContent: {\n      /**\n       * Insert a node or string of HTML at the current position.\n       * @example editor.commands.insertContent('<h1>Example</h1>')\n       * @example editor.commands.insertContent('<h1>Example</h1>', { updateSelection: false })\n       */\n      insertContent: (\n        /**\n         * The ProseMirror content to insert.\n         */\n        value: Content,\n\n        /**\n         * Optional options\n         */\n        options?: {\n          /**\n           * Options for parsing the content.\n           */\n          parseOptions?: ParseOptions\n\n          /**\n           * Whether to update the selection after inserting the content.\n           */\n          updateSelection?: boolean\n          applyInputRules?: boolean\n          applyPasteRules?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nexport const insertContent: RawCommands['insertContent'] = (value, options) => ({ tr, commands }) => {\n  return commands.insertContentAt(\n    { from: tr.selection.from, to: tr.selection.to },\n    value,\n    options,\n  )\n}\n","const removeWhitespaces = (node: HTMLElement) => {\n  const children = node.childNodes\n\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i]\n\n    if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n      node.removeChild(child)\n    } else if (child.nodeType === 1) {\n      removeWhitespaces(child as HTMLElement)\n    }\n  }\n\n  return node\n}\n\nexport function elementFromString(value: string): HTMLElement {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`\n\n  const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n\n  return removeWhitespaces(html)\n}\n","import {\n  DOMParser,\n  Fragment,\n  Node as ProseMirrorNode,\n  ParseOptions,\n  Schema,\n} from '@tiptap/pm/model'\n\nimport { Content } from '../types.js'\nimport { elementFromString } from '../utilities/elementFromString.js'\n\nexport type CreateNodeFromContentOptions = {\n  slice?: boolean\n  parseOptions?: ParseOptions\n}\n\n/**\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\n * @param content The JSON or HTML content to create the node from\n * @param schema The Prosemirror schema to use for the node\n * @param options Options for the parser\n * @returns The created Prosemirror node or fragment\n */\nexport function createNodeFromContent(\n  content: Content,\n  schema: Schema,\n  options?: CreateNodeFromContentOptions,\n): ProseMirrorNode | Fragment {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options,\n  }\n\n  const isJSONContent = typeof content === 'object' && content !== null\n  const isTextContent = typeof content === 'string'\n\n  if (isJSONContent) {\n    try {\n      const isArrayContent = Array.isArray(content) && content.length > 0\n\n      // if the JSON Content is an array of nodes, create a fragment for each node\n      if (isArrayContent) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)))\n      }\n\n      return schema.nodeFromJSON(content)\n    } catch (error) {\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error)\n\n      return createNodeFromContent('', schema, options)\n    }\n  }\n\n  if (isTextContent) {\n    const parser = DOMParser.fromSchema(schema)\n\n    return options.slice\n      ? parser.parseSlice(elementFromString(content), options.parseOptions).content\n      : parser.parse(elementFromString(content), options.parseOptions)\n  }\n\n  return createNodeFromContent('', schema, options)\n}\n","import { Selection, Transaction } from '@tiptap/pm/state'\nimport { ReplaceAroundStep, ReplaceStep } from '@tiptap/pm/transform'\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nexport function selectionToInsertionEnd(tr: Transaction, startLen: number, bias: number) {\n  const last = tr.steps.length - 1\n\n  if (last < startLen) {\n    return\n  }\n\n  const step = tr.steps[last]\n\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return\n  }\n\n  const map = tr.mapping.maps[last]\n  let end = 0\n\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo\n    }\n  })\n\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n","import { Fragment, Node as ProseMirrorNode, ParseOptions } from '@tiptap/pm/model'\n\nimport { createNodeFromContent } from '../helpers/createNodeFromContent.js'\nimport { selectionToInsertionEnd } from '../helpers/selectionToInsertionEnd.js'\nimport { Content, Range, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    insertContentAt: {\n      /**\n       * Insert a node or string of HTML at a specific position.\n       * @example editor.commands.insertContentAt(0, '<h1>Example</h1>')\n       */\n      insertContentAt: (\n        /**\n         * The position to insert the content at.\n         */\n        position: number | Range,\n\n        /**\n         * The ProseMirror content to insert.\n         */\n        value: Content,\n\n        /**\n         * Optional options\n         */\n        options?: {\n          /**\n           * Options for parsing the content.\n           */\n          parseOptions?: ParseOptions\n\n          /**\n           * Whether to update the selection after inserting the content.\n           */\n          updateSelection?: boolean\n          applyInputRules?: boolean\n          applyPasteRules?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nconst isFragment = (nodeOrFragment: ProseMirrorNode | Fragment): nodeOrFragment is Fragment => {\n  return nodeOrFragment.toString().startsWith('<')\n}\n\nexport const insertContentAt: RawCommands['insertContentAt'] = (position, value, options) => ({ tr, dispatch, editor }) => {\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      applyInputRules: false,\n      applyPasteRules: false,\n      ...options,\n    }\n\n    const content = createNodeFromContent(value, editor.schema, {\n      parseOptions: {\n        preserveWhitespace: 'full',\n        ...options.parseOptions,\n      },\n    })\n\n    // don’t dispatch an empty fragment because this can lead to strange errors\n    if (content.toString() === '<>') {\n      return true\n    }\n\n    let { from, to } = typeof position === 'number' ? { from: position, to: position } : { from: position.from, to: position.to }\n\n    let isOnlyTextContent = true\n    let isOnlyBlockContent = true\n    const nodes = isFragment(content) ? content : [content]\n\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check()\n\n      isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false\n\n      isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false\n    })\n\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const { parent } = tr.doc.resolve(from)\n      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount\n\n      if (isEmptyTextBlock) {\n        from -= 1\n        to += 1\n      }\n    }\n\n    let newContent\n\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      // if value is string, we can use it directly\n      // otherwise if it is an array, we have to join it\n      if (Array.isArray(value)) {\n        newContent = value.map(v => v.text || '').join('')\n      } else if (typeof value === 'object' && !!value && !!value.text) {\n        newContent = value.text\n      } else {\n        newContent = value as string\n      }\n\n      tr.insertText(newContent, from, to)\n    } else {\n      newContent = content\n\n      tr.replaceWith(from, to, newContent)\n    }\n\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1)\n    }\n\n    if (options.applyInputRules) {\n      tr.setMeta('applyInputRules', { from, text: newContent })\n    }\n\n    if (options.applyPasteRules) {\n      tr.setMeta('applyPasteRules', { from, text: newContent })\n    }\n  }\n\n  return true\n}\n","import {\n  joinBackward as originalJoinBackward,\n  joinDown as originalJoinDown,\n  joinForward as originalJoinForward,\n  joinUp as originalJoinUp,\n} from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinUp: {\n      /**\n       * Join the selected block or, if there is a text selection, the closest ancestor block of the selection that can be joined, with the sibling above it.\n       * @example editor.commands.joinUp()\n       */\n      joinUp: () => ReturnType\n    }\n    joinDown: {\n      /**\n       * Join the selected block, or the closest ancestor of the selection that can be joined, with the sibling after it.\n       * @example editor.commands.joinDown()\n       */\n      joinDown: () => ReturnType\n    }\n    joinBackward: {\n      /**\n       * If the selection is empty and at the start of a textblock, try to reduce the distance between that block and the one before it—if there's a block directly before it that can be joined, join them.\n       * If not, try to move the selected block closer to the next one in the document structure by lifting it out of its\n       * parent or moving it into a parent of the previous block. Will use the view for accurate (bidi-aware) start-of-textblock detection if given.\n       * @example editor.commands.joinBackward()\n       */\n      joinBackward: () => ReturnType\n    }\n    joinForward: {\n      /**\n       * If the selection is empty and the cursor is at the end of a textblock, try to reduce or remove the boundary between that block and the one after it,\n       * either by joining them or by moving the other block closer to this one in the tree structure.\n       * Will use the view for accurate start-of-textblock detection if given.\n       * @example editor.commands.joinForward()\n       */\n      joinForward: () => ReturnType\n    }\n  }\n}\n\nexport const joinUp: RawCommands['joinUp'] = () => ({ state, dispatch }) => {\n  return originalJoinUp(state, dispatch)\n}\n\nexport const joinDown: RawCommands['joinDown'] = () => ({ state, dispatch }) => {\n  return originalJoinDown(state, dispatch)\n}\n\nexport const joinBackward: RawCommands['joinBackward'] = () => ({ state, dispatch }) => {\n  return originalJoinBackward(state, dispatch)\n}\n\nexport const joinForward: RawCommands['joinForward'] = () => ({ state, dispatch }) => {\n  return originalJoinForward(state, dispatch)\n}\n","import { joinPoint } from '@tiptap/pm/transform'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinItemBackward: {\n      /**\n       * Join two items backward.\n       * @example editor.commands.joinItemBackward()\n       */\n      joinItemBackward: () => ReturnType\n    }\n  }\n}\n\nexport const joinItemBackward: RawCommands['joinItemBackward'] = () => ({\n  tr, state, dispatch,\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, -1)\n\n    if (point === null || point === undefined) {\n      return false\n    }\n\n    tr.join(point, 2)\n\n    if (dispatch) {\n      dispatch(tr)\n    }\n\n    return true\n  } catch {\n    return false\n  }\n}\n","import { joinPoint } from '@tiptap/pm/transform'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinItemForward: {\n      /**\n       * Join two items Forwards.\n       * @example editor.commands.joinItemForward()\n       */\n      joinItemForward: () => ReturnType\n    }\n  }\n}\n\nexport const joinItemForward: RawCommands['joinItemForward'] = () => ({\n  state,\n  dispatch,\n  tr,\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, +1)\n\n    if (point === null || point === undefined) {\n      return false\n    }\n\n    tr.join(point, 2)\n\n    if (dispatch) {\n      dispatch(tr)\n    }\n\n    return true\n  } catch (e) {\n    return false\n  }\n}\n","import { joinTextblockBackward as originalCommand } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinTextblockBackward: {\n      /**\n       * A more limited form of joinBackward that only tries to join the current textblock to the one before it, if the cursor is at the start of a textblock.\n       */\n      joinTextblockBackward: () => ReturnType\n    }\n  }\n}\n\nexport const joinTextblockBackward: RawCommands['joinTextblockBackward'] = () => ({ state, dispatch }) => {\n  return originalCommand(state, dispatch)\n}\n","import { joinTextblockForward as originalCommand } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    joinTextblockForward: {\n      /**\n       * A more limited form of joinForward that only tries to join the current textblock to the one after it, if the cursor is at the end of a textblock.\n       */\n      joinTextblockForward: () => ReturnType\n    }\n  }\n}\n\nexport const joinTextblockForward: RawCommands['joinTextblockForward'] = () => ({ state, dispatch }) => {\n  return originalCommand(state, dispatch)\n}\n","export function isMacOS(): boolean {\n  return typeof navigator !== 'undefined'\n    ? /Mac/.test(navigator.platform)\n    : false\n}\n","import { RawCommands } from '../types.js'\nimport { isiOS } from '../utilities/isiOS.js'\nimport { isMacOS } from '../utilities/isMacOS.js'\n\nfunction normalizeKeyName(name: string) {\n  const parts = name.split(/-(?!$)/)\n  let result = parts[parts.length - 1]\n\n  if (result === 'Space') {\n    result = ' '\n  }\n\n  let alt\n  let ctrl\n  let shift\n  let meta\n\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i]\n\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true\n      } else {\n        ctrl = true\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`)\n    }\n  }\n\n  if (alt) {\n    result = `Alt-${result}`\n  }\n\n  if (ctrl) {\n    result = `Ctrl-${result}`\n  }\n\n  if (meta) {\n    result = `Meta-${result}`\n  }\n\n  if (shift) {\n    result = `Shift-${result}`\n  }\n\n  return result\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    keyboardShortcut: {\n      /**\n       * Trigger a keyboard shortcut.\n       * @param name The name of the keyboard shortcut.\n       * @example editor.commands.keyboardShortcut('Mod-b')\n       */\n      keyboardShortcut: (name: string) => ReturnType,\n    }\n  }\n}\n\nexport const keyboardShortcut: RawCommands['keyboardShortcut'] = name => ({\n  editor,\n  view,\n  tr,\n  dispatch,\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/)\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item))\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space'\n      ? ' '\n      : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true,\n  })\n\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event))\n  })\n\n  capturedTransaction?.steps.forEach(step => {\n    const newStep = step.map(tr.mapping)\n\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep)\n    }\n  })\n\n  return true\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { NodeRange } from '../types.js'\nimport { objectIncludes } from '../utilities/objectIncludes.js'\nimport { getNodeType } from './getNodeType.js'\n\nexport function isNodeActive(\n  state: EditorState,\n  typeOrName: NodeType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { from, to, empty } = state.selection\n  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null\n\n  const nodeRanges: NodeRange[] = []\n\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return\n    }\n\n    const relativeFrom = Math.max(from, pos)\n    const relativeTo = Math.min(to, pos + node.nodeSize)\n\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo,\n    })\n  })\n\n  const selectionRange = to - from\n  const matchedNodeRanges = nodeRanges\n    .filter(nodeRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === nodeRange.node.type.name\n    })\n    .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }))\n\n  if (empty) {\n    return !!matchedNodeRanges.length\n  }\n\n  const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0)\n\n  return range >= selectionRange\n}\n","import { lift as originalLift } from '@tiptap/pm/commands'\nimport { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isNodeActive } from '../helpers/isNodeActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    lift: {\n      /**\n       * Removes an existing wrap if possible lifting the node out of it\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.lift('paragraph')\n       * @example editor.commands.lift('heading', { level: 1 })\n       */\n      lift: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const lift: RawCommands['lift'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (!isActive) {\n    return false\n  }\n\n  return originalLift(state, dispatch)\n}\n","import { liftEmptyBlock as originalLiftEmptyBlock } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftEmptyBlock: {\n      /**\n       * If the cursor is in an empty textblock that can be lifted, lift the block.\n       * @example editor.commands.liftEmptyBlock()\n       */\n      liftEmptyBlock: () => ReturnType,\n    }\n  }\n}\n\nexport const liftEmptyBlock: RawCommands['liftEmptyBlock'] = () => ({ state, dispatch }) => {\n  return originalLiftEmptyBlock(state, dispatch)\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { liftListItem as originalLiftListItem } from '@tiptap/pm/schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    liftListItem: {\n      /**\n       * Create a command to lift the list item around the selection up into a wrapping list.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.liftListItem('listItem')\n       */\n      liftListItem: (typeOrName: string | NodeType) => ReturnType\n    }\n  }\n}\n\nexport const liftListItem: RawCommands['liftListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalLiftListItem(type)(state, dispatch)\n}\n","import { newlineInCode as originalNewlineInCode } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    newlineInCode: {\n      /**\n       * Add a newline character in code.\n       * @example editor.commands.newlineInCode()\n       */\n      newlineInCode: () => ReturnType\n    }\n  }\n}\n\nexport const newlineInCode: RawCommands['newlineInCode'] = () => ({ state, dispatch }) => {\n  return originalNewlineInCode(state, dispatch)\n}\n","import { Schema } from '@tiptap/pm/model'\n\n/**\n * Get the type of a schema item by its name.\n * @param name The name of the schema item\n * @param schema The Prosemiror schema to search in\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\n */\nexport function getSchemaTypeNameByName(name: string, schema: Schema): 'node' | 'mark' | null {\n  if (schema.nodes[name]) {\n    return 'node'\n  }\n\n  if (schema.marks[name]) {\n    return 'mark'\n  }\n\n  return null\n}\n","/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nexport function deleteProps(obj: Record<string, any>, propOrProps: string | string[]): Record<string, any> {\n  const props = typeof propOrProps === 'string'\n    ? [propOrProps]\n    : propOrProps\n\n  return Object\n    .keys(obj)\n    .reduce((newObj: Record<string, any>, prop) => {\n      if (!props.includes(prop)) {\n        newObj[prop] = obj[prop]\n      }\n\n      return newObj\n    }, {})\n}\n","import { MarkType, NodeType } from '@tiptap/pm/model'\n\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName.js'\nimport { RawCommands } from '../types.js'\nimport { deleteProps } from '../utilities/deleteProps.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    resetAttributes: {\n      /**\n       * Resets some node attributes to the default value.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node to reset.\n       * @example editor.commands.resetAttributes('heading', 'level')\n       */\n      resetAttributes: (\n        typeOrName: string | NodeType | MarkType,\n        attributes: string | string[],\n      ) => ReturnType\n    }\n  }\n}\n\nexport const resetAttributes: RawCommands['resetAttributes'] = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string' ? typeOrName : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes))\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(\n                pos,\n                pos + node.nodeSize,\n                markType.create(deleteProps(mark.attrs, attributes)),\n              )\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    scrollIntoView: {\n      /**\n       * Scroll the selection into view.\n       * @example editor.commands.scrollIntoView()\n       */\n      scrollIntoView: () => ReturnType,\n    }\n  }\n}\n\nexport const scrollIntoView: RawCommands['scrollIntoView'] = () => ({ tr, dispatch }) => {\n  if (dispatch) {\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectAll: {\n      /**\n       * Select the whole document.\n       * @example editor.commands.selectAll()\n       */\n      selectAll: () => ReturnType,\n    }\n  }\n}\n\nexport const selectAll: RawCommands['selectAll'] = () => ({ tr, commands }) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size,\n  })\n}\n","import { selectNodeBackward as originalSelectNodeBackward } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeBackward: {\n      /**\n       * Select a node backward.\n       * @example editor.commands.selectNodeBackward()\n       */\n      selectNodeBackward: () => ReturnType\n    }\n  }\n}\n\nexport const selectNodeBackward: RawCommands['selectNodeBackward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeBackward(state, dispatch)\n}\n","import { selectNodeForward as originalSelectNodeForward } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectNodeForward: {\n      /**\n       * Select a node forward.\n       * @example editor.commands.selectNodeForward()\n       */\n      selectNodeForward: () => ReturnType\n    }\n  }\n}\n\nexport const selectNodeForward: RawCommands['selectNodeForward'] = () => ({ state, dispatch }) => {\n  return originalSelectNodeForward(state, dispatch)\n}\n","import { selectParentNode as originalSelectParentNode } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectParentNode: {\n      /**\n       * Select the parent node.\n       * @example editor.commands.selectParentNode()\n       */\n      selectParentNode: () => ReturnType\n    }\n  }\n}\n\nexport const selectParentNode: RawCommands['selectParentNode'] = () => ({ state, dispatch }) => {\n  return originalSelectParentNode(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockEnd as originalSelectTextblockEnd } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockEnd: {\n      /**\n       * Moves the cursor to the end of current text block.\n       * @example editor.commands.selectTextblockEnd()\n       */\n      selectTextblockEnd: () => ReturnType\n    }\n  }\n}\n\nexport const selectTextblockEnd: RawCommands['selectTextblockEnd'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockEnd(state, dispatch)\n}\n","// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nimport { selectTextblockStart as originalSelectTextblockStart } from '@tiptap/pm/commands'\n\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    selectTextblockStart: {\n      /**\n       * Moves the cursor to the start of current text block.\n       * @example editor.commands.selectTextblockStart()\n       */\n      selectTextblockStart: () => ReturnType\n    }\n  }\n}\n\nexport const selectTextblockStart: RawCommands['selectTextblockStart'] = () => ({ state, dispatch }) => {\n  return originalSelectTextblockStart(state, dispatch)\n}\n","import { Node as ProseMirrorNode, ParseOptions, Schema } from '@tiptap/pm/model'\n\nimport { Content } from '../types.js'\nimport { createNodeFromContent } from './createNodeFromContent.js'\n\n/**\n * Create a new Prosemirror document node from content.\n * @param content The JSON or HTML content to create the document from\n * @param schema The Prosemirror schema to use for the document\n * @param parseOptions Options for the parser\n * @returns The created Prosemirror document node\n */\nexport function createDocument(\n  content: Content,\n  schema: Schema,\n  parseOptions: ParseOptions = {},\n): ProseMirrorNode {\n  return createNodeFromContent(content, schema, { slice: false, parseOptions }) as ProseMirrorNode\n}\n","import { ParseOptions } from '@tiptap/pm/model'\n\nimport { createDocument } from '../helpers/createDocument.js'\nimport { Content, RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setContent: {\n      /**\n       * Replace the whole document with new content.\n       * @param content The new content.\n       * @param emitUpdate Whether to emit an update event.\n       * @param parseOptions Options for parsing the content.\n       * @example editor.commands.setContent('<p>Example text</p>')\n       */\n      setContent: (\n        /**\n         * The new content.\n         */\n        content: Content,\n\n        /**\n         * Whether to emit an update event.\n         * @default false\n         */\n        emitUpdate?: boolean,\n\n        /**\n         * Options for parsing the content.\n         * @default {}\n         */\n        parseOptions?: ParseOptions,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const setContent: RawCommands['setContent'] = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {\n  const { doc } = tr\n  const document = createDocument(content, editor.schema, parseOptions)\n\n  if (dispatch) {\n    tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate)\n  }\n\n  return true\n}\n","import { Mark, MarkType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { getMarkType } from './getMarkType.js'\n\nexport function getMarkAttributes(\n  state: EditorState,\n  typeOrName: string | MarkType,\n): Record<string, any> {\n  const type = getMarkType(typeOrName, state.schema)\n  const { from, to, empty } = state.selection\n  const marks: Mark[] = []\n\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks)\n    }\n\n    marks.push(...state.selection.$head.marks())\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks)\n    })\n  }\n\n  const mark = marks.find(markItem => markItem.type.name === type.name)\n\n  if (!mark) {\n    return {}\n  }\n\n  return { ...mark.attrs }\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { Transaction } from '@tiptap/pm/state'\nimport { Transform } from '@tiptap/pm/transform'\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n * @param oldDoc The Prosemirror node to start from\n * @param transactions The transactions to combine\n * @returns A new `Transform` with all steps of the passed transactions\n */\nexport function combineTransactionSteps(\n  oldDoc: ProseMirrorNode,\n  transactions: Transaction[],\n): Transform {\n  const transform = new Transform(oldDoc)\n\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step)\n    })\n  })\n\n  return transform\n}\n","import { ContentMatch, NodeType } from '@tiptap/pm/model'\n\n/**\n * Gets the default block type at a given match\n * @param match The content match to get the default block type from\n * @returns The default block type or null\n */\nexport function defaultBlockAt(match: ContentMatch): NodeType | null {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const { type } = match.edge(i)\n\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type\n    }\n  }\n\n  return null\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { NodeWithPos, Predicate } from '../types.js'\n\n/**\n * Find children inside a Prosemirror node that match a predicate.\n * @param node The Prosemirror node to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nexport function findChildren(node: ProseMirrorNode, predicate: Predicate): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { NodeWithPos, Predicate, Range } from '../types.js'\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n * @param node The Prosemirror node to search in\n * @param range The range to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nexport function findChildrenInRange(\n  node: ProseMirrorNode,\n  range: Range,\n  predicate: Predicate,\n): NodeWithPos[] {\n  const nodesWithPos: NodeWithPos[] = []\n\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos,\n      })\n    }\n  })\n\n  return nodesWithPos\n}\n","import { Node as ProseMirrorNode, ResolvedPos } from '@tiptap/pm/model'\n\nimport { Predicate } from '../types.js'\n\n/**\n * Finds the closest parent node to a resolved position that matches a predicate.\n * @param $pos The resolved position to search from\n * @param predicate The predicate to match\n * @returns The closest parent node to the resolved position that matches the predicate\n * @example ```js\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\n * ```\n */\nexport function findParentNodeClosestToPos(\n  $pos: ResolvedPos,\n  predicate: Predicate,\n):\n  | {\n      pos: number\n      start: number\n      depth: number\n      node: ProseMirrorNode\n    }\n  | undefined {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i)\n\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node,\n      }\n    }\n  }\n}\n","import { Selection } from '@tiptap/pm/state'\n\nimport { Predicate } from '../types.js'\nimport { findParentNodeClosestToPos } from './findParentNodeClosestToPos.js'\n\n/**\n * Finds the closest parent node to the current selection that matches a predicate.\n * @param predicate The predicate to match\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\n * @example ```js\n * findParentNode(node => node.type.name === 'paragraph')\n * ```\n */\nexport function findParentNode(predicate: Predicate) {\n  return (selection: Selection) => findParentNodeClosestToPos(selection.$from, predicate)\n}\n","import { DOMSerializer, Fragment, Schema } from '@tiptap/pm/model'\n\nexport function getHTMLFromFragment(fragment: Fragment, schema: Schema): string {\n  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment)\n\n  const temporaryDocument = document.implementation.createHTMLDocument()\n  const container = temporaryDocument.createElement('div')\n\n  container.appendChild(documentFragment)\n\n  return container.innerHTML\n}\n","import { Schema } from '@tiptap/pm/model'\n\nimport { Editor } from '../Editor.js'\nimport { ExtensionManager } from '../ExtensionManager.js'\nimport { Extensions } from '../types.js'\nimport { getSchemaByResolvedExtensions } from './getSchemaByResolvedExtensions.js'\n\nexport function getSchema(extensions: Extensions, editor?: Editor): Schema {\n  const resolvedExtensions = ExtensionManager.resolve(extensions)\n\n  return getSchemaByResolvedExtensions(resolvedExtensions, editor)\n}\n","import { Node } from '@tiptap/pm/model'\n\nimport { Extensions, JSONContent } from '../types.js'\nimport { getHTMLFromFragment } from './getHTMLFromFragment.js'\nimport { getSchema } from './getSchema.js'\n\n/**\n * Generate HTML from a JSONContent\n * @param doc The JSONContent to generate HTML from\n * @param extensions The extensions to use for the schema\n * @returns The generated HTML\n */\nexport function generateHTML(doc: JSONContent, extensions: Extensions): string {\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getHTMLFromFragment(contentNode.content, schema)\n}\n","import { DOMParser } from '@tiptap/pm/model'\n\nimport { Extensions } from '../types.js'\nimport { elementFromString } from '../utilities/elementFromString.js'\nimport { getSchema } from './getSchema.js'\n\n/**\n * Generate JSONContent from HTML\n * @param html The HTML to generate JSONContent from\n * @param extensions The extensions to use for the schema\n * @returns The generated JSONContent\n */\nexport function generateJSON(html: string, extensions: Extensions): Record<string, any> {\n  const schema = getSchema(extensions)\n  const dom = elementFromString(html)\n\n  return DOMParser.fromSchema(schema).parse(dom).toJSON()\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { TextSerializer } from '../types.js'\nimport { getTextBetween } from './getTextBetween.js'\n\n/**\n * Gets the text of a Prosemirror node\n * @param node The Prosemirror node\n * @param options Options for the text serializer & block separator\n * @returns The text of the node\n * @example ```js\n * const text = getText(node, { blockSeparator: '\\n' })\n * ```\n */\nexport function getText(\n  node: ProseMirrorNode,\n  options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  },\n) {\n  const range = {\n    from: 0,\n    to: node.content.size,\n  }\n\n  return getTextBetween(node, range, options)\n}\n","import { Node } from '@tiptap/pm/model'\n\nimport { Extensions, JSONContent, TextSerializer } from '../types.js'\nimport { getSchema } from './getSchema.js'\nimport { getText } from './getText.js'\nimport { getTextSerializersFromSchema } from './getTextSerializersFromSchema.js'\n\n/**\n * Generate raw text from a JSONContent\n * @param doc The JSONContent to generate text from\n * @param extensions The extensions to use for the schema\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\n * @returns The generated text\n */\nexport function generateText(\n  doc: JSONContent,\n  extensions: Extensions,\n  options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  },\n): string {\n  const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {}\n  const schema = getSchema(extensions)\n  const contentNode = Node.fromJSON(schema, doc)\n\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...getTextSerializersFromSchema(schema),\n      ...textSerializers,\n    },\n  })\n}\n","import { Node, NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { getNodeType } from './getNodeType.js'\n\nexport function getNodeAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType,\n): Record<string, any> {\n  const type = getNodeType(typeOrName, state.schema)\n  const { from, to } = state.selection\n  const nodes: Node[] = []\n\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node)\n  })\n\n  const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name)\n\n  if (!node) {\n    return {}\n  }\n\n  return { ...node.attrs }\n}\n","import { MarkType, NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { getMarkAttributes } from './getMarkAttributes.js'\nimport { getNodeAttributes } from './getNodeAttributes.js'\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName.js'\n\n/**\n * Get node or mark attributes by type or name on the current editor state\n * @param state The current editor state\n * @param typeOrName The node or mark type or name\n * @returns The attributes of the node or mark or an empty object\n */\nexport function getAttributes(\n  state: EditorState,\n  typeOrName: string | NodeType | MarkType,\n): Record<string, any> {\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string' ? typeOrName : typeOrName.name,\n    state.schema,\n  )\n\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName as NodeType)\n  }\n\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName as MarkType)\n  }\n\n  return {}\n}\n","/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nexport function removeDuplicates<T>(array: T[], by = JSON.stringify): T[] {\n  const seen: Record<any, any> = {}\n\n  return array.filter(item => {\n    const key = by(item)\n\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true)\n  })\n}\n","import { Step, Transform } from '@tiptap/pm/transform'\n\nimport { Range } from '../types.js'\nimport { removeDuplicates } from '../utilities/removeDuplicates.js'\n\nexport type ChangedRange = {\n  oldRange: Range,\n  newRange: Range,\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes: ChangedRange[]): ChangedRange[] {\n  const uniqueChanges = removeDuplicates(changes)\n\n  return uniqueChanges.length === 1\n    ? uniqueChanges\n    : uniqueChanges.filter((change, index) => {\n      const rest = uniqueChanges.filter((_, i) => i !== index)\n\n      return !rest.some(otherChange => {\n        return change.oldRange.from >= otherChange.oldRange.from\n          && change.oldRange.to <= otherChange.oldRange.to\n          && change.newRange.from >= otherChange.newRange.from\n          && change.newRange.to <= otherChange.newRange.to\n      })\n    })\n}\n\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nexport function getChangedRanges(transform: Transform): ChangedRange[] {\n  const { mapping, steps } = transform\n  const changes: ChangedRange[] = []\n\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges: Range[] = []\n\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const { from, to } = steps[index] as Step & {\n        from?: number,\n        to?: number,\n      }\n\n      if (from === undefined || to === undefined) {\n        return\n      }\n\n      ranges.push({ from, to })\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({ from, to })\n      })\n    }\n\n    ranges.forEach(({ from, to }) => {\n      const newStart = mapping.slice(index).map(from, -1)\n      const newEnd = mapping.slice(index).map(to)\n      const oldStart = mapping.invert().map(newStart, -1)\n      const oldEnd = mapping.invert().map(newEnd)\n\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd,\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd,\n        },\n      })\n    })\n  })\n\n  return simplifyChangedRanges(changes)\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { JSONContent } from '../types.js'\n\ninterface DebugJSONContent extends JSONContent {\n  from: number\n  to: number\n}\n\nexport function getDebugJSON(node: ProseMirrorNode, startOffset = 0): DebugJSONContent {\n  const isTopNode = node.type === node.type.schema.topNodeType\n  const increment = isTopNode ? 0 : 1\n  const from = startOffset\n  const to = from + node.nodeSize\n  const marks = node.marks.map(mark => {\n    const output: { type: string; attrs?: Record<string, any> } = {\n      type: mark.type.name,\n    }\n\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = { ...mark.attrs }\n    }\n\n    return output\n  })\n  const attrs = { ...node.attrs }\n  const output: DebugJSONContent = {\n    type: node.type.name,\n    from,\n    to,\n  }\n\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs\n  }\n\n  if (marks.length) {\n    output.marks = marks\n  }\n\n  if (node.content.childCount) {\n    output.content = []\n\n    node.forEach((child, offset) => {\n      output.content?.push(getDebugJSON(child, startOffset + offset + increment))\n    })\n  }\n\n  if (node.text) {\n    output.text = node.text\n  }\n\n  return output\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nimport { MarkRange } from '../types.js'\nimport { getMarkRange } from './getMarkRange.js'\n\nexport function getMarksBetween(from: number, to: number, doc: ProseMirrorNode): MarkRange[] {\n  const marks: MarkRange[] = []\n\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc\n      .resolve(from)\n      .marks()\n      .forEach(mark => {\n        const $pos = doc.resolve(from - 1)\n        const range = getMarkRange($pos, mark.type)\n\n        if (!range) {\n          return\n        }\n\n        marks.push({\n          mark,\n          ...range,\n        })\n      })\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      if (!node || node?.nodeSize === undefined) {\n        return\n      }\n\n      marks.push(\n        ...node.marks.map(mark => ({\n          from: pos,\n          to: pos + node.nodeSize,\n          mark,\n        })),\n      )\n    })\n  }\n\n  return marks\n}\n","import { Node, NodeType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\n/**\n * Finds the first node of a given type or name in the current selection.\n * @param state The editor state.\n * @param typeOrName The node type or name.\n * @param pos The position to start searching from.\n * @param maxDepth The maximum depth to search.\n * @returns The node and the depth as an array.\n */\nexport const getNodeAtPosition = (state: EditorState, typeOrName: string | NodeType, pos: number, maxDepth = 20) => {\n  const $pos = state.doc.resolve(pos)\n\n  let currentDepth = maxDepth\n  let node: Node | null = null\n\n  while (currentDepth > 0 && node === null) {\n    const currentNode = $pos.node(currentDepth)\n\n    if (currentNode?.type.name === typeOrName) {\n      node = currentNode\n    } else {\n      currentDepth -= 1\n    }\n  }\n\n  return [node, currentDepth] as [Node | null, number]\n}\n","import { ExtensionAttribute } from '../types.js'\n\n/**\n * Return attributes of an extension that should be splitted by keepOnSplit flag\n * @param extensionAttributes Array of extension attributes\n * @param typeName The type of the extension\n * @param attributes The attributes of the extension\n * @returns The splitted attributes\n */\nexport function getSplittedAttributes(\n  extensionAttributes: ExtensionAttribute[],\n  typeName: string,\n  attributes: Record<string, any>,\n): Record<string, any> {\n  return Object.fromEntries(Object\n    .entries(attributes)\n    .filter(([name]) => {\n      const extensionAttribute = extensionAttributes.find(item => {\n        return item.type === typeName && item.name === name\n      })\n\n      if (!extensionAttribute) {\n        return false\n      }\n\n      return extensionAttribute.attribute.keepOnSplit\n    }))\n}\n","import { MarkType } from '@tiptap/pm/model'\nimport { EditorState } from '@tiptap/pm/state'\n\nimport { MarkRange } from '../types.js'\nimport { objectIncludes } from '../utilities/objectIncludes.js'\nimport { getMarkType } from './getMarkType.js'\n\nexport function isMarkActive(\n  state: EditorState,\n  typeOrName: MarkType | string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  const { empty, ranges } = state.selection\n  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null\n\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks())\n      .filter(mark => {\n        if (!type) {\n          return true\n        }\n\n        return type.name === mark.type.name\n      })\n      .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }))\n  }\n\n  let selectionRange = 0\n  const markRanges: MarkRange[] = []\n\n  ranges.forEach(({ $from, $to }) => {\n    const from = $from.pos\n    const to = $to.pos\n\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return\n      }\n\n      const relativeFrom = Math.max(from, pos)\n      const relativeTo = Math.min(to, pos + node.nodeSize)\n      const range = relativeTo - relativeFrom\n\n      selectionRange += range\n\n      markRanges.push(\n        ...node.marks.map(mark => ({\n          mark,\n          from: relativeFrom,\n          to: relativeTo,\n        })),\n      )\n    })\n  })\n\n  if (selectionRange === 0) {\n    return false\n  }\n\n  // calculate range of matched mark\n  const matchedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return type.name === markRange.mark.type.name\n    })\n    .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges\n    .filter(markRange => {\n      if (!type) {\n        return true\n      }\n\n      return markRange.mark.type !== type && markRange.mark.type.excludes(type)\n    })\n    .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0)\n\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange\n\n  return range >= selectionRange\n}\n","import { EditorState } from '@tiptap/pm/state'\n\nimport { getSchemaTypeNameByName } from './getSchemaTypeNameByName.js'\nimport { isMarkActive } from './isMarkActive.js'\nimport { isNodeActive } from './isNodeActive.js'\n\nexport function isActive(\n  state: EditorState,\n  name: string | null,\n  attributes: Record<string, any> = {},\n): boolean {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes)\n  }\n\n  const schemaType = getSchemaTypeNameByName(name, state.schema)\n\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes)\n  }\n\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes)\n  }\n\n  return false\n}\n","import { EditorState } from '@tiptap/pm/state'\n\nimport { findParentNode } from './findParentNode.js'\n\nexport const isAtEndOfNode = (state: EditorState, nodeType?: string) => {\n  const { $from, $to, $anchor } = state.selection\n\n  if (nodeType) {\n    const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection)\n\n    if (!parentNode) {\n      return false\n    }\n\n    const $parentPos = state.doc.resolve(parentNode.pos + 1)\n\n    if ($anchor.pos + 1 === $parentPos.end()) {\n      return true\n    }\n\n    return false\n  }\n\n  if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n    return false\n  }\n\n  return true\n}\n","import { EditorState } from '@tiptap/pm/state'\n\nexport const isAtStartOfNode = (state: EditorState) => {\n  const { $from, $to } = state.selection\n\n  if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n    return false\n  }\n\n  return true\n}\n","import { getExtensionField } from '../helpers/getExtensionField.js'\nimport { NodeConfig } from '../index.js'\nimport { Extensions } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\nimport { splitExtensions } from './splitExtensions.js'\n\nexport function isList(name: string, extensions: Extensions): boolean {\n  const { nodeExtensions } = splitExtensions(extensions)\n  const extension = nodeExtensions.find(item => item.name === name)\n\n  if (!extension) {\n    return false\n  }\n\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage,\n  }\n  const group = callOrReturn(getExtensionField<NodeConfig['group']>(extension, 'group', context))\n\n  if (typeof group !== 'string') {\n    return false\n  }\n\n  return group.split(' ').includes('list')\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\n\nexport function isNodeEmpty(node: ProseMirrorNode): boolean {\n  const defaultContent = node.type.createAndFill()?.toJSON()\n  const content = node.toJSON()\n\n  return JSON.stringify(defaultContent) === JSON.stringify(content)\n}\n","import { NodeSelection } from '@tiptap/pm/state'\n\nexport function isNodeSelection(value: unknown): value is NodeSelection {\n  return value instanceof NodeSelection\n}\n","import { EditorView } from '@tiptap/pm/view'\n\nimport { minMax } from '../utilities/minMax.js'\n\nexport function posToDOMRect(view: EditorView, from: number, to: number): DOMRect {\n  const minPos = 0\n  const maxPos = view.state.doc.content.size\n  const resolvedFrom = minMax(from, minPos, maxPos)\n  const resolvedEnd = minMax(to, minPos, maxPos)\n  const start = view.coordsAtPos(resolvedFrom)\n  const end = view.coordsAtPos(resolvedEnd, -1)\n  const top = Math.min(start.top, end.top)\n  const bottom = Math.max(start.bottom, end.bottom)\n  const left = Math.min(start.left, end.left)\n  const right = Math.max(start.right, end.right)\n  const width = right - left\n  const height = bottom - top\n  const x = left\n  const y = top\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y,\n  }\n\n  return {\n    ...data,\n    toJSON: () => data,\n  }\n}\n","import { MarkType, ResolvedPos } from '@tiptap/pm/model'\nimport { EditorState, Transaction } from '@tiptap/pm/state'\n\nimport { getMarkAttributes } from '../helpers/getMarkAttributes.js'\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { isTextSelection } from '../helpers/index.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMark: {\n      /**\n       * Add a mark with new attributes.\n       * @param typeOrName The mark type or name.\n       * @example editor.commands.setMark('bold', { level: 1 })\n       */\n      setMark: (typeOrName: string | MarkType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nfunction canSetMark(state: EditorState, tr: Transaction, newMarkType: MarkType) {\n  const { selection } = tr\n  let cursor: ResolvedPos | null = null\n\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor\n  }\n\n  if (cursor) {\n    const currentMarks = state.storedMarks ?? cursor.marks()\n\n    // There can be no current marks that exclude the new mark\n    return (\n      !!newMarkType.isInSet(currentMarks)\n      || !currentMarks.some(mark => mark.type.excludes(newMarkType))\n    )\n  }\n\n  const { ranges } = selection\n\n  return ranges.some(({ $from, $to }) => {\n    let someNodeSupportsMark = $from.depth === 0\n      ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType)\n      : false\n\n    state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false\n      }\n\n      if (node.isInline) {\n        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType)\n        const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks)\n          || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType))\n\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType\n      }\n      return !someNodeSupportsMark\n    })\n\n    return someNodeSupportsMark\n  })\n}\nexport const setMark: RawCommands['setMark'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n  const type = getMarkType(typeOrName, state.schema)\n\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type)\n\n      tr.addStoredMark(\n        type.create({\n          ...oldAttributes,\n          ...attributes,\n        }),\n      )\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos\n        const to = range.$to.pos\n\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from)\n          const trimmedTo = Math.min(pos + node.nodeSize, to)\n          const someHasMark = node.marks.find(mark => mark.type === type)\n\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(\n                  trimmedFrom,\n                  trimmedTo,\n                  type.create({\n                    ...mark.attrs,\n                    ...attributes,\n                  }),\n                )\n              }\n            })\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes))\n          }\n        })\n      })\n    }\n  }\n\n  return canSetMark(state, tr, type)\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setMeta: {\n      /**\n       * Store a metadata property in the current transaction.\n       * @param key The key of the metadata property.\n       * @param value The value to store.\n       * @example editor.commands.setMeta('foo', 'bar')\n       */\n      setMeta: (key: string, value: any) => ReturnType,\n    }\n  }\n}\n\nexport const setMeta: RawCommands['setMeta'] = (key, value) => ({ tr }) => {\n  tr.setMeta(key, value)\n\n  return true\n}\n","import { setBlockType } from '@tiptap/pm/commands'\nimport { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNode: {\n      /**\n       * Replace a given range with a node.\n       * @param typeOrName The type or name of the node\n       * @param attributes The attributes of the node\n       * @example editor.commands.setNode('paragraph')\n       */\n      setNode: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const setNode: RawCommands['setNode'] = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.')\n\n    return false\n  }\n\n  return (\n    chain()\n    // try to convert node to default node if needed\n      .command(({ commands }) => {\n        const canSetBlock = setBlockType(type, attributes)(state)\n\n        if (canSetBlock) {\n          return true\n        }\n\n        return commands.clearNodes()\n      })\n      .command(({ state: updatedState }) => {\n        return setBlockType(type, attributes)(updatedState, dispatch)\n      })\n      .run()\n  )\n}\n","import { NodeSelection } from '@tiptap/pm/state'\n\nimport { RawCommands } from '../types.js'\nimport { minMax } from '../utilities/minMax.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setNodeSelection: {\n      /**\n       * Creates a NodeSelection.\n       * @param position - Position of the node.\n       * @example editor.commands.setNodeSelection(10)\n       */\n      setNodeSelection: (position: number) => ReturnType\n    }\n  }\n}\n\nexport const setNodeSelection: RawCommands['setNodeSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const from = minMax(position, 0, doc.content.size)\n    const selection = NodeSelection.create(doc, from)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { TextSelection } from '@tiptap/pm/state'\n\nimport { Range, RawCommands } from '../types.js'\nimport { minMax } from '../utilities/minMax.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    setTextSelection: {\n      /**\n       * Creates a TextSelection.\n       * @param position The position of the selection.\n       * @example editor.commands.setTextSelection(10)\n       */\n      setTextSelection: (position: number | Range) => ReturnType\n    }\n  }\n}\n\nexport const setTextSelection: RawCommands['setTextSelection'] = position => ({ tr, dispatch }) => {\n  if (dispatch) {\n    const { doc } = tr\n    const { from, to } = typeof position === 'number' ? { from: position, to: position } : position\n    const minPos = TextSelection.atStart(doc).from\n    const maxPos = TextSelection.atEnd(doc).to\n    const resolvedFrom = minMax(from, minPos, maxPos)\n    const resolvedEnd = minMax(to, minPos, maxPos)\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd)\n\n    tr.setSelection(selection)\n  }\n\n  return true\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { sinkListItem as originalSinkListItem } from '@tiptap/pm/schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    sinkListItem: {\n      /**\n       * Sink the list item down into an inner list.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.sinkListItem('listItem')\n       */\n      sinkListItem: (typeOrName: string | NodeType) => ReturnType\n    }\n  }\n}\n\nexport const sinkListItem: RawCommands['sinkListItem'] = typeOrName => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalSinkListItem(type)(state, dispatch)\n}\n","import { EditorState, NodeSelection, TextSelection } from '@tiptap/pm/state'\nimport { canSplit } from '@tiptap/pm/transform'\n\nimport { defaultBlockAt } from '../helpers/defaultBlockAt.js'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes.js'\nimport { RawCommands } from '../types.js'\n\nfunction ensureMarks(state: EditorState, splittableMarks?: string[]) {\n  const marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks?.includes(mark.type.name))\n\n    state.tr.ensureMarks(filteredMarks)\n  }\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitBlock: {\n      /**\n       * Forks a new node from an existing node.\n       * @param options.keepMarks Keep marks from the previous node.\n       * @example editor.commands.splitBlock()\n       * @example editor.commands.splitBlock({ keepMarks: true })\n       */\n      splitBlock: (options?: { keepMarks?: boolean }) => ReturnType\n    }\n  }\n}\n\nexport const splitBlock: RawCommands['splitBlock'] = ({ keepMarks = true } = {}) => ({\n  tr, state, dispatch, editor,\n}) => {\n  const { selection, doc } = tr\n  const { $from, $to } = selection\n  const extensionAttributes = editor.extensionManager.attributes\n  const newAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false\n    }\n\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks)\n      }\n\n      tr.split($from.pos).scrollIntoView()\n    }\n\n    return true\n  }\n\n  if (!$from.parent.isBlock) {\n    return false\n  }\n\n  if (dispatch) {\n    const atEnd = $to.parentOffset === $to.parent.content.size\n\n    if (selection instanceof TextSelection) {\n      tr.deleteSelection()\n    }\n\n    const deflt = $from.depth === 0\n      ? undefined\n      : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n\n    let types = atEnd && deflt\n      ? [\n        {\n          type: deflt,\n          attrs: newAttributes,\n        },\n      ]\n      : undefined\n\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n\n    if (\n      !types\n        && !can\n        && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)\n    ) {\n      can = true\n      types = deflt\n        ? [\n          {\n            type: deflt,\n            attrs: newAttributes,\n          },\n        ]\n        : undefined\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n\n      if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n        const first = tr.mapping.map($from.before())\n        const $first = tr.doc.resolve(first)\n\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n        }\n      }\n    }\n\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks)\n    }\n\n    tr.scrollIntoView()\n  }\n\n  return true\n}\n","import {\n  Fragment, Node as ProseMirrorNode, NodeType, Slice,\n} from '@tiptap/pm/model'\nimport { TextSelection } from '@tiptap/pm/state'\nimport { canSplit } from '@tiptap/pm/transform'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { getSplittedAttributes } from '../helpers/getSplittedAttributes.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    splitListItem: {\n      /**\n       * Splits one list item into two list items.\n       * @param typeOrName The type or name of the node.\n       * @example editor.commands.splitListItem('listItem')\n       */\n      splitListItem: (typeOrName: string | NodeType) => ReturnType\n    }\n  }\n}\n\nexport const splitListItem: RawCommands['splitListItem'] = typeOrName => ({\n  tr, state, dispatch, editor,\n}) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const { $from, $to } = state.selection\n\n  // @ts-ignore\n  // eslint-disable-next-line\n    const node: ProseMirrorNode = state.selection.node\n\n  if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n    return false\n  }\n\n  const grandParent = $from.node(-1)\n\n  if (grandParent.type !== type) {\n    return false\n  }\n\n  const extensionAttributes = editor.extensionManager.attributes\n\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if (\n      $from.depth === 2\n        || $from.node(-3).type !== type\n        || $from.index(-2) !== $from.node(-2).childCount - 1\n    ) {\n      return false\n    }\n\n    if (dispatch) {\n      let wrap = Fragment.empty\n      // eslint-disable-next-line\n        const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3\n\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap))\n      }\n\n      // eslint-disable-next-line\n        const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3\n\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = getSplittedAttributes(\n        extensionAttributes,\n        $from.node().type.name,\n        $from.node().attrs,\n      )\n      const nextType = type.contentMatch.defaultType?.createAndFill(newNextTypeAttributes) || undefined\n\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined))\n\n      const start = $from.before($from.depth - (depthBefore - 1))\n\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0))\n\n      let sel = -1\n\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false\n        }\n\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1\n        }\n      })\n\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)))\n      }\n\n      tr.scrollIntoView()\n    }\n\n    return true\n  }\n\n  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null\n\n  const newTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    grandParent.type.name,\n    grandParent.attrs,\n  )\n  const newNextTypeAttributes = getSplittedAttributes(\n    extensionAttributes,\n    $from.node().type.name,\n    $from.node().attrs,\n  )\n\n  tr.delete($from.pos, $to.pos)\n\n  const types = nextType\n    ? [\n      { type, attrs: newTypeAttributes },\n      { type: nextType, attrs: newNextTypeAttributes },\n    ]\n    : [{ type, attrs: newTypeAttributes }]\n\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false\n  }\n\n  if (dispatch) {\n    const { selection, storedMarks } = state\n    const { splittableMarks } = editor.extensionManager\n    const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n    tr.split($from.pos, 2, types).scrollIntoView()\n\n    if (!marks || !dispatch) {\n      return true\n    }\n\n    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n    tr.ensureMarks(filteredMarks)\n  }\n\n  return true\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { Transaction } from '@tiptap/pm/state'\nimport { canJoin } from '@tiptap/pm/transform'\n\nimport { findParentNode } from '../helpers/findParentNode.js'\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isList } from '../helpers/isList.js'\nimport { RawCommands } from '../types.js'\n\nconst joinListBackwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth)\n\n  if (before === undefined) {\n    return true\n  }\n\n  const nodeBefore = tr.doc.nodeAt(before)\n  const canJoinBackwards = list.node.type === nodeBefore?.type && canJoin(tr.doc, list.pos)\n\n  if (!canJoinBackwards) {\n    return true\n  }\n\n  tr.join(list.pos)\n\n  return true\n}\n\nconst joinListForwards = (tr: Transaction, listType: NodeType): boolean => {\n  const list = findParentNode(node => node.type === listType)(tr.selection)\n\n  if (!list) {\n    return true\n  }\n\n  const after = tr.doc.resolve(list.start).after(list.depth)\n\n  if (after === undefined) {\n    return true\n  }\n\n  const nodeAfter = tr.doc.nodeAt(after)\n  const canJoinForwards = list.node.type === nodeAfter?.type && canJoin(tr.doc, after)\n\n  if (!canJoinForwards) {\n    return true\n  }\n\n  tr.join(after)\n\n  return true\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleList: {\n      /**\n       * Toggle between different list types.\n       * @param listTypeOrName The type or name of the list.\n       * @param itemTypeOrName The type or name of the list item.\n       * @param keepMarks Keep marks when toggling.\n       * @param attributes Attributes for the new list.\n       * @example editor.commands.toggleList('bulletList', 'listItem')\n       */\n      toggleList: (listTypeOrName: string | NodeType, itemTypeOrName: string | NodeType, keepMarks?: boolean, attributes?: Record<string, any>) => ReturnType;\n    }\n  }\n}\n\nexport const toggleList: RawCommands['toggleList'] = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({\n  editor, tr, state, dispatch, chain, commands, can,\n}) => {\n  const { extensions, splittableMarks } = editor.extensionManager\n  const listType = getNodeType(listTypeOrName, state.schema)\n  const itemType = getNodeType(itemTypeOrName, state.schema)\n  const { selection, storedMarks } = state\n  const { $from, $to } = selection\n  const range = $from.blockRange($to)\n\n  const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n  if (!range) {\n    return false\n  }\n\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection)\n\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType)\n    }\n\n    // change list type\n    if (\n      isList(parentList.node.type.name, extensions)\n        && listType.validContent(parentList.node.content)\n        && dispatch\n    ) {\n      return chain()\n        .command(() => {\n          tr.setNodeMarkup(parentList.pos, listType)\n\n          return true\n        })\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run()\n    }\n  }\n  if (!keepMarks || !marks || !dispatch) {\n\n    return chain()\n      // try to convert node to default node if needed\n      .command(() => {\n        const canWrapInList = can().wrapInList(listType, attributes)\n\n        if (canWrapInList) {\n          return true\n        }\n\n        return commands.clearNodes()\n      })\n      .wrapInList(listType, attributes)\n      .command(() => joinListBackwards(tr, listType))\n      .command(() => joinListForwards(tr, listType))\n      .run()\n  }\n\n  return (\n    chain()\n    // try to convert node to default node if needed\n      .command(() => {\n        const canWrapInList = can().wrapInList(listType, attributes)\n\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n        tr.ensureMarks(filteredMarks)\n\n        if (canWrapInList) {\n          return true\n        }\n\n        return commands.clearNodes()\n      })\n      .wrapInList(listType, attributes)\n      .command(() => joinListBackwards(tr, listType))\n      .command(() => joinListForwards(tr, listType))\n      .run()\n  )\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { isMarkActive } from '../helpers/isMarkActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleMark: {\n      /**\n       * Toggle a mark on and off.\n       * @param typeOrName The mark type or name.\n       * @param attributes The attributes of the mark.\n       * @param options.extendEmptyMarkRange Removes the mark even across the current selection. Defaults to `false`.\n       * @example editor.commands.toggleMark('bold')\n       */\n      toggleMark: (\n        /**\n         * The mark type or name.\n         */\n        typeOrName: string | MarkType,\n\n        /**\n         * The attributes of the mark.\n         */\n        attributes?: Record<string, any>,\n\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nexport const toggleMark: RawCommands['toggleMark'] = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n  const { extendEmptyMarkRange = false } = options\n  const type = getMarkType(typeOrName, state.schema)\n  const isActive = isMarkActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.unsetMark(type, { extendEmptyMarkRange })\n  }\n\n  return commands.setMark(type, attributes)\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isNodeActive } from '../helpers/isNodeActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleNode: {\n      /**\n       * Toggle a node with another node.\n       * @param typeOrName The type or name of the node.\n       * @param toggleTypeOrName The type or name of the node to toggle.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.toggleNode('heading', 'paragraph')\n       */\n      toggleNode: (\n        typeOrName: string | NodeType,\n        toggleTypeOrName: string | NodeType,\n        attributes?: Record<string, any>,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const toggleNode: RawCommands['toggleNode'] = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const toggleType = getNodeType(toggleTypeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.setNode(toggleType)\n  }\n\n  return commands.setNode(type, attributes)\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { isNodeActive } from '../helpers/isNodeActive.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    toggleWrap: {\n      /**\n       * Wraps nodes in another node, or removes an existing wrap.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.toggleWrap('blockquote')\n       */\n      toggleWrap: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const toggleWrap: RawCommands['toggleWrap'] = (typeOrName, attributes = {}) => ({ state, commands }) => {\n  const type = getNodeType(typeOrName, state.schema)\n  const isActive = isNodeActive(state, type, attributes)\n\n  if (isActive) {\n    return commands.lift(type)\n  }\n\n  return commands.wrapIn(type, attributes)\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    undoInputRule: {\n      /**\n       * Undo an input rule.\n       * @example editor.commands.undoInputRule()\n       */\n      undoInputRule: () => ReturnType,\n    }\n  }\n}\n\nexport const undoInputRule: RawCommands['undoInputRule'] = () => ({ state, dispatch }) => {\n  const plugins = state.plugins\n\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i]\n    let undoable\n\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr\n        const toUndo = undoable.transform\n\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]))\n        }\n\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks()\n\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks))\n        } else {\n          tr.delete(undoable.from, undoable.to)\n        }\n      }\n\n      return true\n    }\n  }\n\n  return false\n}\n","import { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetAllMarks: {\n      /**\n       * Remove all marks in the current selection.\n       * @example editor.commands.unsetAllMarks()\n       */\n      unsetAllMarks: () => ReturnType,\n    }\n  }\n}\n\nexport const unsetAllMarks: RawCommands['unsetAllMarks'] = () => ({ tr, dispatch }) => {\n  const { selection } = tr\n  const { empty, ranges } = selection\n\n  if (empty) {\n    return true\n  }\n\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos)\n    })\n  }\n\n  return true\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarkRange } from '../helpers/getMarkRange.js'\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    unsetMark: {\n      /**\n       * Remove all marks in the current selection.\n       * @param typeOrName The mark type or name.\n       * @param options.extendEmptyMarkRange Removes the mark even across the current selection. Defaults to `false`.\n       * @example editor.commands.unsetMark('bold')\n       */\n      unsetMark: (\n        /**\n         * The mark type or name.\n         */\n        typeOrName: string | MarkType,\n\n        options?: {\n          /**\n           * Removes the mark even across the current selection. Defaults to `false`.\n           */\n          extendEmptyMarkRange?: boolean\n        },\n      ) => ReturnType\n    }\n  }\n}\n\nexport const unsetMark: RawCommands['unsetMark'] = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n  const { extendEmptyMarkRange = false } = options\n  const { selection } = tr\n  const type = getMarkType(typeOrName, state.schema)\n  const { $from, empty, ranges } = selection\n\n  if (!dispatch) {\n    return true\n  }\n\n  if (empty && extendEmptyMarkRange) {\n    let { from, to } = selection\n    const attrs = $from.marks().find(mark => mark.type === type)?.attrs\n    const range = getMarkRange($from, type, attrs)\n\n    if (range) {\n      from = range.from\n      to = range.to\n    }\n\n    tr.removeMark(from, to, type)\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type)\n    })\n  }\n\n  tr.removeStoredMark(type)\n\n  return true\n}\n","import { MarkType, NodeType } from '@tiptap/pm/model'\n\nimport { getMarkType } from '../helpers/getMarkType.js'\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { getSchemaTypeNameByName } from '../helpers/getSchemaTypeNameByName.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    updateAttributes: {\n      /**\n       * Update attributes of a node or mark.\n       * @param typeOrName The type or name of the node or mark.\n       * @param attributes The attributes of the node or mark.\n       * @example editor.commands.updateAttributes('mention', { userId: \"2\" })\n       */\n      updateAttributes: (\n        /**\n         * The type or name of the node or mark.\n         */\n        typeOrName: string | NodeType | MarkType,\n\n        /**\n         * The attributes of the node or mark.\n         */\n        attributes: Record<string, any>,\n      ) => ReturnType\n    }\n  }\n}\n\nexport const updateAttributes: RawCommands['updateAttributes'] = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n  let nodeType: NodeType | null = null\n  let markType: MarkType | null = null\n\n  const schemaType = getSchemaTypeNameByName(\n    typeof typeOrName === 'string' ? typeOrName : typeOrName.name,\n    state.schema,\n  )\n\n  if (!schemaType) {\n    return false\n  }\n\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName as NodeType, state.schema)\n  }\n\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName as MarkType, state.schema)\n  }\n\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos\n      const to = range.$to.pos\n\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes,\n          })\n        }\n\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from)\n              const trimmedTo = Math.min(pos + node.nodeSize, to)\n\n              tr.addMark(\n                trimmedFrom,\n                trimmedTo,\n                markType.create({\n                  ...mark.attrs,\n                  ...attributes,\n                }),\n              )\n            }\n          })\n        }\n      })\n    })\n  }\n\n  return true\n}\n","import { wrapIn as originalWrapIn } from '@tiptap/pm/commands'\nimport { NodeType } from '@tiptap/pm/model'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapIn: {\n      /**\n       * Wraps nodes in another node.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.wrapIn('blockquote')\n       */\n      wrapIn: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const wrapIn: RawCommands['wrapIn'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapIn(type, attributes)(state, dispatch)\n}\n","import { NodeType } from '@tiptap/pm/model'\nimport { wrapInList as originalWrapInList } from '@tiptap/pm/schema-list'\n\nimport { getNodeType } from '../helpers/getNodeType.js'\nimport { RawCommands } from '../types.js'\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    wrapInList: {\n      /**\n       * Wrap a node in a list.\n       * @param typeOrName The type or name of the node.\n       * @param attributes The attributes of the node.\n       * @example editor.commands.wrapInList('bulletList')\n       */\n      wrapInList: (typeOrName: string | NodeType, attributes?: Record<string, any>) => ReturnType\n    }\n  }\n}\n\nexport const wrapInList: RawCommands['wrapInList'] = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n  const type = getNodeType(typeOrName, state.schema)\n\n  return originalWrapInList(type, attributes)(state, dispatch)\n}\n","import * as commands from '../commands/index.js'\nimport { Extension } from '../Extension.js'\n\nexport * from '../commands/index.js'\n\nexport const Commands = Extension.create({\n  name: 'commands',\n\n  addCommands() {\n    return {\n      ...commands,\n    }\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const Editable = Extension.create({\n  name: 'editable',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('editable'),\n        props: {\n          editable: () => this.editor.options.editable,\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const FocusEvents = Extension.create({\n  name: 'focusEvents',\n\n  addProseMirrorPlugins() {\n    const { editor } = this\n\n    return [\n      new Plugin({\n        key: new PluginKey('focusEvents'),\n        props: {\n          handleDOMEvents: {\n            focus: (view, event: Event) => {\n              editor.isFocused = true\n\n              const transaction = editor.state.tr\n                .setMeta('focus', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n            blur: (view, event: Event) => {\n              editor.isFocused = false\n\n              const transaction = editor.state.tr\n                .setMeta('blur', { event })\n                .setMeta('addToHistory', false)\n\n              view.dispatch(transaction)\n\n              return false\n            },\n          },\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey, Selection } from '@tiptap/pm/state'\n\nimport { CommandManager } from '../CommandManager.js'\nimport { Extension } from '../Extension.js'\nimport { createChainableState } from '../helpers/createChainableState.js'\nimport { isiOS } from '../utilities/isiOS.js'\nimport { isMacOS } from '../utilities/isMacOS.js'\n\nexport const Keymap = Extension.create({\n  name: 'keymap',\n\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n      () => commands.undoInputRule(),\n\n      // maybe convert first text block node to default node\n      () => commands.command(({ tr }) => {\n        const { selection, doc } = tr\n        const { empty, $anchor } = selection\n        const { pos, parent } = $anchor\n        const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor\n        const parentIsIsolating = $parentPos.parent.type.spec.isolating\n\n        const parentPos = $anchor.pos - $anchor.parentOffset\n\n        const isAtStart = (parentIsIsolating && $parentPos.parent.childCount === 1)\n          ? parentPos === $anchor.pos\n          : Selection.atStart(doc).from === pos\n\n        if (\n          !empty\n          || !parent.type.isTextblock\n          || parent.textContent.length\n          || !isAtStart\n          || (isAtStart && $anchor.parent.type.name === 'paragraph') // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n        ) {\n          return false\n        }\n\n        return commands.clearNodes()\n      }),\n\n      () => commands.deleteSelection(),\n      () => commands.joinBackward(),\n      () => commands.selectNodeBackward(),\n    ])\n\n    const handleDelete = () => this.editor.commands.first(({ commands }) => [\n      () => commands.deleteSelection(),\n      () => commands.deleteCurrentNode(),\n      () => commands.joinForward(),\n      () => commands.selectNodeForward(),\n    ])\n\n    const handleEnter = () => this.editor.commands.first(({ commands }) => [\n      () => commands.newlineInCode(),\n      () => commands.createParagraphNear(),\n      () => commands.liftEmptyBlock(),\n      () => commands.splitBlock(),\n    ])\n\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll(),\n    }\n\n    const pcKeymap = {\n      ...baseKeymap,\n    }\n\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n    }\n\n    if (isiOS() || isMacOS()) {\n      return macKeymap\n    }\n\n    return pcKeymap\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      // With this plugin we check if the whole document was selected and deleted.\n      // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n      // to a paragraph if necessary.\n      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n      // with many other commands.\n      new Plugin({\n        key: new PluginKey('clearDocument'),\n        appendTransaction: (transactions, oldState, newState) => {\n          const docChanges = transactions.some(transaction => transaction.docChanged)\n            && !oldState.doc.eq(newState.doc)\n\n          if (!docChanges) {\n            return\n          }\n\n          const { empty, from, to } = oldState.selection\n          const allFrom = Selection.atStart(oldState.doc).from\n          const allEnd = Selection.atEnd(oldState.doc).to\n          const allWasSelected = from === allFrom && to === allEnd\n\n          if (empty || !allWasSelected) {\n            return\n          }\n\n          const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0\n\n          if (!isEmpty) {\n            return\n          }\n\n          const tr = newState.tr\n          const state = createChainableState({\n            state: newState,\n            transaction: tr,\n          })\n          const { commands } = new CommandManager({\n            editor: this.editor,\n            state,\n          })\n\n          commands.clearNodes()\n\n          if (!tr.steps.length) {\n            return\n          }\n\n          return tr\n        },\n      }),\n    ]\n  },\n})\n","import { Plugin, PluginKey } from '@tiptap/pm/state'\n\nimport { Extension } from '../Extension.js'\n\nexport const Tabindex = Extension.create({\n  name: 'tabindex',\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: new PluginKey('tabindex'),\n        props: {\n          attributes: this.editor.isEditable ? { tabindex: '0' } : {},\n        },\n      }),\n    ]\n  },\n})\n","import {\n  Fragment, Node, ResolvedPos,\n} from '@tiptap/pm/model'\n\nimport { Editor } from './Editor.js'\nimport { Content, Range } from './types.js'\n\nexport class NodePos {\n  private resolvedPos: ResolvedPos\n\n  private isBlock: boolean\n\n  private editor: Editor\n\n  private get name(): string {\n    return this.node.type.name\n  }\n\n  constructor(pos: ResolvedPos, editor: Editor, isBlock = false, node: Node | null = null) {\n    this.isBlock = isBlock\n    this.resolvedPos = pos\n    this.editor = editor\n    this.currentNode = node\n  }\n\n  private currentNode: Node | null = null\n\n  get node(): Node {\n    return this.currentNode || this.resolvedPos.node()\n  }\n\n  get element(): HTMLElement {\n    return this.editor.view.domAtPos(this.pos).node as HTMLElement\n  }\n\n  public actualDepth: number | null = null\n\n  get depth(): number {\n    return this.actualDepth ?? this.resolvedPos.depth\n  }\n\n  get pos(): number {\n    return this.resolvedPos.pos\n  }\n\n  get content(): Fragment {\n    return this.node.content\n  }\n\n  set content(content: Content) {\n    let from = this.from\n    let to = this.to\n\n    if (this.isBlock) {\n      if (this.content.size === 0) {\n        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`)\n        return\n      }\n\n      from = this.from + 1\n      to = this.to - 1\n    }\n\n    this.editor.commands.insertContentAt({ from, to }, content)\n  }\n\n  get attributes(): { [key: string]: any } {\n    return this.node.attrs\n  }\n\n  get textContent(): string {\n    return this.node.textContent\n  }\n\n  get size(): number {\n    return this.node.nodeSize\n  }\n\n  get from(): number {\n    if (this.isBlock) {\n      return this.pos\n    }\n\n    return this.resolvedPos.start(this.resolvedPos.depth)\n  }\n\n  get range(): Range {\n    return {\n      from: this.from,\n      to: this.to,\n    }\n  }\n\n  get to(): number {\n    if (this.isBlock) {\n      return this.pos + this.size\n    }\n\n    return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1)\n  }\n\n  get parent(): NodePos | null {\n    if (this.depth === 0) {\n      return null\n    }\n\n    const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1)\n    const $pos = this.resolvedPos.doc.resolve(parentPos)\n\n    return new NodePos($pos, this.editor)\n  }\n\n  get before(): NodePos | null {\n    let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2))\n\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.from - 3)\n    }\n\n    return new NodePos($pos, this.editor)\n  }\n\n  get after(): NodePos | null {\n    let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1))\n\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.to + 3)\n    }\n\n    return new NodePos($pos, this.editor)\n  }\n\n  get children(): NodePos[] {\n    const children: NodePos[] = []\n\n    this.node.content.forEach((node, offset) => {\n      const isBlock = node.isBlock && !node.isTextblock\n\n      const targetPos = this.pos + offset + 1\n      const $pos = this.resolvedPos.doc.resolve(targetPos)\n\n      if (!isBlock && $pos.depth <= this.depth) {\n        return\n      }\n\n      const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null)\n\n      if (isBlock) {\n        childNodePos.actualDepth = this.depth + 1\n      }\n\n      children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null))\n    })\n\n    return children\n  }\n\n  get firstChild(): NodePos | null {\n    return this.children[0] || null\n  }\n\n  get lastChild(): NodePos | null {\n    const children = this.children\n\n    return children[children.length - 1] || null\n  }\n\n  closest(selector: string, attributes: { [key: string]: any } = {}): NodePos | null {\n    let node: NodePos | null = null\n    let currentNode = this.parent\n\n    while (currentNode && !node) {\n      if (currentNode.node.type.name === selector) {\n        if (Object.keys(attributes).length > 0) {\n          const nodeAttributes = currentNode.node.attrs\n          const attrKeys = Object.keys(attributes)\n\n          for (let index = 0; index < attrKeys.length; index += 1) {\n            const key = attrKeys[index]\n\n            if (nodeAttributes[key] !== attributes[key]) {\n              break\n            }\n          }\n        } else {\n          node = currentNode\n        }\n      }\n\n      currentNode = currentNode.parent\n    }\n\n    return node\n  }\n\n  querySelector(selector: string, attributes: { [key: string]: any } = {}): NodePos | null {\n    return this.querySelectorAll(selector, attributes, true)[0] || null\n  }\n\n  querySelectorAll(selector: string, attributes: { [key: string]: any } = {}, firstItemOnly = false): NodePos[] {\n    let nodes: NodePos[] = []\n\n    if (!this.children || this.children.length === 0) {\n      return nodes\n    }\n    const attrKeys = Object.keys(attributes)\n\n    /**\n     * Finds all children recursively that match the selector and attributes\n     * If firstItemOnly is true, it will return the first item found\n     */\n    this.children.forEach(childPos => {\n      // If we already found a node and we only want the first item, we dont need to keep going\n      if (firstItemOnly && nodes.length > 0) {\n        return\n      }\n\n      if (childPos.node.type.name === selector) {\n        const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key])\n\n        if (doesAllAttributesMatch) {\n          nodes.push(childPos)\n        }\n      }\n\n      // If we already found a node and we only want the first item, we can stop here and skip the recursion\n      if (firstItemOnly && nodes.length > 0) {\n        return\n      }\n\n      nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly))\n    })\n\n    return nodes\n  }\n\n  setAttribute(attributes: { [key: string]: any }) {\n    const oldSelection = this.editor.state.selection\n\n    this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from)\n      .run()\n  }\n}\n","export const style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`\n","export function createStyleTag(style: string, nonce?: string, suffix?: string): HTMLStyleElement {\n  const tiptapStyleTag = (<HTMLStyleElement>document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`))\n\n  if (tiptapStyleTag !== null) {\n    return tiptapStyleTag\n  }\n\n  const styleNode = document.createElement('style')\n\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce)\n  }\n\n  styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '')\n  styleNode.innerHTML = style\n  document.getElementsByTagName('head')[0].appendChild(styleNode)\n\n  return styleNode\n}\n","import {\n  MarkType, NodeType, Schema,\n} from '@tiptap/pm/model'\nimport {\n  EditorState, Plugin, PluginKey, Transaction,\n} from '@tiptap/pm/state'\nimport { EditorView } from '@tiptap/pm/view'\n\nimport { CommandManager } from './CommandManager.js'\nimport { EventEmitter } from './EventEmitter.js'\nimport { ExtensionManager } from './ExtensionManager.js'\nimport {\n  ClipboardTextSerializer, Commands, Editable, FocusEvents, Keymap, Tabindex,\n} from './extensions/index.js'\nimport { createDocument } from './helpers/createDocument.js'\nimport { getAttributes } from './helpers/getAttributes.js'\nimport { getHTMLFromFragment } from './helpers/getHTMLFromFragment.js'\nimport { getText } from './helpers/getText.js'\nimport { getTextSerializersFromSchema } from './helpers/getTextSerializersFromSchema.js'\nimport { isActive } from './helpers/isActive.js'\nimport { isNodeEmpty } from './helpers/isNodeEmpty.js'\nimport { resolveFocusPosition } from './helpers/resolveFocusPosition.js'\nimport { NodePos } from './NodePos.js'\nimport { style } from './style.js'\nimport {\n  CanCommands,\n  ChainedCommands,\n  EditorEvents,\n  EditorOptions,\n  JSONContent,\n  SingleCommands,\n  TextSerializer,\n} from './types.js'\nimport { createStyleTag } from './utilities/createStyleTag.js'\nimport { isFunction } from './utilities/isFunction.js'\n\nexport * as extensions from './extensions/index.js'\n\nexport interface HTMLElement {\n  editor?: Editor\n}\n\nexport class Editor extends EventEmitter<EditorEvents> {\n  private commandManager!: CommandManager\n\n  public extensionManager!: ExtensionManager\n\n  private css!: HTMLStyleElement\n\n  public schema!: Schema\n\n  public view!: EditorView\n\n  public isFocused = false\n\n  public extensionStorage: Record<string, any> = {}\n\n  public options: EditorOptions = {\n    element: document.createElement('div'),\n    content: '',\n    injectCSS: true,\n    injectNonce: undefined,\n    extensions: [],\n    autofocus: false,\n    editable: true,\n    editorProps: {},\n    parseOptions: {},\n    coreExtensionOptions: {},\n    enableInputRules: true,\n    enablePasteRules: true,\n    enableCoreExtensions: true,\n    onBeforeCreate: () => null,\n    onCreate: () => null,\n    onUpdate: () => null,\n    onSelectionUpdate: () => null,\n    onTransaction: () => null,\n    onFocus: () => null,\n    onBlur: () => null,\n    onDestroy: () => null,\n  }\n\n  constructor(options: Partial<EditorOptions> = {}) {\n    super()\n    this.setOptions(options)\n    this.createExtensionManager()\n    this.createCommandManager()\n    this.createSchema()\n    this.on('beforeCreate', this.options.onBeforeCreate)\n    this.emit('beforeCreate', { editor: this })\n    this.createView()\n    this.injectCSS()\n    this.on('create', this.options.onCreate)\n    this.on('update', this.options.onUpdate)\n    this.on('selectionUpdate', this.options.onSelectionUpdate)\n    this.on('transaction', this.options.onTransaction)\n    this.on('focus', this.options.onFocus)\n    this.on('blur', this.options.onBlur)\n    this.on('destroy', this.options.onDestroy)\n\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return\n      }\n\n      this.commands.focus(this.options.autofocus)\n      this.emit('create', { editor: this })\n    }, 0)\n  }\n\n  /**\n   * Returns the editor storage.\n   */\n  public get storage(): Record<string, any> {\n    return this.extensionStorage\n  }\n\n  /**\n   * An object of all registered commands.\n   */\n  public get commands(): SingleCommands {\n    return this.commandManager.commands\n  }\n\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  public chain(): ChainedCommands {\n    return this.commandManager.chain()\n  }\n\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  public can(): CanCommands {\n    return this.commandManager.can()\n  }\n\n  /**\n   * Inject CSS styles.\n   */\n  private injectCSS(): void {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce)\n    }\n  }\n\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  public setOptions(options: Partial<EditorOptions> = {}): void {\n    this.options = {\n      ...this.options,\n      ...options,\n    }\n\n    if (!this.view || !this.state || this.isDestroyed) {\n      return\n    }\n\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps)\n    }\n\n    this.view.updateState(this.state)\n  }\n\n  /**\n   * Update editable state of the editor.\n   */\n  public setEditable(editable: boolean, emitUpdate = true): void {\n    this.setOptions({ editable })\n\n    if (emitUpdate) {\n      this.emit('update', { editor: this, transaction: this.state.tr })\n    }\n  }\n\n  /**\n   * Returns whether the editor is editable.\n   */\n  public get isEditable(): boolean {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable && this.view && this.view.editable\n  }\n\n  /**\n   * Returns the editor state.\n   */\n  public get state(): EditorState {\n    return this.view.state\n  }\n\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  public registerPlugin(\n    plugin: Plugin,\n    handlePlugins?: (newPlugin: Plugin, plugins: Plugin[]) => Plugin[],\n  ): void {\n    const plugins = isFunction(handlePlugins)\n      ? handlePlugins(plugin, [...this.state.plugins])\n      : [...this.state.plugins, plugin]\n\n    const state = this.state.reconfigure({ plugins })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  public unregisterPlugin(nameOrPluginKey: string | PluginKey): void {\n    if (this.isDestroyed) {\n      return\n    }\n\n    // @ts-ignore\n    const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key\n\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n    })\n\n    this.view.updateState(state)\n  }\n\n  /**\n   * Creates an extension manager.\n   */\n  private createExtensionManager(): void {\n\n    const coreExtensions = this.options.enableCoreExtensions ? [\n      Editable,\n      ClipboardTextSerializer.configure({\n        blockSeparator: this.options.coreExtensionOptions?.clipboardTextSerializer?.blockSeparator,\n      }),\n      Commands,\n      FocusEvents,\n      Keymap,\n      Tabindex,\n    ] : []\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension?.type)\n    })\n\n    this.extensionManager = new ExtensionManager(allExtensions, this)\n  }\n\n  /**\n   * Creates an command manager.\n   */\n  private createCommandManager(): void {\n    this.commandManager = new CommandManager({\n      editor: this,\n    })\n  }\n\n  /**\n   * Creates a ProseMirror schema.\n   */\n  private createSchema(): void {\n    this.schema = this.extensionManager.schema\n  }\n\n  /**\n   * Creates a ProseMirror view.\n   */\n  private createView(): void {\n    const doc = createDocument(this.options.content, this.schema, this.options.parseOptions)\n    const selection = resolveFocusPosition(doc, this.options.autofocus)\n\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined,\n      }),\n    })\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    })\n\n    this.view.updateState(newState)\n\n    this.createNodeViews()\n    this.prependClass()\n\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    const dom = this.view.dom as HTMLElement\n\n    dom.editor = this\n  }\n\n  /**\n   * Creates all node views.\n   */\n  public createNodeViews(): void {\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews,\n    })\n  }\n\n  /**\n   * Prepend class name to element.\n   */\n  public prependClass(): void {\n    this.view.dom.className = `tiptap ${this.view.dom.className}`\n  }\n\n  public isCapturingTransaction = false\n\n  private capturedTransaction: Transaction | null = null\n\n  public captureTransaction(fn: Function) {\n    this.isCapturingTransaction = true\n    fn()\n    this.isCapturingTransaction = false\n\n    const tr = this.capturedTransaction\n\n    this.capturedTransaction = null\n\n    return tr\n  }\n\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  private dispatchTransaction(transaction: Transaction): void {\n    // if the editor / the view of the editor was destroyed\n    // the transaction should not be dispatched as there is no view anymore.\n    if (this.view.isDestroyed) {\n      return\n    }\n\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction\n\n        return\n      }\n\n      transaction.steps.forEach(step => this.capturedTransaction?.step(step))\n\n      return\n    }\n\n    const state = this.state.apply(transaction)\n    const selectionHasChanged = !this.state.selection.eq(state.selection)\n\n    this.view.updateState(state)\n    this.emit('transaction', {\n      editor: this,\n      transaction,\n    })\n\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction,\n      })\n    }\n\n    const focus = transaction.getMeta('focus')\n    const blur = transaction.getMeta('blur')\n\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction,\n      })\n    }\n\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction,\n      })\n    }\n\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return\n    }\n\n    this.emit('update', {\n      editor: this,\n      transaction,\n    })\n  }\n\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  public getAttributes(nameOrType: string | NodeType | MarkType): Record<string, any> {\n    return getAttributes(this.state, nameOrType)\n  }\n\n  /**\n   * Returns if the currently selected node or mark is active.\n   *\n   * @param name Name of the node or mark\n   * @param attributes Attributes of the node or mark\n   */\n  public isActive(name: string, attributes?: {}): boolean\n  public isActive(attributes: {}): boolean\n  public isActive(nameOrAttributes: string, attributesOrUndefined?: {}): boolean {\n    const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null\n\n    const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes\n\n    return isActive(this.state, name, attributes)\n  }\n\n  /**\n   * Get the document as JSON.\n   */\n  public getJSON(): JSONContent {\n    return this.state.doc.toJSON()\n  }\n\n  /**\n   * Get the document as HTML.\n   */\n  public getHTML(): string {\n    return getHTMLFromFragment(this.state.doc.content, this.schema)\n  }\n\n  /**\n   * Get the document as text.\n   */\n  public getText(options?: {\n    blockSeparator?: string\n    textSerializers?: Record<string, TextSerializer>\n  }): string {\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {}\n\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...getTextSerializersFromSchema(this.schema),\n        ...textSerializers,\n      },\n    })\n  }\n\n  /**\n   * Check if there is no content.\n   */\n  public get isEmpty(): boolean {\n    return isNodeEmpty(this.state.doc)\n  }\n\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  public getCharacterCount(): number {\n    console.warn(\n      '[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.',\n    )\n\n    return this.state.doc.content.size - 2\n  }\n\n  /**\n   * Destroy the editor.\n   */\n  public destroy(): void {\n    this.emit('destroy')\n\n    if (this.view) {\n      this.view.destroy()\n    }\n\n    this.removeAllListeners()\n  }\n\n  /**\n   * Check if the editor is already destroyed.\n   */\n  public get isDestroyed(): boolean {\n    // @ts-ignore\n    return !this.view?.docView\n  }\n\n  public $node(selector: string, attributes?: { [key: string]: any }): NodePos | null {\n    return this.$doc?.querySelector(selector, attributes) || null\n  }\n\n  public $nodes(selector: string, attributes?: { [key: string]: any }): NodePos[] | null {\n    return this.$doc?.querySelectorAll(selector, attributes) || null\n  }\n\n  public $pos(pos: number) {\n    const $pos = this.state.doc.resolve(pos)\n\n    return new NodePos($pos, this)\n  }\n\n  get $doc() {\n    return this.$pos(0)\n  }\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween.js'\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nexport function markInputRule(config: {\n  find: InputRuleFinder\n  type: MarkType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        const markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nexport function nodeInputRule(config: {\n  /**\n   * The regex to match.\n   */\n  find: InputRuleFinder\n\n  /**\n   * The node type to add.\n   */\n  type: NodeType\n\n  /**\n   * A function that returns the attributes for the node\n   * can also be an object of attributes\n   */\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const { tr } = state\n      const start = range.from\n      let end = range.to\n\n      const newNode = config.type.create(attributes)\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n        let matchStart = start + offset\n\n        if (matchStart > end) {\n          matchStart = end\n        } else {\n          end = matchStart + match[1].length\n        }\n\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1]\n\n        tr.insertText(lastChar, start + match[0].length - 1)\n\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, newNode)\n      } else if (match[0]) {\n        tr.insert(start - 1, config.type.create(attributes)).delete(\n          tr.mapping.map(start),\n          tr.mapping.map(end),\n        )\n      }\n\n      tr.scrollIntoView()\n    },\n  })\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nexport function textblockTypeInputRule(config: {\n  find: InputRuleFinder\n  type: NodeType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      const $start = state.doc.resolve(range.from)\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null\n      }\n\n      state.tr\n        .delete(range.from, range.to)\n        .setBlockType(range.from, range.from, config.type, attributes)\n    },\n  })\n}\n","import { InputRule, InputRuleFinder } from '../InputRule.js'\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nexport function textInputRule(config: {\n  find: InputRuleFinder,\n  replace: string,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Node as ProseMirrorNode, NodeType } from '@tiptap/pm/model'\nimport { canJoin, findWrapping } from '@tiptap/pm/transform'\n\nimport { Editor } from '../Editor.js'\nimport { InputRule, InputRuleFinder } from '../InputRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nexport function wrappingInputRule(config: {\n  find: InputRuleFinder,\n  type: NodeType,\n  keepMarks?: boolean,\n  keepAttributes?: boolean,\n  editor?: Editor\n  getAttributes?:\n  | Record<string, any>\n  | ((match: ExtendedRegExpMatchArray) => Record<string, any>)\n  | false\n  | null\n  ,\n  joinPredicate?: (match: ExtendedRegExpMatchArray, node: ProseMirrorNode) => boolean,\n}) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state, range, match, chain,\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {}\n      const tr = state.tr.delete(range.from, range.to)\n      const $start = tr.doc.resolve(range.from)\n      const blockRange = $start.blockRange()\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes)\n\n      if (!wrapping) {\n        return null\n      }\n\n      tr.wrap(blockRange, wrapping)\n\n      if (config.keepMarks && config.editor) {\n        const { selection, storedMarks } = state\n        const { splittableMarks } = config.editor.extensionManager\n        const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks())\n\n        if (marks) {\n          const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name))\n\n          tr.ensureMarks(filteredMarks)\n        }\n      }\n      if (config.keepAttributes) {\n        /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n        const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList'\n\n        chain().updateAttributes(nodeType, attributes).run()\n      }\n\n      const before = tr.doc.resolve(range.from - 1).nodeBefore\n\n      if (\n        before\n        && before.type === config.type\n        && canJoin(tr.doc, range.from - 1)\n        && (!config.joinPredicate || config.joinPredicate(match, before))\n      ) {\n        tr.join(range.from - 1)\n      }\n    },\n  })\n}\n","import {\n  DOMOutputSpec, Mark as ProseMirrorMark, MarkSpec, MarkType,\n} from '@tiptap/pm/model'\nimport { Plugin, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { MarkConfig } from './index.js'\nimport { InputRule } from './InputRule.js'\nimport { Node } from './Node.js'\nimport { PasteRule } from './PasteRule.js'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  ParentConfig,\n  RawCommands,\n} from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { mergeDeep } from './utilities/mergeDeep.js'\n\ndeclare module '@tiptap/core' {\n  export interface MarkConfig<Options = any, Storage = any> {\n    [key: string]: any\n\n    /**\n     * The extension name - this must be unique.\n     * It will be used to identify the extension.\n     *\n     * @example 'myExtension'\n     */\n    name: string\n\n    /**\n     * The priority of your extension. The higher, the later it will be called\n     * and will take precedence over other extensions with a lower priority.\n     * @default 1000\n     * @example 1001\n     */\n    priority?: number\n\n    /**\n     * The default options for this extension.\n     * @example\n     * defaultOptions: {\n     *   myOption: 'foo',\n     *   myOtherOption: 10,\n     * }\n     */\n    defaultOptions?: Options\n\n    /**\n     * This method will add options to this extension\n     * @see https://tiptap.dev/guide/custom-extensions#settings\n     * @example\n     * addOptions() {\n     *  return {\n     *    myOption: 'foo',\n     *    myOtherOption: 10,\n     * }\n     */\n    addOptions?: (this: {\n      name: string\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addOptions'], undefined>\n    }) => Options\n\n    /**\n     * The default storage this extension can save data to.\n     * @see https://tiptap.dev/guide/custom-extensions#storage\n     * @example\n     * defaultStorage: {\n     *   prefetchedUsers: [],\n     *   loading: false,\n     * }\n     */\n    addStorage?: (this: {\n      name: string\n      options: Options\n      parent: Exclude<ParentConfig<MarkConfig<Options, Storage>>['addStorage'], undefined>\n    }) => Storage\n\n    /**\n     * This function adds globalAttributes to specific nodes.\n     * @see https://tiptap.dev/guide/custom-extensions#global-attributes\n     * @example\n     * addGlobalAttributes() {\n     *   return [\n     *     {\n             // Extend the following extensions\n     *       types: [\n     *         'heading',\n     *         'paragraph',\n     *       ],\n     *       // … with those attributes\n     *       attributes: {\n     *         textAlign: {\n     *           default: 'left',\n     *           renderHTML: attributes => ({\n     *             style: `text-align: ${attributes.textAlign}`,\n     *           }),\n     *           parseHTML: element => element.style.textAlign || 'left',\n     *         },\n     *       },\n     *     },\n     *   ]\n     * }\n     */\n    addGlobalAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addGlobalAttributes']\n    }) => GlobalAttributes | {}\n\n    /**\n     * This function adds commands to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addCommands() {\n     *   return {\n     *     myCommand: () => ({ chain }) => chain().setMark('type', 'foo').run(),\n     *   }\n     * }\n     */\n    addCommands?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addCommands']\n    }) => Partial<RawCommands>\n\n    /**\n     * This function registers keyboard shortcuts.\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addKeyboardShortcuts() {\n     *   return {\n     *     'Mod-l': () => this.editor.commands.toggleBulletList(),\n     *   }\n     * },\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addKeyboardShortcuts']\n    }) => {\n      [key: string]: KeyboardShortcutCommand\n    }\n\n    /**\n     * This function adds input rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#input-rules\n     * @example\n     * addInputRules() {\n     *   return [\n     *     markInputRule({\n     *       find: inputRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addInputRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addInputRules']\n    }) => InputRule[]\n\n    /**\n     * This function adds paste rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#paste-rules\n     * @example\n     * addPasteRules() {\n     *   return [\n     *     markPasteRule({\n     *       find: pasteRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addPasteRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addPasteRules']\n    }) => PasteRule[]\n\n    /**\n     * This function adds Prosemirror plugins to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#prosemirror-plugins\n     * @example\n     * addProseMirrorPlugins() {\n     *   return [\n     *     customPlugin(),\n     *   ]\n     * }\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: MarkType\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addProseMirrorPlugins']\n    }) => Plugin[]\n\n    /**\n     * This function adds additional extensions to the editor. This is useful for\n     * building extension kits.\n     * @example\n     * addExtensions() {\n     *   return [\n     *     BulletList,\n     *     OrderedList,\n     *     ListItem\n     *   ]\n     * }\n     */\n    addExtensions?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addExtensions']\n    }) => Extensions\n\n    /**\n     * This function extends the schema of the node.\n     * @example\n     * extendNodeSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendNodeSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<MarkConfig<Options, Storage>>['extendNodeSchema']\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * This function extends the schema of the mark.\n     * @example\n     * extendMarkSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendMarkSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<MarkConfig<Options, Storage>>['extendMarkSchema']\n          },\n          extension: Mark,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onBeforeCreate']\n        }) => void)\n      | null\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onCreate']\n        }) => void)\n      | null\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onSelectionUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: MarkType\n            parent: ParentConfig<MarkConfig<Options, Storage>>['onTransaction']\n          },\n          props: {\n            transaction: Transaction\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: MarkType\n            parent: ParentConfig<MarkConfig<Options, Storage>>['onFocus']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: MarkType\n            parent: ParentConfig<MarkConfig<Options, Storage>>['onBlur']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: MarkType\n          parent: ParentConfig<MarkConfig<Options, Storage>>['onDestroy']\n        }) => void)\n      | null\n\n    /**\n     * Keep mark after split node\n     */\n    keepOnSplit?: boolean | (() => boolean)\n\n    /**\n     * Inclusive\n     */\n    inclusive?:\n      | MarkSpec['inclusive']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['inclusive']\n          editor?: Editor\n        }) => MarkSpec['inclusive'])\n\n    /**\n     * Excludes\n     */\n    excludes?:\n      | MarkSpec['excludes']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['excludes']\n          editor?: Editor\n        }) => MarkSpec['excludes'])\n\n    /**\n     * Marks this Mark as exitable\n     */\n    exitable?: boolean | (() => boolean)\n\n    /**\n     * Group\n     */\n    group?:\n      | MarkSpec['group']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['group']\n          editor?: Editor\n        }) => MarkSpec['group'])\n\n    /**\n     * Spanning\n     */\n    spanning?:\n      | MarkSpec['spanning']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['spanning']\n          editor?: Editor\n        }) => MarkSpec['spanning'])\n\n    /**\n     * Code\n     */\n    code?:\n      | boolean\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<MarkConfig<Options, Storage>>['code']\n          editor?: Editor\n        }) => boolean)\n\n    /**\n     * Parse HTML\n     */\n    parseHTML?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['parseHTML']\n      editor?: Editor\n    }) => MarkSpec['parseDOM']\n\n    /**\n     * Render HTML\n     */\n    renderHTML?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<MarkConfig<Options, Storage>>['renderHTML']\n            editor?: Editor\n          },\n          props: {\n            mark: ProseMirrorMark\n            HTMLAttributes: Record<string, any>\n          },\n        ) => DOMOutputSpec)\n      | null\n\n    /**\n     * Attributes\n     */\n    addAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<MarkConfig<Options, Storage>>['addAttributes']\n      editor?: Editor\n    }) => Attributes | {}\n  }\n}\n\n/**\n * The Mark class is used to create custom mark extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nexport class Mark<Options = any, Storage = any> {\n  type = 'mark'\n\n  name = 'mark'\n\n  parent: Mark | null = null\n\n  child: Mark | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: MarkConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<MarkConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`,\n      )\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(\n        getExtensionField<AnyConfig['addOptions']>(this, 'addOptions', {\n          name: this.name,\n        }),\n      )\n    }\n\n    this.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(this, 'addStorage', {\n        name: this.name,\n        options: this.options,\n      }),\n    ) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<MarkConfig<O, S>> = {}) {\n    return new Mark<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options as Record<string, any>, options) as Options\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(\n    extendedConfig: Partial<MarkConfig<ExtendedOptions, ExtendedStorage>> = {},\n  ) {\n    const extension = new Mark<ExtendedOptions, ExtendedStorage>({ ...this.config, ...extendedConfig })\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`,\n      )\n    }\n\n    extension.options = callOrReturn(\n      getExtensionField<AnyConfig['addOptions']>(extension, 'addOptions', {\n        name: extension.name,\n      }),\n    )\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n\n  static handleExit({ editor, mark }: { editor: Editor; mark: Mark }) {\n    const { tr } = editor.state\n    const currentPos = editor.state.selection.$from\n    const isAtEnd = currentPos.pos === currentPos.end()\n\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks()\n      const isInMark = !!currentMarks.find(m => m?.type.name === mark.name)\n\n      if (!isInMark) {\n        return false\n      }\n\n      const removeMark = currentMarks.find(m => m?.type.name === mark.name)\n\n      if (removeMark) {\n        tr.removeStoredMark(removeMark)\n      }\n      tr.insertText(' ', currentPos.pos)\n\n      editor.view.dispatch(tr)\n\n      return true\n    }\n\n    return false\n  }\n}\n","import {\n  DOMOutputSpec, Node as ProseMirrorNode, NodeSpec, NodeType,\n} from '@tiptap/pm/model'\nimport { Plugin, Transaction } from '@tiptap/pm/state'\n\nimport { Editor } from './Editor.js'\nimport { getExtensionField } from './helpers/getExtensionField.js'\nimport { NodeConfig } from './index.js'\nimport { InputRule } from './InputRule.js'\nimport { PasteRule } from './PasteRule.js'\nimport {\n  AnyConfig,\n  Attributes,\n  Extensions,\n  GlobalAttributes,\n  KeyboardShortcutCommand,\n  NodeViewRenderer,\n  ParentConfig,\n  RawCommands,\n} from './types.js'\nimport { callOrReturn } from './utilities/callOrReturn.js'\nimport { mergeDeep } from './utilities/mergeDeep.js'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options = any, Storage = any> {\n    [key: string]: any\n\n    /**\n     * The extension name - this must be unique.\n     * It will be used to identify the extension.\n     *\n     * @example 'myExtension'\n     */\n    name: string\n\n    /**\n     * The priority of your extension. The higher, the later it will be called\n     * and will take precedence over other extensions with a lower priority.\n     * @default 1000\n     * @example 1001\n     */\n    priority?: number\n\n    /**\n     * The default options for this extension.\n     * @example\n     * defaultOptions: {\n     *   myOption: 'foo',\n     *   myOtherOption: 10,\n     * }\n     */\n    defaultOptions?: Options\n\n    /**\n     * This method will add options to this extension\n     * @see https://tiptap.dev/guide/custom-extensions#settings\n     * @example\n     * addOptions() {\n     *  return {\n     *    myOption: 'foo',\n     *    myOtherOption: 10,\n     * }\n     */\n    addOptions?: (this: {\n      name: string\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addOptions'], undefined>\n    }) => Options\n\n    /**\n     * The default storage this extension can save data to.\n     * @see https://tiptap.dev/guide/custom-extensions#storage\n     * @example\n     * defaultStorage: {\n     *   prefetchedUsers: [],\n     *   loading: false,\n     * }\n     */\n    addStorage?: (this: {\n      name: string\n      options: Options\n      parent: Exclude<ParentConfig<NodeConfig<Options, Storage>>['addStorage'], undefined>\n    }) => Storage\n\n    /**\n     * This function adds globalAttributes to specific nodes.\n     * @see https://tiptap.dev/guide/custom-extensions#global-attributes\n     * @example\n     * addGlobalAttributes() {\n     *   return [\n     *     {\n             // Extend the following extensions\n     *       types: [\n     *         'heading',\n     *         'paragraph',\n     *       ],\n     *       // … with those attributes\n     *       attributes: {\n     *         textAlign: {\n     *           default: 'left',\n     *           renderHTML: attributes => ({\n     *             style: `text-align: ${attributes.textAlign}`,\n     *           }),\n     *           parseHTML: element => element.style.textAlign || 'left',\n     *         },\n     *       },\n     *     },\n     *   ]\n     * }\n     */\n    addGlobalAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addGlobalAttributes']\n    }) => GlobalAttributes | {}\n\n    /**\n     * This function adds commands to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addCommands() {\n     *   return {\n     *     myCommand: () => ({ chain }) => chain().setMark('type', 'foo').run(),\n     *   }\n     * }\n     */\n    addCommands?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addCommands']\n    }) => Partial<RawCommands>\n\n    /**\n     * This function registers keyboard shortcuts.\n     * @see https://tiptap.dev/guide/custom-extensions#keyboard-shortcuts\n     * @example\n     * addKeyboardShortcuts() {\n     *   return {\n     *     'Mod-l': () => this.editor.commands.toggleBulletList(),\n     *   }\n     * },\n     */\n    addKeyboardShortcuts?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addKeyboardShortcuts']\n    }) => {\n      [key: string]: KeyboardShortcutCommand\n    }\n\n    /**\n     * This function adds input rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#input-rules\n     * @example\n     * addInputRules() {\n     *   return [\n     *     markInputRule({\n     *       find: inputRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addInputRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addInputRules']\n    }) => InputRule[]\n\n    /**\n     * This function adds paste rules to the editor.\n     * @see https://tiptap.dev/guide/custom-extensions#paste-rules\n     * @example\n     * addPasteRules() {\n     *   return [\n     *     markPasteRule({\n     *       find: pasteRegex,\n     *       type: this.type,\n     *     }),\n     *   ]\n     * },\n     */\n    addPasteRules?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addPasteRules']\n    }) => PasteRule[]\n\n    /**\n     * This function adds Prosemirror plugins to the editor\n     * @see https://tiptap.dev/guide/custom-extensions#prosemirror-plugins\n     * @example\n     * addProseMirrorPlugins() {\n     *   return [\n     *     customPlugin(),\n     *   ]\n     * }\n     */\n    addProseMirrorPlugins?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      editor: Editor\n      type: NodeType\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addProseMirrorPlugins']\n    }) => Plugin[]\n\n    /**\n     * This function adds additional extensions to the editor. This is useful for\n     * building extension kits.\n     * @example\n     * addExtensions() {\n     *   return [\n     *     BulletList,\n     *     OrderedList,\n     *     ListItem\n     *   ]\n     * }\n     */\n    addExtensions?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addExtensions']\n    }) => Extensions\n\n    /**\n     * This function extends the schema of the node.\n     * @example\n     * extendNodeSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendNodeSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['extendNodeSchema']\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * This function extends the schema of the mark.\n     * @example\n     * extendMarkSchema() {\n     *   return {\n     *     group: 'inline',\n     *     selectable: false,\n     *   }\n     * }\n     */\n    extendMarkSchema?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['extendMarkSchema']\n            editor?: Editor\n          },\n          extension: Node,\n        ) => Record<string, any>)\n      | null\n\n    /**\n     * The editor is not ready yet.\n     */\n    onBeforeCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onBeforeCreate']\n        }) => void)\n      | null\n\n    /**\n     * The editor is ready.\n     */\n    onCreate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onCreate']\n        }) => void)\n      | null\n\n    /**\n     * The content has changed.\n     */\n    onUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The selection has changed.\n     */\n    onSelectionUpdate?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onSelectionUpdate']\n        }) => void)\n      | null\n\n    /**\n     * The editor state has changed.\n     */\n    onTransaction?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: NodeType\n            parent: ParentConfig<NodeConfig<Options, Storage>>['onTransaction']\n          },\n          props: {\n            transaction: Transaction\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is focused.\n     */\n    onFocus?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: NodeType\n            parent: ParentConfig<NodeConfig<Options, Storage>>['onFocus']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor isn’t focused anymore.\n     */\n    onBlur?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            editor: Editor\n            type: NodeType\n            parent: ParentConfig<NodeConfig<Options, Storage>>['onBlur']\n          },\n          props: {\n            event: FocusEvent\n          },\n        ) => void)\n      | null\n\n    /**\n     * The editor is destroyed.\n     */\n    onDestroy?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['onDestroy']\n        }) => void)\n      | null\n\n    /**\n     * Node View\n     */\n    addNodeView?:\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          editor: Editor\n          type: NodeType\n          parent: ParentConfig<NodeConfig<Options, Storage>>['addNodeView']\n        }) => NodeViewRenderer)\n      | null\n\n    /**\n     * Defines if this node should be a top level node (doc)\n     * @default false\n     * @example true\n     */\n    topNode?: boolean\n\n    /**\n     * The content expression for this node, as described in the [schema\n     * guide](/docs/guide/#schema.content_expressions). When not given,\n     * the node does not allow any content.\n     *\n     * You can read more about it on the Prosemirror documentation here\n     * @see https://prosemirror.net/docs/guide/#schema.content_expressions\n     * @default undefined\n     * @example content: 'block+'\n     * @example content: 'headline paragraph block*'\n     */\n    content?:\n      | NodeSpec['content']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['content']\n          editor?: Editor\n        }) => NodeSpec['content'])\n\n    /**\n     * The marks that are allowed inside of this node. May be a\n     * space-separated string referring to mark names or groups, `\"_\"`\n     * to explicitly allow all marks, or `\"\"` to disallow marks. When\n     * not given, nodes with inline content default to allowing all\n     * marks, other nodes default to not allowing marks.\n     *\n     * @example marks: 'strong em'\n     */\n    marks?:\n      | NodeSpec['marks']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['marks']\n          editor?: Editor\n        }) => NodeSpec['marks'])\n\n    /**\n     * The group or space-separated groups to which this node belongs,\n     * which can be referred to in the content expressions for the\n     * schema.\n     *\n     * By default Tiptap uses the groups 'block' and 'inline' for nodes. You\n     * can also use custom groups if you want to group specific nodes together\n     * and handle them in your schema.\n     * @example group: 'block'\n     * @example group: 'inline'\n     * @example group: 'customBlock' // this uses a custom group\n     */\n    group?:\n      | NodeSpec['group']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['group']\n          editor?: Editor\n        }) => NodeSpec['group'])\n\n    /**\n     * Should be set to true for inline nodes. (Implied for text nodes.)\n     */\n    inline?:\n      | NodeSpec['inline']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['inline']\n          editor?: Editor\n        }) => NodeSpec['inline'])\n\n    /**\n     * Can be set to true to indicate that, though this isn't a [leaf\n     * node](https://prosemirror.net/docs/ref/#model.NodeType.isLeaf), it doesn't have directly editable\n     * content and should be treated as a single unit in the view.\n     *\n     * @example atom: true\n     */\n    atom?:\n      | NodeSpec['atom']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['atom']\n          editor?: Editor\n        }) => NodeSpec['atom'])\n\n    /**\n     * Controls whether nodes of this type can be selected as a [node\n     * selection](https://prosemirror.net/docs/ref/#state.NodeSelection). Defaults to true for non-text\n     * nodes.\n     *\n     * @default true\n     * @example selectable: false\n     */\n    selectable?:\n      | NodeSpec['selectable']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['selectable']\n          editor?: Editor\n        }) => NodeSpec['selectable'])\n\n    /**\n     * Determines whether nodes of this type can be dragged without\n     * being selected. Defaults to false.\n     *\n     * @default: false\n     * @example: draggable: true\n     */\n    draggable?:\n      | NodeSpec['draggable']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['draggable']\n          editor?: Editor\n        }) => NodeSpec['draggable'])\n\n    /**\n     * Can be used to indicate that this node contains code, which\n     * causes some commands to behave differently.\n     */\n    code?:\n      | NodeSpec['code']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['code']\n          editor?: Editor\n        }) => NodeSpec['code'])\n\n    /**\n     * Controls way whitespace in this a node is parsed. The default is\n     * `\"normal\"`, which causes the [DOM parser](https://prosemirror.net/docs/ref/#model.DOMParser) to\n     * collapse whitespace in normal mode, and normalize it (replacing\n     * newlines and such with spaces) otherwise. `\"pre\"` causes the\n     * parser to preserve spaces inside the node. When this option isn't\n     * given, but [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) is true, `whitespace`\n     * will default to `\"pre\"`. Note that this option doesn't influence\n     * the way the node is rendered—that should be handled by `toDOM`\n     * and/or styling.\n     */\n    whitespace?:\n      | NodeSpec['whitespace']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['whitespace']\n          editor?: Editor\n        }) => NodeSpec['whitespace'])\n\n    /**\n     * When enabled, enables both\n     * [`definingAsContext`](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext) and\n     * [`definingForContent`](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).\n     *\n     * @default false\n     * @example isolating: true\n     */\n    defining?:\n      | NodeSpec['defining']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['defining']\n          editor?: Editor\n        }) => NodeSpec['defining'])\n\n    /**\n     * When enabled (default is false), the sides of nodes of this type\n     * count as boundaries that regular editing operations, like\n     * backspacing or lifting, won't cross. An example of a node that\n     * should probably have this enabled is a table cell.\n     */\n    isolating?:\n      | NodeSpec['isolating']\n      | ((this: {\n          name: string\n          options: Options\n          storage: Storage\n          parent: ParentConfig<NodeConfig<Options, Storage>>['isolating']\n          editor?: Editor\n        }) => NodeSpec['isolating'])\n\n    /**\n     * Associates DOM parser information with this node, which can be\n     * used by [`DOMParser.fromSchema`](https://prosemirror.net/docs/ref/#model.DOMParser^fromSchema) to\n     * automatically derive a parser. The `node` field in the rules is\n     * implied (the name of this node will be filled in automatically).\n     * If you supply your own parser, you do not need to also specify\n     * parsing rules in your schema.\n     *\n     * @example parseHTML: [{ tag: 'div', attrs: { 'data-id': 'my-block' } }]\n     */\n    parseHTML?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['parseHTML']\n      editor?: Editor\n    }) => NodeSpec['parseDOM']\n\n    /**\n     * A description of a DOM structure. Can be either a string, which is\n     * interpreted as a text node, a DOM node, which is interpreted as\n     * itself, a `{dom, contentDOM}` object, or an array.\n     *\n     * An array describes a DOM element. The first value in the array\n     * should be a string—the name of the DOM element, optionally prefixed\n     * by a namespace URL and a space. If the second element is plain\n     * object, it is interpreted as a set of attributes for the element.\n     * Any elements after that (including the 2nd if it's not an attribute\n     * object) are interpreted as children of the DOM elements, and must\n     * either be valid `DOMOutputSpec` values, or the number zero.\n     *\n     * The number zero (pronounced “hole”) is used to indicate the place\n     * where a node's child nodes should be inserted. If it occurs in an\n     * output spec, it should be the only child element in its parent\n     * node.\n     *\n     * @example toDOM: ['div[data-id=\"my-block\"]', { class: 'my-block' }, 0]\n     */\n    renderHTML?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['renderHTML']\n            editor?: Editor\n          },\n          props: {\n            node: ProseMirrorNode\n            HTMLAttributes: Record<string, any>\n          },\n        ) => DOMOutputSpec)\n      | null\n\n    /**\n     * renders the node as text\n     * @example renderText: () => 'foo\n     */\n    renderText?:\n      | ((\n          this: {\n            name: string\n            options: Options\n            storage: Storage\n            parent: ParentConfig<NodeConfig<Options, Storage>>['renderText']\n            editor?: Editor\n          },\n          props: {\n            node: ProseMirrorNode\n            pos: number\n            parent: ProseMirrorNode\n            index: number\n          },\n        ) => string)\n      | null\n\n    /**\n     * Add attributes to the node\n     * @example addAttributes: () => ({ class: 'foo' })\n     */\n    addAttributes?: (this: {\n      name: string\n      options: Options\n      storage: Storage\n      parent: ParentConfig<NodeConfig<Options, Storage>>['addAttributes']\n      editor?: Editor\n    }) => Attributes | {}\n  }\n}\n\n/**\n * The Node class is used to create custom node extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nexport class Node<Options = any, Storage = any> {\n  type = 'node'\n\n  name = 'node'\n\n  parent: Node | null = null\n\n  child: Node | null = null\n\n  options: Options\n\n  storage: Storage\n\n  config: NodeConfig = {\n    name: this.name,\n    defaultOptions: {},\n  }\n\n  constructor(config: Partial<NodeConfig<Options, Storage>> = {}) {\n    this.config = {\n      ...this.config,\n      ...config,\n    }\n\n    this.name = this.config.name\n\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`,\n      )\n    }\n\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions\n\n    if (this.config.addOptions) {\n      this.options = callOrReturn(\n        getExtensionField<AnyConfig['addOptions']>(this, 'addOptions', {\n          name: this.name,\n        }),\n      )\n    }\n\n    this.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(this, 'addStorage', {\n        name: this.name,\n        options: this.options,\n      }),\n    ) || {}\n  }\n\n  static create<O = any, S = any>(config: Partial<NodeConfig<O, S>> = {}) {\n    return new Node<O, S>(config)\n  }\n\n  configure(options: Partial<Options> = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend()\n\n    extension.options = mergeDeep(this.options as Record<string, any>, options) as Options\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n\n  extend<ExtendedOptions = Options, ExtendedStorage = Storage>(\n    extendedConfig: Partial<NodeConfig<ExtendedOptions, ExtendedStorage>> = {},\n  ) {\n    const extension = new Node<ExtendedOptions, ExtendedStorage>({ ...this.config, ...extendedConfig })\n\n    extension.parent = this\n\n    this.child = extension\n\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name\n\n    if (extendedConfig.defaultOptions) {\n      console.warn(\n        `[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`,\n      )\n    }\n\n    extension.options = callOrReturn(\n      getExtensionField<AnyConfig['addOptions']>(extension, 'addOptions', {\n        name: extension.name,\n      }),\n    )\n\n    extension.storage = callOrReturn(\n      getExtensionField<AnyConfig['addStorage']>(extension, 'addStorage', {\n        name: extension.name,\n        options: extension.options,\n      }),\n    )\n\n    return extension\n  }\n}\n","export function isAndroid(): boolean {\n  return navigator.platform === 'Android' || /android/i.test(navigator.userAgent)\n}\n","import { Node as ProseMirrorNode } from '@tiptap/pm/model'\nimport { NodeSelection } from '@tiptap/pm/state'\nimport { NodeView as ProseMirrorNodeView } from '@tiptap/pm/view'\n\nimport { Editor as CoreEditor } from './Editor.js'\nimport { Node } from './Node.js'\nimport { DecorationWithType, NodeViewRendererOptions, NodeViewRendererProps } from './types.js'\nimport { isAndroid } from './utilities/isAndroid.js'\nimport { isiOS } from './utilities/isiOS.js'\n\n/**\n * Node views are used to customize the rendered DOM structure of a node.\n * @see https://tiptap.dev/guide/node-views\n */\nexport class NodeView<\n  Component,\n  NodeEditor extends CoreEditor = CoreEditor,\n  Options extends NodeViewRendererOptions = NodeViewRendererOptions,\n> implements ProseMirrorNodeView {\n  component: Component\n\n  editor: NodeEditor\n\n  options: Options\n\n  extension: Node\n\n  node: ProseMirrorNode\n\n  decorations: DecorationWithType[]\n\n  getPos: any\n\n  isDragging = false\n\n  constructor(component: Component, props: NodeViewRendererProps, options?: Partial<Options>) {\n    this.component = component\n    this.editor = props.editor as NodeEditor\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options,\n    } as Options\n    this.extension = props.extension\n    this.node = props.node\n    this.decorations = props.decorations as DecorationWithType[]\n    this.getPos = props.getPos\n    this.mount()\n  }\n\n  mount() {\n    // eslint-disable-next-line\n    return\n  }\n\n  get dom(): HTMLElement {\n    return this.editor.view.dom as HTMLElement\n  }\n\n  get contentDOM(): HTMLElement | null {\n    return null\n  }\n\n  onDragStart(event: DragEvent) {\n    const { view } = this.editor\n    const target = event.target as HTMLElement\n\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3\n      ? target.parentElement?.closest('[data-drag-handle]')\n      : target.closest('[data-drag-handle]')\n\n    if (!this.dom || this.contentDOM?.contains(target) || !dragHandle) {\n      return\n    }\n\n    let x = 0\n    let y = 0\n\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect()\n      const handleBox = dragHandle.getBoundingClientRect()\n\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = event.offsetX ?? (event as any).nativeEvent?.offsetX\n      const offsetY = event.offsetY ?? (event as any).nativeEvent?.offsetY\n\n      x = handleBox.x - domBox.x + offsetX\n      y = handleBox.y - domBox.y + offsetY\n    }\n\n    event.dataTransfer?.setDragImage(this.dom, x, y)\n\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos())\n    const transaction = view.state.tr.setSelection(selection)\n\n    view.dispatch(transaction)\n  }\n\n  stopEvent(event: Event) {\n    if (!this.dom) {\n      return false\n    }\n\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({ event })\n    }\n\n    const target = event.target as HTMLElement\n    const isInElement = this.dom.contains(target) && !this.contentDOM?.contains(target)\n\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false\n    }\n\n    const isDragEvent = event.type.startsWith('drag')\n    const isDropEvent = event.type === 'drop'\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable\n\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent && !isDragEvent) {\n      return true\n    }\n\n    const { isEditable } = this.editor\n    const { isDragging } = this\n    const isDraggable = !!this.node.type.spec.draggable\n    const isSelectable = NodeSelection.isSelectable(this.node)\n    const isCopyEvent = event.type === 'copy'\n    const isPasteEvent = event.type === 'paste'\n    const isCutEvent = event.type === 'cut'\n    const isClickEvent = event.type === 'mousedown'\n\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault()\n    }\n\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault()\n      return false\n    }\n\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]')\n      const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle))\n\n      if (isValidDragHandle) {\n        this.isDragging = true\n\n        document.addEventListener(\n          'dragend',\n          () => {\n            this.isDragging = false\n          },\n          { once: true },\n        )\n\n        document.addEventListener(\n          'drop',\n          () => {\n            this.isDragging = false\n          },\n          { once: true },\n        )\n\n        document.addEventListener(\n          'mouseup',\n          () => {\n            this.isDragging = false\n          },\n          { once: true },\n        )\n      }\n    }\n\n    // these events are handled by prosemirror\n    if (\n      isDragging\n      || isDropEvent\n      || isCopyEvent\n      || isPasteEvent\n      || isCutEvent\n      || (isClickEvent && isSelectable)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  ignoreMutation(mutation: MutationRecord | { type: 'selection'; target: Element }) {\n    if (!this.dom || !this.contentDOM) {\n      return true\n    }\n\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({ mutation })\n    }\n\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true\n    }\n\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false\n    }\n\n    // try to prevent a bug on iOS and Android that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    // see: https://github.com/ueberdosis/tiptap/issues/2534\n    if (\n      this.dom.contains(mutation.target)\n      && mutation.type === 'childList'\n      && (isiOS() || isAndroid())\n      && this.editor.isFocused\n    ) {\n      const changedNodes = [\n        ...Array.from(mutation.addedNodes),\n        ...Array.from(mutation.removedNodes),\n      ] as HTMLElement[]\n\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false\n      }\n    }\n\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true\n    }\n\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false\n    }\n\n    return true\n  }\n\n  updateAttributes(attributes: {}) {\n    this.editor.commands.command(({ tr }) => {\n      const pos = this.getPos()\n\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes,\n      })\n\n      return true\n    })\n  }\n\n  deleteNode(): void {\n    const from = this.getPos()\n    const to = from + this.node.nodeSize\n\n    this.editor.commands.deleteRange({ from, to })\n  }\n}\n","import { MarkType } from '@tiptap/pm/model'\n\nimport { getMarksBetween } from '../helpers/getMarksBetween.js'\nimport { PasteRule, PasteRuleFinder } from '../PasteRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/callOrReturn.js'\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nexport function markPasteRule(config: {\n  find: PasteRuleFinder\n  type: MarkType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray, event: ClipboardEvent) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({\n      state, range, match, pasteEvent,\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      const { tr } = state\n      const captureGroup = match[match.length - 1]\n      const fullMatch = match[0]\n      let markEnd = range.to\n\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/)\n        const textStart = range.from + fullMatch.indexOf(captureGroup)\n        const textEnd = textStart + captureGroup.length\n\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n          .filter(item => {\n            // @ts-ignore\n            const excluded = item.mark.type.excluded as MarkType[]\n\n            return excluded.find(type => type === config.type && type !== item.mark.type)\n          })\n          .filter(item => item.to > textStart)\n\n        if (excludedMarks.length) {\n          return null\n        }\n\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to)\n        }\n\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart)\n        }\n\n        markEnd = range.from + startSpaces + captureGroup.length\n\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}))\n\n        tr.removeStoredMark(config.type)\n      }\n    },\n  })\n}\n","// source: https://stackoverflow.com/a/6969486\nexport function escapeForRegEx(string: string): string {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string'\n}\n","import { NodeType } from '@tiptap/pm/model'\n\nimport { PasteRule, PasteRuleFinder } from '../PasteRule.js'\nimport { ExtendedRegExpMatchArray } from '../types.js'\nimport { callOrReturn } from '../utilities/index.js'\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nexport function nodePasteRule(config: {\n  find: PasteRuleFinder\n  type: NodeType\n  getAttributes?:\n    | Record<string, any>\n    | ((match: ExtendedRegExpMatchArray, event: ClipboardEvent) => Record<string, any>)\n    | false\n    | null\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler({\n      match, chain, range, pasteEvent,\n    }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent)\n\n      if (attributes === false || attributes === null) {\n        return null\n      }\n\n      if (match.input) {\n        chain().deleteRange(range).insertContentAt(range.from, {\n          type: config.type.name,\n          attrs: attributes,\n        })\n      }\n    },\n  })\n}\n","import { PasteRule, PasteRuleFinder } from '../PasteRule.js'\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nexport function textPasteRule(config: {\n  find: PasteRuleFinder,\n  replace: string,\n}) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({ state, range, match }) => {\n      let insert = config.replace\n      let start = range.from\n      const end = range.to\n\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1])\n\n        insert += match[0].slice(offset + match[1].length)\n        start += offset\n\n        const cutOff = start - end\n\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert\n          start = end\n        }\n      }\n\n      state.tr.insertText(insert, start, end)\n    },\n  })\n}\n","import { Transaction } from '@tiptap/pm/state'\n\nexport interface TrackerResult {\n  position: number\n  deleted: boolean\n}\n\nexport class Tracker {\n  transaction: Transaction\n\n  currentStep: number\n\n  constructor(transaction: Transaction) {\n    this.transaction = transaction\n    this.currentStep = this.transaction.steps.length\n  }\n\n  map(position: number): TrackerResult {\n    let deleted = false\n\n    const mappedPosition = this.transaction.steps\n      .slice(this.currentStep)\n      .reduce((newPosition, step) => {\n        const mapResult = step.getMap().mapResult(newPosition)\n\n        if (mapResult.deleted) {\n          deleted = true\n        }\n\n        return mapResult.pos\n      }, position)\n\n    return {\n      position: mappedPosition,\n      deleted,\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}